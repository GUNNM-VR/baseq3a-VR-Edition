code
proc CG_MachineGunEjectBrass 148 12
file "..\..\..\..\code\cgame\cg_weapons.c"
line 22
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// cg_weapons.c -- events and effects dealing with weapons
;4:#include "cg_local.h"
;5:
;6:#ifdef USE_VR
;7:#include "../../../Quake3e-master/code/vrmod/VRMOD_input.h"
;8:
;9:#include "vr_helper.h"
;10:
;11:#ifdef USE_NATIVE_HACK
;12:extern vr_clientinfo_t *vrinfo;
;13:#endif
;14:
;15:#endif
;16:
;17:/*
;18:==========================
;19:CG_MachineGunEjectBrass
;20:==========================
;21:*/
;22:static void CG_MachineGunEjectBrass(centity_t *cent) {
line 27
;23:	localEntity_t	*le;
;24:	refEntity_t		*re;
;25:	vec3_t			velocity, xvelocity;
;26:	vec3_t			offset, xoffset;
;27:	float			waterScale = 1.0f;
ADDRLP4 92
CNSTF4 1065353216
ASGNF4
line 31
;28:	vec3_t			v[3];
;29:	vec3_t			rightAngles;
;30:
;31:	if ( cg_brassTime.integer <= 0 ) {
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 0
GTI4 $88
line 32
;32:		return;
ADDRGP4 $87
JUMPV
LABELV $88
line 36
;33:	}
;34:
;35:#ifdef USE_VR
;36:	VR_get_cent_controller_angles( cent, rightAngles, SideRIGHT );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 96
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 VR_get_cent_controller_angles
CALLV
pop
line 41
;37:#else
;38:	VectorCopy(cent->lerpAngles, rightAngles);
;39:#endif
;40:
;41:	le = CG_AllocLocalEntity();
ADDRLP4 108
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 108
INDIRP4
ASGNP4
line 42
;42:	re = &le->refEntity;
ADDRLP4 64
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 44
;43:
;44:	velocity[0] = 0;
ADDRLP4 40
CNSTF4 0
ASGNF4
line 45
;45:	velocity[1] = -50 + 40 * crandom();
ADDRLP4 112
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+4
ADDRLP4 112
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1109393408
MULF4
CNSTF4 3259498496
ADDF4
ASGNF4
line 46
;46:	velocity[2] = 100 + 50 * crandom();
ADDRLP4 116
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+8
ADDRLP4 116
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1112014848
MULF4
CNSTF4 1120403456
ADDF4
ASGNF4
line 48
;47:
;48:	le->leType = LE_FRAGMENT;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 3
ASGNI4
line 49
;49:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+234764
INDIRI4
ASGNI4
line 50
;50:	le->endTime = le->startTime + cg_brassTime.integer + ( cg_brassTime.integer / 4 ) * random();
ADDRLP4 120
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ADDRGP4 cg_brassTime+12
INDIRI4
ADDI4
CVIF4 4
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 4
DIVI4
CVIF4 4
ADDRLP4 120
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 52
;51:
;52:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 53
;53:	le->pos.trTime = cg.time - (rand()&15);
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+234764
INDIRI4
ADDRLP4 128
INDIRI4
CNSTI4 15
BANDI4
SUBI4
ASGNI4
line 55
;54:
;55:	AnglesToAxis( rightAngles, v );
ADDRLP4 96
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 57
;56:
;57:	offset[0] = 8;
ADDRLP4 52
CNSTF4 1090519040
ASGNF4
line 58
;58:	offset[1] = -4;
ADDRLP4 52+4
CNSTF4 3229614080
ASGNF4
line 59
;59:	offset[2] = 24;
ADDRLP4 52+8
CNSTF4 1103101952
ASGNF4
line 61
;60:
;61:	xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
ADDRLP4 80
ADDRLP4 52
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 62
;62:	xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
ADDRLP4 80+4
ADDRLP4 52
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 63
;63:	xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
ADDRLP4 80+8
ADDRLP4 52
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 64
;64:	VectorAdd( cent->lerpOrigin, xoffset, re->origin );
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 1212
ADDP4
INDIRF4
ADDRLP4 80
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 72
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 1216
ADDP4
INDIRF4
ADDRLP4 80+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 76
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 1220
ADDP4
INDIRF4
ADDRLP4 80+8
INDIRF4
ADDF4
ASGNF4
line 66
;65:
;66:	VectorCopy( re->origin, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 68
;67:
;68:	if ( CG_PointContents( re->origin, -1 ) & CONTENTS_WATER ) {
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 132
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 132
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $121
line 69
;69:		waterScale = 0.10f;
ADDRLP4 92
CNSTF4 1036831949
ASGNF4
line 70
;70:	}
LABELV $121
line 72
;71:
;72:	xvelocity[0] = velocity[0] * v[0][0] + velocity[1] * v[1][0] + velocity[2] * v[2][0];
ADDRLP4 68
ADDRLP4 40
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 73
;73:	xvelocity[1] = velocity[0] * v[0][1] + velocity[1] * v[1][1] + velocity[2] * v[2][1];
ADDRLP4 68+4
ADDRLP4 40
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 74
;74:	xvelocity[2] = velocity[0] * v[0][2] + velocity[1] * v[1][2] + velocity[2] * v[2][2];
ADDRLP4 68+8
ADDRLP4 40
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 75
;75:	VectorScale( xvelocity, waterScale, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 68
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 68+4
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 68+8
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
line 77
;76:
;77:	AxisCopy( axisDefault, re->axis );
ADDRGP4 axisDefault
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 78
;78:	re->hModel = cgs.media.machinegunBrassModel;
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cgs+150560+180
INDIRI4
ASGNI4
line 80
;79:
;80:	le->bounceFactor = 0.4 * waterScale;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
ADDRLP4 92
INDIRF4
CNSTF4 1053609165
MULF4
ASGNF4
line 82
;81:
;82:	le->angles.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 2
ASGNI4
line 83
;83:	le->angles.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRGP4 cg+234764
INDIRI4
ASGNI4
line 84
;84:	le->angles.trBase[0] = rand()&31;
ADDRLP4 136
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 136
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 85
;85:	le->angles.trBase[1] = rand()&31;
ADDRLP4 140
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 140
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 86
;86:	le->angles.trBase[2] = rand()&31;
ADDRLP4 144
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 144
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 87
;87:	le->angles.trDelta[0] = 2;
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1073741824
ASGNF4
line 88
;88:	le->angles.trDelta[1] = 1;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1065353216
ASGNF4
line 89
;89:	le->angles.trDelta[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 0
ASGNF4
line 91
;90:
;91:	le->leFlags = LEF_TUMBLE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 92
;92:	le->leBounceSoundType = LEBS_BRASS;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 2
ASGNI4
line 93
;93:	le->leMarkType = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 94
;94:}
LABELV $87
endproc CG_MachineGunEjectBrass 148 12
proc CG_ShotgunEjectBrass 148 12
line 101
;95:
;96:/*
;97:==========================
;98:CG_ShotgunEjectBrass
;99:==========================
;100:*/
;101:static void CG_ShotgunEjectBrass( centity_t *cent ) {
line 109
;102:	localEntity_t	*le;
;103:	refEntity_t		*re;
;104:	vec3_t			velocity, xvelocity;
;105:	vec3_t			offset, xoffset;
;106:	vec3_t			v[3], angles;
;107:	int				i;
;108:
;109:	if ( cg_brassTime.integer <= 0 ) {
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 0
GTI4 $149
line 110
;110:		return;
ADDRGP4 $148
JUMPV
LABELV $149
line 113
;111:	}
;112:
;113:	for ( i = 0; i < 2; i++ ) {
ADDRLP4 92
CNSTI4 0
ASGNI4
LABELV $152
line 114
;114:		float	waterScale = 1.0f;
ADDRLP4 108
CNSTF4 1065353216
ASGNF4
line 116
;115:
;116:		le = CG_AllocLocalEntity();
ADDRLP4 112
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 112
INDIRP4
ASGNP4
line 117
;117:		re = &le->refEntity;
ADDRLP4 64
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 119
;118:
;119:		velocity[0] = 60 + 60 * crandom();
ADDRLP4 116
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 116
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1114636288
MULF4
CNSTF4 1114636288
ADDF4
ASGNF4
line 120
;120:		if ( i == 0 ) {
ADDRLP4 92
INDIRI4
CNSTI4 0
NEI4 $156
line 121
;121:			velocity[1] = 40 + 10 * crandom();
ADDRLP4 120
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+4
ADDRLP4 120
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1092616192
MULF4
CNSTF4 1109393408
ADDF4
ASGNF4
line 122
;122:		} else {
ADDRGP4 $157
JUMPV
LABELV $156
line 123
;123:			velocity[1] = -40 + 10 * crandom();
ADDRLP4 120
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+4
ADDRLP4 120
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1092616192
MULF4
CNSTF4 3256877056
ADDF4
ASGNF4
line 124
;124:		}
LABELV $157
line 125
;125:		velocity[2] = 100 + 50 * crandom();
ADDRLP4 120
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+8
ADDRLP4 120
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1112014848
MULF4
CNSTF4 1120403456
ADDF4
ASGNF4
line 127
;126:
;127:		le->leType = LE_FRAGMENT;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 3
ASGNI4
line 128
;128:		le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+234764
INDIRI4
ASGNI4
line 129
;129:		le->endTime = le->startTime + cg_brassTime.integer*3 + cg_brassTime.integer * random();
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 3
MULI4
ADDI4
CVIF4 4
ADDRGP4 cg_brassTime+12
INDIRI4
CVIF4 4
ADDRLP4 124
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 131
;130:
;131:		le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 132
;132:		le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+234764
INDIRI4
ASGNI4
line 135
;133:
;134:#ifdef USE_VR
;135:		VR_get_cent_controller_angles( cent, angles, SideRIGHT );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 96
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 VR_get_cent_controller_angles
CALLV
pop
line 140
;136:#else
;137:		VectorCopy(cent->lerpAngles, angles);
;138:#endif
;139:
;140:		AnglesToAxis(angles, v);
ADDRLP4 96
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 142
;141:
;142:		offset[0] = 8;
ADDRLP4 52
CNSTF4 1090519040
ASGNF4
line 143
;143:		offset[1] = 0;
ADDRLP4 52+4
CNSTF4 0
ASGNF4
line 144
;144:		offset[2] = 24;
ADDRLP4 52+8
CNSTF4 1103101952
ASGNF4
line 146
;145:
;146:		xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
ADDRLP4 80
ADDRLP4 52
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 147
;147:		xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
ADDRLP4 80+4
ADDRLP4 52
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 148
;148:		xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
ADDRLP4 80+8
ADDRLP4 52
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 149
;149:		VectorAdd( cent->lerpOrigin, xoffset, re->origin );
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 1212
ADDP4
INDIRF4
ADDRLP4 80
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 72
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 1216
ADDP4
INDIRF4
ADDRLP4 80+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 76
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 1220
ADDP4
INDIRF4
ADDRLP4 80+8
INDIRF4
ADDF4
ASGNF4
line 150
;150:		VectorCopy( re->origin, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 151
;151:		if ( CG_PointContents( re->origin, -1 ) & CONTENTS_WATER ) {
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 132
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 132
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $189
line 152
;152:			waterScale = 0.10f;
ADDRLP4 108
CNSTF4 1036831949
ASGNF4
line 153
;153:		}
LABELV $189
line 155
;154:
;155:		xvelocity[0] = velocity[0] * v[0][0] + velocity[1] * v[1][0] + velocity[2] * v[2][0];
ADDRLP4 68
ADDRLP4 40
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 156
;156:		xvelocity[1] = velocity[0] * v[0][1] + velocity[1] * v[1][1] + velocity[2] * v[2][1];
ADDRLP4 68+4
ADDRLP4 40
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 157
;157:		xvelocity[2] = velocity[0] * v[0][2] + velocity[1] * v[1][2] + velocity[2] * v[2][2];
ADDRLP4 68+8
ADDRLP4 40
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 158
;158:		VectorScale( xvelocity, waterScale, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 68
INDIRF4
ADDRLP4 108
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 68+4
INDIRF4
ADDRLP4 108
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 68+8
INDIRF4
ADDRLP4 108
INDIRF4
MULF4
ASGNF4
line 160
;159:
;160:		AxisCopy( axisDefault, re->axis );
ADDRGP4 axisDefault
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 161
;161:		re->hModel = cgs.media.shotgunBrassModel;
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cgs+150560+184
INDIRI4
ASGNI4
line 162
;162:		le->bounceFactor = 0.3f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1050253722
ASGNF4
line 164
;163:
;164:		le->angles.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 2
ASGNI4
line 165
;165:		le->angles.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRGP4 cg+234764
INDIRI4
ASGNI4
line 166
;166:		le->angles.trBase[0] = rand()&31;
ADDRLP4 136
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 136
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 167
;167:		le->angles.trBase[1] = rand()&31;
ADDRLP4 140
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 140
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 168
;168:		le->angles.trBase[2] = rand()&31;
ADDRLP4 144
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 144
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 169
;169:		le->angles.trDelta[0] = 1;
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1065353216
ASGNF4
line 170
;170:		le->angles.trDelta[1] = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1056964608
ASGNF4
line 171
;171:		le->angles.trDelta[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 0
ASGNF4
line 173
;172:
;173:		le->leFlags = LEF_TUMBLE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 174
;174:		le->leBounceSoundType = LEBS_BRASS;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 2
ASGNI4
line 175
;175:		le->leMarkType = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 176
;176:	}
LABELV $153
line 113
ADDRLP4 92
ADDRLP4 92
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 2
LTI4 $152
line 177
;177:}
LABELV $148
endproc CG_ShotgunEjectBrass 148 12
export CG_LaserSight
proc CG_LaserSight 144 12
line 228
;178:
;179:
;180:#ifdef MISSIONPACK
;181:/*
;182:==========================
;183:CG_NailgunEjectBrass
;184:==========================
;185:*/
;186:static void CG_NailgunEjectBrass( centity_t *cent ) {
;187:	localEntity_t	*smoke;
;188:	vec3_t			origin;
;189:	vec3_t			v[3];
;190:	vec3_t			offset;
;191:	vec3_t			xoffset;
;192:	vec3_t			up;
;193:	vec3_t			angles;
;194:
;195:	//AnglesToAxis( cent->lerpAngles, v ); // ori q3e
;196:	//GUNNM TODO : if player is not the client
;197:#ifdef USE_VR
;198:	VR_get_cent_controller_angles( cent, angles, SideRIGHT );
;199:#else
;200:	VectorCopy( cent->lerpAngles, angles );
;201:#endif
;202:
;203:	AnglesToAxis(angles, v);
;204:
;205:	offset[0] = 0;
;206:	offset[1] = -12;
;207:	offset[2] = 24;
;208:
;209:	xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
;210:	xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
;211:	xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
;212:	VectorAdd( cent->lerpOrigin, xoffset, origin );
;213:
;214:	VectorSet( up, 0, 0, 64 );
;215:
;216:	smoke = CG_SmokePuff( origin, up, 32, 1, 1, 1, 0.33f, 700, cg.time, 0, 0, cgs.media.smokePuffShader );
;217:	// use the optimized local entity add
;218:	smoke->leType = LE_SCALE_FADE;
;219:}
;220:#endif
;221:
;222:#ifdef USE_LASER_SIGHT
;223:/*
;224:==========================
;225:CG_LaserSight
;226:==========================
;227:*/
;228:void CG_LaserSight(vec3_t start, vec3_t end, byte colour[4], float width) {
line 230
;229:	refEntity_t     re;
;230:	memset(&re, 0, sizeof(re));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 233
;231:
;232:	//Ensure shader is loaded
;233:	cgs.media.railCoreShader = trap_R_RegisterShader("railCore");
ADDRGP4 $219
ARGP4
ADDRLP4 140
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+150560+192
ADDRLP4 140
INDIRI4
ASGNI4
line 235
;234:
;235:	re.customShader = cgs.media.laserBeamShader;
ADDRLP4 0+112
ADDRGP4 cgs+150560+332
INDIRI4
ASGNI4
line 237
;236:
;237:	re.reType = RT_LASERSIGHT;
ADDRLP4 0
CNSTI4 11
ASGNI4
line 239
;238:
;239:	VectorCopy(start, re.origin);
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 240
;240:	VectorCopy(end, re.oldorigin);
ADDRLP4 0+84
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 243
;241:
;242:	//radius is used to store width info
;243:	re.radius = width;
ADDRLP4 0+132
ADDRFP4 12
INDIRF4
ASGNF4
line 245
;244:
;245:	AxisClear(re.axis);
ADDRLP4 0+28
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 247
;246:
;247:	re.shaderRGBA[0] = colour[0];
ADDRLP4 0+116
ADDRFP4 8
INDIRP4
INDIRU1
ASGNU1
line 248
;248:	re.shaderRGBA[1] = colour[1];
ADDRLP4 0+116+1
ADDRFP4 8
INDIRP4
CNSTI4 1
ADDP4
INDIRU1
ASGNU1
line 249
;249:	re.shaderRGBA[2] = colour[2];
ADDRLP4 0+116+2
ADDRFP4 8
INDIRP4
CNSTI4 2
ADDP4
INDIRU1
ASGNU1
line 250
;250:	re.shaderRGBA[3] = colour[3];
ADDRLP4 0+116+3
ADDRFP4 8
INDIRP4
CNSTI4 3
ADDP4
INDIRU1
ASGNU1
line 252
;251:
;252:	trap_R_AddRefEntityToScene(&re);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 253
;253:}
LABELV $216
endproc CG_LaserSight 144 12
export CG_RailTrail
proc CG_RailTrail 608 16
line 262
;254:#endif
;255:/*
;256:==========================
;257:CG_RailTrail
;258:==========================
;259:*/
;260:#define NUM_PARTICLE_PER_ROTATION   36 //18 in IoQuest3
;261:
;262:void CG_RailTrail( const clientInfo_t *ci, const vec3_t start, const vec3_t end ) {
line 274
;263:	vec3_t axis[NUM_PARTICLE_PER_ROTATION], move, move2, vec, temp;
;264:	float  len;
;265:	int    i, j, skip;
;266: 
;267:	localEntity_t *le;
;268:	refEntity_t   *re;
;269: 
;270:	#define RADIUS   4
;271:	#define ROTATION 1
;272:	#define SPACING  5
;273: 
;274:	le = CG_AllocLocalEntity();
ADDRLP4 504
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 504
INDIRP4
ASGNP4
line 275
;275:	re = &le->refEntity;
ADDRLP4 24
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 277
;276: 
;277:	le->leType = LE_FADE_RGB;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 6
ASGNI4
line 278
;278:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+234764
INDIRI4
ASGNI4
line 279
;279:	le->endTime = cg.time + cg_railTrailTime.value;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+234764
INDIRI4
CVIF4 4
ADDRGP4 cg_railTrailTime+8
INDIRF4
ADDF4
CVFI4 4
ASGNI4
line 280
;280:	le->lifeRate = 1.0 / (le->endTime - le->startTime);
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 282
;281: 
;282:	if ( intShaderTime )
ADDRGP4 intShaderTime
INDIRI4
CNSTI4 0
EQI4 $238
line 283
;283:		re->u.intShaderTime = cg.time;
ADDRLP4 24
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+234764
INDIRI4
ASGNI4
ADDRGP4 $239
JUMPV
LABELV $238
line 285
;284:	else
;285:		re->u.shaderTime = cg.time / 1000.0f;
ADDRLP4 24
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+234764
INDIRI4
CVIF4 4
CNSTF4 981668463
MULF4
ASGNF4
LABELV $239
line 287
;286:
;287:	re->reType = RT_RAIL_CORE;
ADDRLP4 24
INDIRP4
CNSTI4 4
ASGNI4
line 288
;288:	re->customShader = cgs.media.railCoreShader;
ADDRLP4 24
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+150560+192
INDIRI4
ASGNI4
line 290
;289: 
;290:	VectorCopy(start, re->origin);
ADDRLP4 24
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 291
;291:	VectorCopy(end, re->oldorigin);
ADDRLP4 24
INDIRP4
CNSTI4 84
ADDP4
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 293
;292: 
;293:	re->shaderRGBA[0] = ci->color1[0] * 255;
ADDRLP4 516
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 520
CNSTF4 1325400064
ASGNF4
ADDRLP4 516
INDIRF4
ADDRLP4 520
INDIRF4
LTF4 $245
ADDRLP4 512
ADDRLP4 516
INDIRF4
ADDRLP4 520
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $246
JUMPV
LABELV $245
ADDRLP4 512
ADDRLP4 516
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $246
ADDRLP4 24
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 512
INDIRU4
CVUU1 4
ASGNU1
line 294
;294:	re->shaderRGBA[1] = ci->color1[1] * 255;
ADDRLP4 528
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 532
CNSTF4 1325400064
ASGNF4
ADDRLP4 528
INDIRF4
ADDRLP4 532
INDIRF4
LTF4 $248
ADDRLP4 524
ADDRLP4 528
INDIRF4
ADDRLP4 532
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $249
JUMPV
LABELV $248
ADDRLP4 524
ADDRLP4 528
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $249
ADDRLP4 24
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 524
INDIRU4
CVUU1 4
ASGNU1
line 295
;295:	re->shaderRGBA[2] = ci->color1[2] * 255;
ADDRLP4 540
ADDRFP4 0
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 544
CNSTF4 1325400064
ASGNF4
ADDRLP4 540
INDIRF4
ADDRLP4 544
INDIRF4
LTF4 $251
ADDRLP4 536
ADDRLP4 540
INDIRF4
ADDRLP4 544
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $252
JUMPV
LABELV $251
ADDRLP4 536
ADDRLP4 540
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $252
ADDRLP4 24
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 536
INDIRU4
CVUU1 4
ASGNU1
line 296
;296:	re->shaderRGBA[3] = 255;
ADDRLP4 24
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 298
;297:
;298:	le->color[0] = ci->color1[0] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 299
;299:	le->color[1] = ci->color1[1] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 300
;300:	le->color[2] = ci->color1[2] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 301
;301:	le->color[3] = 1.0f;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1065353216
ASGNF4
line 303
;302:
;303:	AxisClear( re->axis );
ADDRLP4 24
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 305
;304: 
;305:	if ( cg_oldRail.integer != 0 ) {
ADDRGP4 cg_oldRail+12
INDIRI4
CNSTI4 0
EQI4 $253
line 309
;306:		// nudge down a bit so it isn't exactly in center
;307:		//re->origin[2] -= 8;
;308:		//re->oldorigin[2] -= 8;
;309:		return;
ADDRGP4 $234
JUMPV
LABELV $253
line 313
;310:	}
;311:
;312:	//start[2] -= 4;
;313:	VectorCopy( start, move );
ADDRLP4 8
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 314
;314:	VectorSubtract( end, start, vec );
ADDRLP4 548
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 552
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
ADDRLP4 548
INDIRP4
INDIRF4
ADDRLP4 552
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 28+4
ADDRLP4 548
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 552
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 28+8
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 315
;315:	len = VectorNormalize( vec );
ADDRLP4 28
ARGP4
ADDRLP4 556
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 500
ADDRLP4 556
INDIRF4
ASGNF4
line 316
;316:	PerpendicularVector( temp, vec );
ADDRLP4 488
ARGP4
ADDRLP4 28
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 318
;317:
;318:	for ( i = 0 ; i < NUM_PARTICLE_PER_ROTATION; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $258
line 319
;319:		RotatePointAroundVector( axis[i], vec, temp, i * 10 ); //banshee 2.4 was 10
ADDRLP4 4
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40
ADDP4
ARGP4
ADDRLP4 28
ARGP4
ADDRLP4 488
ARGP4
ADDRLP4 4
INDIRI4
CNSTI4 10
MULI4
CVIF4 4
ARGF4
ADDRGP4 RotatePointAroundVector
CALLV
pop
line 320
;320:	}
LABELV $259
line 318
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 36
LTI4 $258
line 322
;321:
;322:	VectorMA( move, 20, vec, move );
ADDRLP4 8
ADDRLP4 8
INDIRF4
ADDRLP4 28
INDIRF4
CNSTF4 1101004800
MULF4
ADDF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 8+4
INDIRF4
ADDRLP4 28+4
INDIRF4
CNSTF4 1101004800
MULF4
ADDF4
ASGNF4
ADDRLP4 8+8
ADDRLP4 8+8
INDIRF4
ADDRLP4 28+8
INDIRF4
CNSTF4 1101004800
MULF4
ADDF4
ASGNF4
line 323
;323:	VectorScale( vec, SPACING, vec );
ADDRLP4 28
ADDRLP4 28
INDIRF4
CNSTF4 1084227584
MULF4
ASGNF4
ADDRLP4 28+4
ADDRLP4 28+4
INDIRF4
CNSTF4 1084227584
MULF4
ASGNF4
ADDRLP4 28+8
ADDRLP4 28+8
INDIRF4
CNSTF4 1084227584
MULF4
ASGNF4
line 325
;324:
;325:	skip = -1;
ADDRLP4 484
CNSTI4 -1
ASGNI4
line 327
;326: 
;327:	j = 18;
ADDRLP4 20
CNSTI4 18
ASGNI4
line 328
;328:	for ( i = 0; i < len; i += SPACING ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $275
JUMPV
LABELV $272
line 329
;329:		if ( i != skip ) {
ADDRLP4 4
INDIRI4
ADDRLP4 484
INDIRI4
EQI4 $276
line 330
;330:			skip = i + SPACING;
ADDRLP4 484
ADDRLP4 4
INDIRI4
CNSTI4 5
ADDI4
ASGNI4
line 331
;331:			le = CG_AllocLocalEntity();
ADDRLP4 560
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 560
INDIRP4
ASGNP4
line 332
;332:			re = &le->refEntity;
ADDRLP4 24
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 333
;333:			le->leFlags = LEF_PUFF_DONT_SCALE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 1
ASGNI4
line 334
;334:			le->leType = LE_MOVE_SCALE_FADE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 4
ASGNI4
line 335
;335:			le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+234764
INDIRI4
ASGNI4
line 336
;336:			le->endTime = cg.time + (i>>1) + 600;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+234764
INDIRI4
ADDRLP4 4
INDIRI4
CNSTI4 1
RSHI4
ADDI4
CNSTI4 600
ADDI4
ASGNI4
line 337
;337:			le->lifeRate = 1.0 / (le->endTime - le->startTime);
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 339
;338:
;339:			if ( intShaderTime )
ADDRGP4 intShaderTime
INDIRI4
CNSTI4 0
EQI4 $280
line 340
;340:				re->u.intShaderTime = cg.time;
ADDRLP4 24
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+234764
INDIRI4
ASGNI4
ADDRGP4 $281
JUMPV
LABELV $280
line 342
;341:			else
;342:				re->u.shaderTime = cg.time / 1000.0f;
ADDRLP4 24
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+234764
INDIRI4
CVIF4 4
CNSTF4 981668463
MULF4
ASGNF4
LABELV $281
line 344
;343:
;344:			re->reType = RT_SPRITE;
ADDRLP4 24
INDIRP4
CNSTI4 2
ASGNI4
line 345
;345:			re->radius = 1.1f;
ADDRLP4 24
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1066192077
ASGNF4
line 346
;346:			re->customShader = cgs.media.railRingsShader;
ADDRLP4 24
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+150560+188
INDIRI4
ASGNI4
line 348
;347:
;348:			re->shaderRGBA[0] = ci->color2[0] * 255;
ADDRLP4 572
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 576
CNSTF4 1325400064
ASGNF4
ADDRLP4 572
INDIRF4
ADDRLP4 576
INDIRF4
LTF4 $287
ADDRLP4 568
ADDRLP4 572
INDIRF4
ADDRLP4 576
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $288
JUMPV
LABELV $287
ADDRLP4 568
ADDRLP4 572
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $288
ADDRLP4 24
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 568
INDIRU4
CVUU1 4
ASGNU1
line 349
;349:			re->shaderRGBA[1] = ci->color2[1] * 255;
ADDRLP4 584
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 588
CNSTF4 1325400064
ASGNF4
ADDRLP4 584
INDIRF4
ADDRLP4 588
INDIRF4
LTF4 $290
ADDRLP4 580
ADDRLP4 584
INDIRF4
ADDRLP4 588
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $291
JUMPV
LABELV $290
ADDRLP4 580
ADDRLP4 584
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $291
ADDRLP4 24
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 580
INDIRU4
CVUU1 4
ASGNU1
line 350
;350:			re->shaderRGBA[2] = ci->color2[2] * 255;
ADDRLP4 596
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 600
CNSTF4 1325400064
ASGNF4
ADDRLP4 596
INDIRF4
ADDRLP4 600
INDIRF4
LTF4 $293
ADDRLP4 592
ADDRLP4 596
INDIRF4
ADDRLP4 600
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $294
JUMPV
LABELV $293
ADDRLP4 592
ADDRLP4 596
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $294
ADDRLP4 24
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 592
INDIRU4
CVUU1 4
ASGNU1
line 351
;351:			re->shaderRGBA[3] = 255;
ADDRLP4 24
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 353
;352:
;353:			le->color[0] = ci->color2[0] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 354
;354:			le->color[1] = ci->color2[1] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 355
;355:			le->color[2] = ci->color2[2] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 356
;356:			le->color[3] = 1.0f;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1065353216
ASGNF4
line 358
;357:
;358:			le->pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 2
ASGNI4
line 359
;359:			le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+234764
INDIRI4
ASGNI4
line 361
;360:
;361:			VectorCopy( move, move2 );
ADDRLP4 472
ADDRLP4 8
INDIRB
ASGNB 12
line 362
;362:			VectorMA( move2, RADIUS , axis[j], move2 );
ADDRLP4 472
ADDRLP4 472
INDIRF4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40
ADDP4
INDIRF4
CNSTF4 1082130432
MULF4
ADDF4
ASGNF4
ADDRLP4 472+4
ADDRLP4 472+4
INDIRF4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40+4
ADDP4
INDIRF4
CNSTF4 1082130432
MULF4
ADDF4
ASGNF4
ADDRLP4 472+8
ADDRLP4 472+8
INDIRF4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40+8
ADDP4
INDIRF4
CNSTF4 1082130432
MULF4
ADDF4
ASGNF4
line 363
;363:			VectorCopy( move2, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 472
INDIRB
ASGNB 12
line 365
;364:
;365:			le->pos.trDelta[0] = axis[j][0]*6;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40
ADDP4
INDIRF4
CNSTF4 1086324736
MULF4
ASGNF4
line 366
;366:			le->pos.trDelta[1] = axis[j][1]*6;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40+4
ADDP4
INDIRF4
CNSTF4 1086324736
MULF4
ASGNF4
line 367
;367:			le->pos.trDelta[2] = axis[j][2]*6;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40+8
ADDP4
INDIRF4
CNSTF4 1086324736
MULF4
ASGNF4
line 368
;368:		}
LABELV $276
line 370
;369:
;370:		VectorAdd( move, vec, move );
ADDRLP4 8
ADDRLP4 8
INDIRF4
ADDRLP4 28
INDIRF4
ADDF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 8+4
INDIRF4
ADDRLP4 28+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 8+8
ADDRLP4 8+8
INDIRF4
ADDRLP4 28+8
INDIRF4
ADDF4
ASGNF4
line 372
;371:
;372:		j = j + ROTATION < NUM_PARTICLE_PER_ROTATION ? j + ROTATION : (j + ROTATION) % NUM_PARTICLE_PER_ROTATION;
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
CNSTI4 36
GEI4 $311
ADDRLP4 560
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRGP4 $312
JUMPV
LABELV $311
ADDRLP4 560
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
CNSTI4 36
MODI4
ASGNI4
LABELV $312
ADDRLP4 20
ADDRLP4 560
INDIRI4
ASGNI4
line 373
;373:	}
LABELV $273
line 328
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 5
ADDI4
ASGNI4
LABELV $275
ADDRLP4 4
INDIRI4
CVIF4 4
ADDRLP4 500
INDIRF4
LTF4 $272
line 374
;374:}
LABELV $234
endproc CG_RailTrail 608 16
proc CG_RocketTrail 84 48
line 382
;375:
;376:
;377:/*
;378:==========================
;379:CG_RocketTrail
;380:==========================
;381:*/
;382:static void CG_RocketTrail( centity_t *ent, const weaponInfo_t *wi ) {
line 392
;383:	int		step;
;384:	vec3_t	origin, lastPos;
;385:	int		t;
;386:	int		startTime, contents;
;387:	int		lastContents;
;388:	entityState_t	*es;
;389:	vec3_t	up;
;390:	localEntity_t	*smoke;
;391:
;392:	if ( cg_noProjectileTrail.integer ) {
ADDRGP4 cg_noProjectileTrail+12
INDIRI4
CNSTI4 0
EQI4 $314
line 393
;393:		return;
ADDRGP4 $313
JUMPV
LABELV $314
line 396
;394:	}
;395:
;396:	up[0] = 0;
ADDRLP4 28
CNSTF4 0
ASGNF4
line 397
;397:	up[1] = 0;
ADDRLP4 28+4
CNSTF4 0
ASGNF4
line 398
;398:	up[2] = 0;
ADDRLP4 28+8
CNSTF4 0
ASGNF4
line 400
;399:
;400:	step = 50;
ADDRLP4 20
CNSTI4 50
ASGNI4
line 402
;401:
;402:	es = &ent->currentState;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
line 403
;403:	startTime = ent->trailTime;
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 932
ADDP4
INDIRI4
ASGNI4
line 404
;404:	t = step * ( (startTime + step) / step );
ADDRLP4 0
ADDRLP4 20
INDIRI4
ADDRLP4 56
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ADDRLP4 20
INDIRI4
DIVI4
MULI4
ASGNI4
line 406
;405:
;406:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+234764
INDIRI4
ARGI4
ADDRLP4 44
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 407
;407:	contents = CG_PointContents( origin, -1 );
ADDRLP4 44
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 68
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 68
INDIRI4
ASGNI4
line 410
;408:
;409:	// if object (e.g. grenade) is stationary, don't toss up smoke
;410:	if ( es->pos.trType == TR_STATIONARY ) {
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $320
line 411
;411:		ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 932
ADDP4
ADDRGP4 cg+234764
INDIRI4
ASGNI4
line 412
;412:		return;
ADDRGP4 $313
JUMPV
LABELV $320
line 415
;413:	}
;414:
;415:	BG_EvaluateTrajectory( &es->pos, ent->trailTime, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 932
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 416
;416:	lastContents = CG_PointContents( lastPos, -1 );
ADDRLP4 4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 72
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 72
INDIRI4
ASGNI4
line 418
;417:
;418:	ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 932
ADDP4
ADDRGP4 cg+234764
INDIRI4
ASGNI4
line 420
;419:
;420:	if ( contents & ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) {
ADDRLP4 40
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
EQI4 $331
line 421
;421:		if ( contents & lastContents & CONTENTS_WATER ) {
ADDRLP4 40
INDIRI4
ADDRLP4 60
INDIRI4
BANDI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $313
line 422
;422:			CG_BubbleTrail( lastPos, origin, 8 );
ADDRLP4 4
ARGP4
ADDRLP4 44
ARGP4
CNSTF4 1090519040
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 423
;423:		}
line 424
;424:		return;
ADDRGP4 $313
JUMPV
line 427
;425:	}
;426:
;427:	for ( ; t <= ent->trailTime ; t += step ) {
LABELV $328
line 428
;428:		BG_EvaluateTrajectory( &es->pos, t, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 430
;429:
;430:		smoke = CG_SmokePuff( lastPos, up, 
ADDRLP4 4
ARGP4
ADDRLP4 28
ARGP4
ADDRLP4 76
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1051260355
ARGF4
ADDRLP4 76
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 cgs+150560+276
INDIRI4
ARGI4
ADDRLP4 80
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 80
INDIRP4
ASGNP4
line 439
;431:					  wi->trailRadius, 
;432:					  1.0f, 1.0f, 1.0f, 0.33f,
;433:					  wi->wiTrailTime, 
;434:					  t,
;435:					  0,
;436:					  0, 
;437:					  cgs.media.smokePuffShader );
;438:		// use the optimized local entity add
;439:		smoke->leType = LE_SCALE_FADE;
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 7
ASGNI4
line 440
;440:	}
LABELV $329
line 427
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ASGNI4
LABELV $331
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 932
ADDP4
INDIRI4
LEI4 $328
line 442
;441:
;442:}
LABELV $313
endproc CG_RocketTrail 84 48
proc CG_PlasmaTrail 172 12
line 518
;443:
;444:#ifdef MISSIONPACK
;445:/*
;446:==========================
;447:CG_NailTrail
;448:==========================
;449:*/
;450:static void CG_NailTrail( centity_t *ent, const weaponInfo_t *wi ) {
;451:	int		step;
;452:	vec3_t	origin, lastPos;
;453:	int		t;
;454:	int		startTime, contents;
;455:	int		lastContents;
;456:	entityState_t	*es;
;457:	vec3_t	up;
;458:	localEntity_t	*smoke;
;459:
;460:	if ( cg_noProjectileTrail.integer ) {
;461:		return;
;462:	}
;463:
;464:	up[0] = 0;
;465:	up[1] = 0;
;466:	up[2] = 0;
;467:
;468:	step = 50;
;469:
;470:	es = &ent->currentState;
;471:	startTime = ent->trailTime;
;472:	t = step * ( (startTime + step) / step );
;473:
;474:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
;475:	contents = CG_PointContents( origin, -1 );
;476:
;477:	// if object (e.g. grenade) is stationary, don't toss up smoke
;478:	if ( es->pos.trType == TR_STATIONARY ) {
;479:		ent->trailTime = cg.time;
;480:		return;
;481:	}
;482:
;483:	BG_EvaluateTrajectory( &es->pos, ent->trailTime, lastPos );
;484:	lastContents = CG_PointContents( lastPos, -1 );
;485:
;486:	ent->trailTime = cg.time;
;487:
;488:	if ( contents & ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) {
;489:		if ( contents & lastContents & CONTENTS_WATER ) {
;490:			CG_BubbleTrail( lastPos, origin, 8 );
;491:		}
;492:		return;
;493:	}
;494:
;495:	for ( ; t <= ent->trailTime ; t += step ) {
;496:		BG_EvaluateTrajectory( &es->pos, t, lastPos );
;497:
;498:		smoke = CG_SmokePuff( lastPos, up, 
;499:					  wi->trailRadius, 
;500:					  1, 1, 1, 0.33f,
;501:					  wi->wiTrailTime, 
;502:					  t,
;503:					  0,
;504:					  0, 
;505:					  cgs.media.nailPuffShader );
;506:		// use the optimized local entity add
;507:		smoke->leType = LE_SCALE_FADE;
;508:	}
;509:
;510:}
;511:#endif
;512:
;513:/*
;514:==========================
;515:CG_PlasmaTrail
;516:==========================
;517:*/
;518:static void CG_PlasmaTrail( centity_t *cent, const weaponInfo_t *wi ) {
line 527
;519:	localEntity_t	*le;
;520:	refEntity_t		*re;
;521:	entityState_t	*es;
;522:	vec3_t			velocity, xvelocity, origin;
;523://	vec3_t			offset, xoffset;
;524:	vec3_t			v[3];
;525:	vec3_t			angles;
;526:
;527:	float	waterScale = 1.0f;
ADDRLP4 68
CNSTF4 1065353216
ASGNF4
line 529
;528:
;529:	if ( cg_noProjectileTrail.integer || cg_oldPlasma.integer ) {
ADDRGP4 cg_noProjectileTrail+12
INDIRI4
CNSTI4 0
NEI4 $339
ADDRGP4 cg_oldPlasma+12
INDIRI4
CNSTI4 0
EQI4 $335
LABELV $339
line 530
;530:		return;
ADDRGP4 $334
JUMPV
LABELV $335
line 533
;531:	}
;532:
;533:	es = &cent->currentState;
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
line 535
;534:
;535:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 72
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+234764
INDIRI4
ARGI4
ADDRLP4 76
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 537
;536:
;537:	le = CG_AllocLocalEntity();
ADDRLP4 100
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 100
INDIRP4
ASGNP4
line 538
;538:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 540
;539:
;540:	velocity[0] = 60 - 120 * crandom();
ADDRLP4 104
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 8
CNSTF4 1114636288
ADDRLP4 104
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1123024896
MULF4
SUBF4
ASGNF4
line 541
;541:	velocity[1] = 40 - 80 * crandom();
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 8+4
CNSTF4 1109393408
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1117782016
MULF4
SUBF4
ASGNF4
line 542
;542:	velocity[2] = 100 - 200 * crandom();
ADDRLP4 112
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 8+8
CNSTF4 1120403456
ADDRLP4 112
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1128792064
MULF4
SUBF4
ASGNF4
line 544
;543:
;544:	le->leType = LE_MOVE_SCALE_FADE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 4
ASGNI4
line 545
;545:	le->leFlags = LEF_TUMBLE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 546
;546:	le->leBounceSoundType = LEBS_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 0
ASGNI4
line 547
;547:	le->leMarkType = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 549
;548:
;549:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+234764
INDIRI4
ASGNI4
line 550
;550:	le->endTime = le->startTime + 600;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 600
ADDI4
ASGNI4
line 552
;551:
;552:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 553
;553:	le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+234764
INDIRI4
ASGNI4
line 557
;554:
;555:	//--------------------------------------------------------
;556:#ifdef USE_VR
;557:	VR_get_cent_controller_angles( cent, angles, SideRIGHT );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 88
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 VR_get_cent_controller_angles
CALLV
pop
line 558
;558:	AnglesToAxis(cent->lerpAngles, v);
ADDRFP4 0
INDIRP4
CNSTI4 1224
ADDP4
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 574
;559:#else
;560:	VectorCopy(cent->lerpAngles, angles);
;561:	AnglesToAxis(cent->lerpAngles, v);
;562:
;563:	offset[0] = 2;
;564:	offset[1] = 2;
;565:	offset[2] = 2;
;566:
;567:	xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
;568:	xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
;569:	xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
;570:
;571:	VectorAdd(origin, xoffset, re->origin);
;572:#endif
;573:
;574:	VectorCopy( re->origin, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 576
;575:
;576:	if ( CG_PointContents( re->origin, -1 ) & CONTENTS_WATER ) {
ADDRLP4 4
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 120
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $345
line 577
;577:		waterScale = 0.10f;
ADDRLP4 68
CNSTF4 1036831949
ASGNF4
line 578
;578:	}
LABELV $345
line 580
;579:
;580:	xvelocity[0] = velocity[0] * v[0][0] + velocity[1] * v[1][0] + velocity[2] * v[2][0];
ADDRLP4 56
ADDRLP4 8
INDIRF4
ADDRLP4 20
INDIRF4
MULF4
ADDRLP4 8+4
INDIRF4
ADDRLP4 20+12
INDIRF4
MULF4
ADDF4
ADDRLP4 8+8
INDIRF4
ADDRLP4 20+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 581
;581:	xvelocity[1] = velocity[0] * v[0][1] + velocity[1] * v[1][1] + velocity[2] * v[2][1];
ADDRLP4 56+4
ADDRLP4 8
INDIRF4
ADDRLP4 20+4
INDIRF4
MULF4
ADDRLP4 8+4
INDIRF4
ADDRLP4 20+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 8+8
INDIRF4
ADDRLP4 20+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 582
;582:	xvelocity[2] = velocity[0] * v[0][2] + velocity[1] * v[1][2] + velocity[2] * v[2][2];
ADDRLP4 56+8
ADDRLP4 8
INDIRF4
ADDRLP4 20+8
INDIRF4
MULF4
ADDRLP4 8+4
INDIRF4
ADDRLP4 20+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 8+8
INDIRF4
ADDRLP4 20+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 583
;583:	VectorScale( xvelocity, waterScale, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 56
INDIRF4
ADDRLP4 68
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 56+4
INDIRF4
ADDRLP4 68
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 56+8
INDIRF4
ADDRLP4 68
INDIRF4
MULF4
ASGNF4
line 585
;584:
;585:	AxisCopy( axisDefault, re->axis );
ADDRGP4 axisDefault
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 587
;586:	
;587:	if ( intShaderTime )
ADDRGP4 intShaderTime
INDIRI4
CNSTI4 0
EQI4 $369
line 588
;588:		re->u.intShaderTime = cg.time;
ADDRLP4 4
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+234764
INDIRI4
ASGNI4
ADDRGP4 $370
JUMPV
LABELV $369
line 590
;589:	else
;590:		re->u.shaderTime = cg.time / 1000.0f;
ADDRLP4 4
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+234764
INDIRI4
CVIF4 4
CNSTF4 981668463
MULF4
ASGNF4
LABELV $370
line 592
;591:
;592:	re->reType = RT_SPRITE;
ADDRLP4 4
INDIRP4
CNSTI4 2
ASGNI4
line 593
;593:	re->radius = 0.25f;
ADDRLP4 4
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1048576000
ASGNF4
line 594
;594:	re->customShader = cgs.media.railRingsShader;
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+150560+188
INDIRI4
ASGNI4
line 595
;595:	le->bounceFactor = 0.3f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1050253722
ASGNF4
line 597
;596:
;597:	re->shaderRGBA[0] = wi->flashDlightColor[0] * 63;
ADDRLP4 128
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
CNSTF4 1115422720
MULF4
ASGNF4
ADDRLP4 132
CNSTF4 1325400064
ASGNF4
ADDRLP4 128
INDIRF4
ADDRLP4 132
INDIRF4
LTF4 $376
ADDRLP4 124
ADDRLP4 128
INDIRF4
ADDRLP4 132
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $377
JUMPV
LABELV $376
ADDRLP4 124
ADDRLP4 128
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $377
ADDRLP4 4
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 124
INDIRU4
CVUU1 4
ASGNU1
line 598
;598:	re->shaderRGBA[1] = wi->flashDlightColor[1] * 63;
ADDRLP4 140
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1115422720
MULF4
ASGNF4
ADDRLP4 144
CNSTF4 1325400064
ASGNF4
ADDRLP4 140
INDIRF4
ADDRLP4 144
INDIRF4
LTF4 $379
ADDRLP4 136
ADDRLP4 140
INDIRF4
ADDRLP4 144
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $380
JUMPV
LABELV $379
ADDRLP4 136
ADDRLP4 140
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $380
ADDRLP4 4
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 136
INDIRU4
CVUU1 4
ASGNU1
line 599
;599:	re->shaderRGBA[2] = wi->flashDlightColor[2] * 63;
ADDRLP4 152
ADDRFP4 4
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1115422720
MULF4
ASGNF4
ADDRLP4 156
CNSTF4 1325400064
ASGNF4
ADDRLP4 152
INDIRF4
ADDRLP4 156
INDIRF4
LTF4 $382
ADDRLP4 148
ADDRLP4 152
INDIRF4
ADDRLP4 156
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $383
JUMPV
LABELV $382
ADDRLP4 148
ADDRLP4 152
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $383
ADDRLP4 4
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 148
INDIRU4
CVUU1 4
ASGNU1
line 600
;600:	re->shaderRGBA[3] = 63;
ADDRLP4 4
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 63
ASGNU1
line 602
;601:
;602:	le->color[0] = wi->flashDlightColor[0] * 0.2;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
CNSTF4 1045220557
MULF4
ASGNF4
line 603
;603:	le->color[1] = wi->flashDlightColor[1] * 0.2;
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1045220557
MULF4
ASGNF4
line 604
;604:	le->color[2] = wi->flashDlightColor[2] * 0.2;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1045220557
MULF4
ASGNF4
line 605
;605:	le->color[3] = 0.25f;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1048576000
ASGNF4
line 607
;606:
;607:	le->angles.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 2
ASGNI4
line 608
;608:	le->angles.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRGP4 cg+234764
INDIRI4
ASGNI4
line 609
;609:	le->angles.trBase[0] = rand()&31;
ADDRLP4 160
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 160
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 610
;610:	le->angles.trBase[1] = rand()&31;
ADDRLP4 164
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 164
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 611
;611:	le->angles.trBase[2] = rand()&31;
ADDRLP4 168
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 168
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 612
;612:	le->angles.trDelta[0] = 1;
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1065353216
ASGNF4
line 613
;613:	le->angles.trDelta[1] = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1056964608
ASGNF4
line 614
;614:	le->angles.trDelta[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 0
ASGNF4
line 615
;615:}
LABELV $334
endproc CG_PlasmaTrail 172 12
export CG_GrappleTrail
proc CG_GrappleTrail 184 16
line 623
;616:
;617:
;618:/*
;619:==========================
;620:CG_GrappleTrail
;621:==========================
;622:*/
;623:void CG_GrappleTrail( centity_t *ent, const weaponInfo_t *wi ) {
line 629
;624:	vec3_t	origin;
;625:	entityState_t	*es;
;626:	vec3_t			forward, up;
;627:	refEntity_t		beam;
;628:
;629:	es = &ent->currentState;
ADDRLP4 152
ADDRFP4 0
INDIRP4
ASGNP4
line 631
;630:
;631:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 152
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+234764
INDIRI4
ARGI4
ADDRLP4 140
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 632
;632:	ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 932
ADDP4
ADDRGP4 cg+234764
INDIRI4
ASGNI4
line 634
;633:
;634:	memset( &beam, 0, sizeof( beam ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 638
;635:	
;636:#ifdef USE_VR_QVM
;637:	// VR client
;638:	if ( cg.vr_controller_type )
ADDRGP4 cg+282972
INDIRI4
CNSTI4 0
EQI4 $388
line 639
;639:	{
line 641
;640:		// adjust muzzle position
;641:		VectorCopy(cg.predictedPlayerState.right_muzzle_position, beam.origin);
ADDRLP4 0+68
ADDRGP4 cg+234796+496
INDIRB
ASGNB 12
line 642
;642:	}
ADDRGP4 $389
JUMPV
LABELV $388
line 646
;643:	else
;644:#endif
;645:	// not VR client
;646:	{
line 648
;647:		//FIXME adjust for muzzle position
;648:		VectorCopy(cg_entities[ent->currentState.otherEntityNum].lerpOrigin, beam.origin);
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
CNSTI4 1236
MULI4
ADDRGP4 cg_entities+1212
ADDP4
INDIRB
ASGNB 12
line 649
;649:		beam.origin[2] += 26;
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
CNSTF4 1104150528
ADDF4
ASGNF4
line 650
;650:		AngleVectors(cg_entities[ent->currentState.otherEntityNum].lerpAngles, forward, NULL, up);
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
CNSTI4 1236
MULI4
ADDRGP4 cg_entities+1224
ADDP4
ARGP4
ADDRLP4 168
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 156
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 651
;651:		VectorMA(beam.origin, -6, up, beam.origin);
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRLP4 156
INDIRF4
CNSTF4 3233808384
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRLP4 156+4
INDIRF4
CNSTF4 3233808384
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRLP4 156+8
INDIRF4
CNSTF4 3233808384
MULF4
ADDF4
ASGNF4
line 652
;652:	}
LABELV $389
line 654
;653:
;654:	VectorCopy( origin, beam.oldorigin );
ADDRLP4 0+84
ADDRLP4 140
INDIRB
ASGNB 12
line 656
;655:
;656:	if (Distance( beam.origin, beam.oldorigin ) < 64 )
ADDRLP4 0+68
ARGP4
ADDRLP4 0+84
ARGP4
ADDRLP4 180
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 180
INDIRF4
CNSTF4 1115684864
GEF4 $412
line 657
;657:		return; // Don't draw if close
ADDRGP4 $385
JUMPV
LABELV $412
line 663
;658:
;659:	//beam.reType = RT_LIGHTNING;
;660:	//beam.customShader = cgs.media.lightningShader;
;661:	
;662:	// quake live grapple rope :
;663:	beam.reType = RT_LASERSIGHT;
ADDRLP4 0
CNSTI4 11
ASGNI4
line 664
;664:	beam.customShader = cgs.media.ropeShader;
ADDRLP4 0+112
ADDRGP4 cgs+150560+336
INDIRI4
ASGNI4
line 666
;665:
;666:	beam.radius = 4;
ADDRLP4 0+132
CNSTF4 1082130432
ASGNF4
line 668
;667:
;668:	AxisClear( beam.axis );
ADDRLP4 0+28
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 669
;669:	beam.shaderRGBA[0] = 0xff;
ADDRLP4 0+116
CNSTU1 255
ASGNU1
line 670
;670:	beam.shaderRGBA[1] = 0xff;
ADDRLP4 0+116+1
CNSTU1 255
ASGNU1
line 671
;671:	beam.shaderRGBA[2] = 0xff;
ADDRLP4 0+116+2
CNSTU1 255
ASGNU1
line 672
;672:	beam.shaderRGBA[3] = 0xff;
ADDRLP4 0+116+3
CNSTU1 255
ASGNU1
line 673
;673:	trap_R_AddRefEntityToScene( &beam );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 674
;674:}
LABELV $385
endproc CG_GrappleTrail 184 16
proc CG_GrenadeTrail 0 8
line 681
;675:
;676:/*
;677:==========================
;678:CG_GrenadeTrail
;679:==========================
;680:*/
;681:static void CG_GrenadeTrail( centity_t *ent, const weaponInfo_t *wi ) {
line 682
;682:	CG_RocketTrail( ent, wi );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_RocketTrail
CALLV
pop
line 683
;683:}
LABELV $428
endproc CG_GrenadeTrail 0 8
export CG_RegisterWeapon
proc CG_RegisterWeapon 312 12
line 693
;684:
;685:
;686:/*
;687:=================
;688:CG_RegisterWeapon
;689:
;690:The server says this item is used on this level
;691:=================
;692:*/
;693:void CG_RegisterWeapon( int weaponNum ) {
line 700
;694:	weaponInfo_t	*weaponInfo;
;695:	gitem_t			*item, *ammo;
;696:	char			path[MAX_QPATH];
;697:	vec3_t			mins, maxs;
;698:	int				i;
;699:
;700:	weaponInfo = &cg_weapons[weaponNum];
ADDRLP4 12
ADDRFP4 0
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 702
;701:
;702:	if ( weaponNum == 0 ) {
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $430
line 703
;703:		return;
ADDRGP4 $429
JUMPV
LABELV $430
line 706
;704:	}
;705:
;706:	if ( weaponInfo->registered ) {
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $432
line 707
;707:		return;
ADDRGP4 $429
JUMPV
LABELV $432
line 710
;708:	}
;709:
;710:	memset( weaponInfo, 0, sizeof( *weaponInfo ) );
ADDRLP4 12
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 136
ARGI4
ADDRGP4 memset
CALLP4
pop
line 711
;711:	weaponInfo->registered = qtrue;
ADDRLP4 12
INDIRP4
CNSTI4 1
ASGNI4
line 713
;712:
;713:	for ( item = bg_itemlist + 1 ; item->classname ; item++ ) {
ADDRLP4 4
ADDRGP4 bg_itemlist+52
ASGNP4
ADDRGP4 $437
JUMPV
LABELV $434
line 714
;714:		if ( item->giType == IT_WEAPON && item->giTag == weaponNum ) {
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 1
NEI4 $439
ADDRLP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ADDRFP4 0
INDIRI4
NEI4 $439
line 715
;715:			weaponInfo->item = item;
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 4
INDIRP4
ASGNP4
line 716
;716:			break;
ADDRGP4 $436
JUMPV
LABELV $439
line 718
;717:		}
;718:	}
LABELV $435
line 713
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ASGNP4
LABELV $437
ADDRLP4 4
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $434
LABELV $436
line 719
;719:	if ( !item->classname ) {
ADDRLP4 4
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $441
line 720
;720:		CG_Error( "Couldn't find weapon %i", weaponNum );
ADDRGP4 $443
ARGP4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 721
;721:	}
LABELV $441
line 722
;722:	CG_RegisterItemVisuals( item - bg_itemlist );
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 52
DIVI4
ARGI4
ADDRGP4 CG_RegisterItemVisuals
CALLV
pop
line 725
;723:
;724:	// load cmodel before model so filecache works
;725:	weaponInfo->weaponModel = trap_R_RegisterModel( item->world_model[0] );
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 104
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 104
INDIRI4
ASGNI4
line 728
;726:
;727:	// calc midpoint for rotation
;728:	trap_R_ModelBounds( weaponInfo->weaponModel, mins, maxs );
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRLP4 16
ARGP4
ADDRLP4 92
ARGP4
ADDRGP4 trap_R_ModelBounds
CALLV
pop
line 729
;729:	for ( i = 0 ; i < 3 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $444
line 730
;730:		weaponInfo->weaponMidpoint[i] = mins[i] + 0.5 * ( maxs[i] - mins[i] );
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 12
INDIRP4
CNSTI4 24
ADDP4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 16
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 92
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 16
ADDP4
INDIRF4
SUBF4
CNSTF4 1056964608
MULF4
ADDF4
ASGNF4
line 731
;731:	}
LABELV $445
line 729
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $444
line 733
;732:
;733:	weaponInfo->weaponIcon = trap_R_RegisterShader( item->icon );
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 108
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 108
INDIRI4
ASGNI4
line 734
;734:	weaponInfo->ammoIcon = trap_R_RegisterShader( item->icon );
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 112
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 112
INDIRI4
ASGNI4
line 736
;735:
;736:	for ( ammo = bg_itemlist + 1 ; ammo->classname ; ammo++ ) {
ADDRLP4 8
ADDRGP4 bg_itemlist+52
ASGNP4
ADDRGP4 $451
JUMPV
LABELV $448
line 737
;737:		if ( ammo->giType == IT_AMMO && ammo->giTag == weaponNum ) {
ADDRLP4 8
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 2
NEI4 $453
ADDRLP4 8
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ADDRFP4 0
INDIRI4
NEI4 $453
line 738
;738:			break;
ADDRGP4 $450
JUMPV
LABELV $453
line 740
;739:		}
;740:	}
LABELV $449
line 736
ADDRLP4 8
ADDRLP4 8
INDIRP4
CNSTI4 52
ADDP4
ASGNP4
LABELV $451
ADDRLP4 8
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $448
LABELV $450
line 741
;741:	if ( ammo->classname && ammo->world_model[0] ) {
ADDRLP4 8
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $455
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $455
line 742
;742:		weaponInfo->ammoModel = trap_R_RegisterModel( ammo->world_model[0] );
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 120
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 120
INDIRI4
ASGNI4
line 743
;743:	}
LABELV $455
line 745
;744:
;745:	COM_StripExtension( item->world_model[0], path, sizeof(path) );
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 746
;746:	Q_strcat( path, sizeof(path), "_flash.md3" );
ADDRLP4 28
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $457
ARGP4
ADDRGP4 Q_strcat
CALLV
pop
line 747
;747:	weaponInfo->flashModel = trap_R_RegisterModel( path );
ADDRLP4 28
ARGP4
ADDRLP4 120
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 120
INDIRI4
ASGNI4
line 749
;748:
;749:	COM_StripExtension( item->world_model[0], path, sizeof(path) );
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 750
;750:	Q_strcat( path, sizeof(path), "_barrel.md3" );
ADDRLP4 28
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $458
ARGP4
ADDRGP4 Q_strcat
CALLV
pop
line 751
;751:	weaponInfo->barrelModel = trap_R_RegisterModel( path );
ADDRLP4 28
ARGP4
ADDRLP4 124
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 124
INDIRI4
ASGNI4
line 753
;752:
;753:	COM_StripExtension( item->world_model[0], path, sizeof(path) );
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 754
;754:	Q_strcat( path, sizeof(path), "_hand.md3" );
ADDRLP4 28
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $459
ARGP4
ADDRGP4 Q_strcat
CALLV
pop
line 755
;755:	weaponInfo->handsModel = trap_R_RegisterModel( path );
ADDRLP4 28
ARGP4
ADDRLP4 128
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 128
INDIRI4
ASGNI4
line 757
;756:
;757:	if ( !weaponInfo->handsModel ) {
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 0
NEI4 $460
line 758
;758:		weaponInfo->handsModel = trap_R_RegisterModel( "models/weapons2/shotgun/shotgun_hand.md3" );
ADDRGP4 $462
ARGP4
ADDRLP4 132
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 132
INDIRI4
ASGNI4
line 759
;759:	}
LABELV $460
line 761
;760:
;761:	weaponInfo->loopFireSound = qfalse;
ADDRLP4 12
INDIRP4
CNSTI4 132
ADDP4
CNSTI4 0
ASGNI4
line 763
;762:#ifdef USE_LASER_SIGHT
;763:	cgs.media.laserBeamShader = trap_R_RegisterShader( "laserbeam" );//TODO find me a better place
ADDRGP4 $465
ARGP4
ADDRLP4 132
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+150560+332
ADDRLP4 132
INDIRI4
ASGNI4
line 765
;764:#endif
;765:	switch ( weaponNum ) {
ADDRLP4 136
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 136
INDIRI4
CNSTI4 1
LTI4 $466
ADDRLP4 136
INDIRI4
CNSTI4 10
GTI4 $466
ADDRLP4 136
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $551-4
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $551
address $468
address $502
address $510
address $519
address $512
address $471
address $534
address $525
address $544
address $496
code
LABELV $468
line 767
;766:	case WP_GAUNTLET:
;767:		MAKERGB( weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 768
;768:		weaponInfo->firingSound = trap_S_RegisterSound( "sound/weapons/melee/fstrun.wav", qfalse );
ADDRGP4 $469
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 140
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 140
INDIRI4
ASGNI4
line 769
;769:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/melee/fstatck.wav", qfalse );
ADDRGP4 $470
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 144
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 144
INDIRI4
ASGNI4
line 770
;770:		break;
ADDRGP4 $467
JUMPV
LABELV $471
line 773
;771:
;772:	case WP_LIGHTNING:
;773:		MAKERGB( weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 774
;774:		weaponInfo->readySound = trap_S_RegisterSound( "sound/weapons/melee/fsthum.wav", qfalse );
ADDRGP4 $472
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 148
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 148
INDIRI4
ASGNI4
line 775
;775:		weaponInfo->firingSound = trap_S_RegisterSound( "sound/weapons/lightning/lg_hum.wav", qfalse );
ADDRGP4 $473
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 152
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 152
INDIRI4
ASGNI4
line 776
;776:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/lightning/lg_fire.wav", qfalse );
ADDRGP4 $474
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 156
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 156
INDIRI4
ASGNI4
line 779
;777:		
;778:#ifdef USE_VR
;779:		if (trap_Cvar_VariableValue("demoversion") != 0.0f)
ADDRGP4 $477
ARGP4
ADDRLP4 160
ADDRGP4 trap_Cvar_VariableValue
CALLF4
ASGNF4
ADDRLP4 160
INDIRF4
CNSTF4 0
EQF4 $475
line 780
;780:			cgs.media.lightningShader = trap_R_RegisterShader("lightningBolt");
ADDRGP4 $480
ARGP4
ADDRLP4 164
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+150560+196
ADDRLP4 164
INDIRI4
ASGNI4
ADDRGP4 $476
JUMPV
LABELV $475
line 783
;781:		else
;782:#endif
;783:			cgs.media.lightningShader = trap_R_RegisterShader("lightningBoltNew");
ADDRGP4 $483
ARGP4
ADDRLP4 168
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+150560+196
ADDRLP4 168
INDIRI4
ASGNI4
LABELV $476
line 785
;784:
;785:		cgs.media.lightningExplosionModel = trap_R_RegisterModel( "models/weaphits/crackle.md3" );
ADDRGP4 $486
ARGP4
ADDRLP4 172
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRGP4 cgs+150560+496
ADDRLP4 172
INDIRI4
ASGNI4
line 786
;786:		cgs.media.sfx_lghit1 = trap_S_RegisterSound( "sound/weapons/lightning/lg_hit.wav", qfalse );
ADDRGP4 $489
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 176
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 cgs+150560+708
ADDRLP4 176
INDIRI4
ASGNI4
line 787
;787:		cgs.media.sfx_lghit2 = trap_S_RegisterSound( "sound/weapons/lightning/lg_hit2.wav", qfalse );
ADDRGP4 $492
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 180
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 cgs+150560+712
ADDRLP4 180
INDIRI4
ASGNI4
line 788
;788:		cgs.media.sfx_lghit3 = trap_S_RegisterSound( "sound/weapons/lightning/lg_hit3.wav", qfalse );
ADDRGP4 $495
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 184
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 cgs+150560+716
ADDRLP4 184
INDIRI4
ASGNI4
line 790
;789:
;790:		break;
ADDRGP4 $467
JUMPV
LABELV $496
line 793
;791:#ifdef USE_GRAPPLING_HOOK
;792:	case WP_GRAPPLING_HOOK:
;793:		MAKERGB( weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 794
;794:		weaponInfo->missileTrailFunc = CG_GrappleTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_GrappleTrail
ASGNP4
line 810
;795:
;796:		//weaponInfo->missileDlight = HOOK_GLOW_RADIUS;
;797:		//weaponInfo->wiTrailTime = 2000;
;798:		//weaponInfo->trailRadius = 64;
;799:
;800:		/* // q3A version :
;801:		weaponInfo->missileModel = trap_R_RegisterModel( "models/ammo/rocket/rocket.md3" );
;802:		weaponInfo->missileDlight = HOOK_GLOW_RADIUS;
;803:		weaponInfo->wiTrailTime = 2000;
;804:		weaponInfo->trailRadius = 64;
;805:		MAKERGB( weaponInfo->missileDlightColor, 1, 0.75f, 0 );
;806:		weaponInfo->readySound = trap_S_RegisterSound( "sound/weapons/melee/fsthum.wav", qfalse );
;807:		weaponInfo->firingSound = trap_S_RegisterSound( "sound/weapons/melee/fstrun.wav", qfalse );
;808:		*/
;809:
;810:		weaponInfo->missileModel	= trap_R_RegisterModel( "models/weapons2/grapple/grapple_barrel.md3" );//openArena
ADDRGP4 $497
ARGP4
ADDRLP4 188
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 188
INDIRI4
ASGNI4
line 812
;811:		//weaponInfo->missileModel	= trap_R_RegisterModel( "models/weapons2/grapple_ql/grapple_hook.md3" );//ql
;812:		cgs.media.ropeShader		= trap_R_RegisterShader("grapplingChain");//quake live
ADDRGP4 $500
ARGP4
ADDRLP4 192
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+150560+336
ADDRLP4 192
INDIRI4
ASGNI4
line 814
;813:		//cgs.media.ropeShader		= trap_R_RegisterShader( "rope" );//test rope
;814:		weaponInfo->firingSound = trap_S_RegisterSound( "models/weapons2/grapple/rsths13_fishingreel_22_mono.wav" , qfalse );
ADDRGP4 $501
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 196
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 196
INDIRI4
ASGNI4
line 815
;815:		break;
ADDRGP4 $467
JUMPV
LABELV $502
line 833
;816:#endif
;817:
;818:#ifdef MISSIONPACK
;819:	case WP_CHAINGUN:
;820:		weaponInfo->firingSound = trap_S_RegisterSound( "sound/weapons/vulcan/wvulfire.wav", qfalse );
;821:		weaponInfo->loopFireSound = qtrue;
;822:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 0 );
;823:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/vulcan/vulcanf1b.wav", qfalse );
;824:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/vulcan/vulcanf2b.wav", qfalse );
;825:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/vulcan/vulcanf3b.wav", qfalse );
;826:		weaponInfo->flashSound[3] = trap_S_RegisterSound( "sound/weapons/vulcan/vulcanf4b.wav", qfalse );
;827:		weaponInfo->ejectBrassFunc = CG_MachineGunEjectBrass;
;828:		cgs.media.bulletExplosionShader = trap_R_RegisterShader( "bulletExplosion" );
;829:		break;
;830:#endif
;831:
;832:	case WP_MACHINEGUN:
;833:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 834
;834:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/machinegun/machgf1b.wav", qfalse );
ADDRGP4 $503
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 200
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 200
INDIRI4
ASGNI4
line 835
;835:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/machinegun/machgf2b.wav", qfalse );
ADDRGP4 $504
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 204
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 204
INDIRI4
ASGNI4
line 836
;836:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/machinegun/machgf3b.wav", qfalse );
ADDRGP4 $505
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 208
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 208
INDIRI4
ASGNI4
line 837
;837:		weaponInfo->flashSound[3] = trap_S_RegisterSound( "sound/weapons/machinegun/machgf4b.wav", qfalse );
ADDRGP4 $506
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 212
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 212
INDIRI4
ASGNI4
line 838
;838:		weaponInfo->ejectBrassFunc = CG_MachineGunEjectBrass;
ADDRLP4 12
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 CG_MachineGunEjectBrass
ASGNP4
line 839
;839:		cgs.media.bulletExplosionShader = trap_R_RegisterShader( "bulletExplosion" );
ADDRGP4 $509
ARGP4
ADDRLP4 216
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+150560+508
ADDRLP4 216
INDIRI4
ASGNI4
line 840
;840:		break;
ADDRGP4 $467
JUMPV
LABELV $510
line 843
;841:
;842:	case WP_SHOTGUN:
;843:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 844
;844:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/shotgun/sshotf1b.wav", qfalse );
ADDRGP4 $511
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 220
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 220
INDIRI4
ASGNI4
line 845
;845:		weaponInfo->ejectBrassFunc = CG_ShotgunEjectBrass;
ADDRLP4 12
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 CG_ShotgunEjectBrass
ASGNP4
line 846
;846:		break;
ADDRGP4 $467
JUMPV
LABELV $512
line 849
;847:
;848:	case WP_ROCKET_LAUNCHER:
;849:		weaponInfo->missileModel = trap_R_RegisterModel( "models/ammo/rocket/rocket.md3" );
ADDRGP4 $513
ARGP4
ADDRLP4 224
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 224
INDIRI4
ASGNI4
line 850
;850:		weaponInfo->missileSound = trap_S_RegisterSound( "sound/weapons/rocket/rockfly.wav", qfalse );
ADDRGP4 $514
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 228
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 228
INDIRI4
ASGNI4
line 851
;851:		weaponInfo->missileTrailFunc = CG_RocketTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_RocketTrail
ASGNP4
line 852
;852:		weaponInfo->missileDlight = MISSILE_GLOW_RADIUS;
ADDRLP4 12
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1128792064
ASGNF4
line 853
;853:		weaponInfo->wiTrailTime = 2000;
ADDRLP4 12
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1157234688
ASGNF4
line 854
;854:		weaponInfo->trailRadius = 64;
ADDRLP4 12
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1115684864
ASGNF4
line 856
;855:		
;856:		MAKERGB( weaponInfo->missileDlightColor, 1, 0.75f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 1061158912
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 0
ASGNF4
line 857
;857:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.75f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1061158912
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 859
;858:
;859:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/rocket/rocklf1a.wav", qfalse );
ADDRGP4 $515
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 232
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 232
INDIRI4
ASGNI4
line 860
;860:		cgs.media.rocketExplosionShader = trap_R_RegisterShader( "rocketExplosion" );
ADDRGP4 $518
ARGP4
ADDRLP4 236
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+150560+512
ADDRLP4 236
INDIRI4
ASGNI4
line 861
;861:		break;
ADDRGP4 $467
JUMPV
LABELV $519
line 876
;862:
;863:#ifdef MISSIONPACK
;864:	case WP_PROX_LAUNCHER:
;865:		weaponInfo->missileModel = trap_R_RegisterModel( "models/weaphits/proxmine.md3" );
;866:		weaponInfo->missileTrailFunc = CG_GrenadeTrail;
;867:		weaponInfo->wiTrailTime = 700;
;868:		weaponInfo->trailRadius = 32;
;869:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.70f, 0 );
;870:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/proxmine/wstbfire.wav", qfalse );
;871:		cgs.media.grenadeExplosionShader = trap_R_RegisterShader( "grenadeExplosion" );
;872:		break;
;873:#endif
;874:
;875:	case WP_GRENADE_LAUNCHER:
;876:		weaponInfo->missileModel = trap_R_RegisterModel( "models/ammo/grenade1.md3" );
ADDRGP4 $520
ARGP4
ADDRLP4 240
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 240
INDIRI4
ASGNI4
line 877
;877:		weaponInfo->missileTrailFunc = CG_GrenadeTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_GrenadeTrail
ASGNP4
line 878
;878:		weaponInfo->wiTrailTime = 700;
ADDRLP4 12
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1143930880
ASGNF4
line 879
;879:		weaponInfo->trailRadius = 32;
ADDRLP4 12
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1107296256
ASGNF4
line 880
;880:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.70f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 881
;881:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/grenade/grenlf1a.wav", qfalse );
ADDRGP4 $521
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 244
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 244
INDIRI4
ASGNI4
line 882
;882:		cgs.media.grenadeExplosionShader = trap_R_RegisterShader( "grenadeExplosion" );
ADDRGP4 $524
ARGP4
ADDRLP4 248
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+150560+516
ADDRLP4 248
INDIRI4
ASGNI4
line 883
;883:		break;
ADDRGP4 $467
JUMPV
LABELV $525
line 900
;884:
;885:#ifdef MISSIONPACK
;886:	case WP_NAILGUN:
;887:		weaponInfo->ejectBrassFunc = CG_NailgunEjectBrass;
;888:		weaponInfo->missileTrailFunc = CG_NailTrail;
;889://		weaponInfo->missileSound = trap_S_RegisterSound( "sound/weapons/nailgun/wnalflit.wav", qfalse );
;890:		weaponInfo->trailRadius = 16;
;891:		weaponInfo->wiTrailTime = 250;
;892:		weaponInfo->missileModel = trap_R_RegisterModel( "models/weaphits/nail.md3" );
;893:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.75f, 0 );
;894:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/nailgun/wnalfire.wav", qfalse );
;895:		break;
;896:#endif
;897:
;898:	case WP_PLASMAGUN:
;899://		weaponInfo->missileModel = cgs.media.invulnerabilityPowerupModel;
;900:		weaponInfo->missileTrailFunc = CG_PlasmaTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_PlasmaTrail
ASGNP4
line 901
;901:		weaponInfo->missileSound = trap_S_RegisterSound( "sound/weapons/plasma/lasfly.wav", qfalse );
ADDRGP4 $526
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 252
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 252
INDIRI4
ASGNI4
line 904
;902:
;903:		// plasmagun dlight
;904:		weaponInfo->missileDlight = MISSILE_GLOW_RADIUS;
ADDRLP4 12
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1128792064
ASGNF4
line 905
;905:		MAKERGB( weaponInfo->missileDlightColor, 0.2f, 0.2f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1045220557
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 1045220557
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1065353216
ASGNF4
line 907
;906:
;907:		MAKERGB( weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 908
;908:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/plasma/hyprbf1a.wav", qfalse );
ADDRGP4 $527
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 256
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 256
INDIRI4
ASGNI4
line 909
;909:		cgs.media.plasmaExplosionShader = trap_R_RegisterShader( "plasmaExplosion" );
ADDRGP4 $530
ARGP4
ADDRLP4 260
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+150560+504
ADDRLP4 260
INDIRI4
ASGNI4
line 910
;910:		cgs.media.railRingsShader = trap_R_RegisterShader( "railDisc" );
ADDRGP4 $533
ARGP4
ADDRLP4 264
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+150560+188
ADDRLP4 264
INDIRI4
ASGNI4
line 911
;911:		break;
ADDRGP4 $467
JUMPV
LABELV $534
line 914
;912:
;913:	case WP_RAILGUN:
;914:		weaponInfo->readySound = trap_S_RegisterSound( "sound/weapons/railgun/rg_hum.wav", qfalse );
ADDRGP4 $535
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 268
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 268
INDIRI4
ASGNI4
line 915
;915:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.5f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1056964608
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 916
;916:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/railgun/railgf1a.wav", qfalse );
ADDRGP4 $536
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 272
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 272
INDIRI4
ASGNI4
line 917
;917:		cgs.media.railExplosionShader = trap_R_RegisterShader( "railExplosion" );
ADDRGP4 $539
ARGP4
ADDRLP4 276
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+150560+500
ADDRLP4 276
INDIRI4
ASGNI4
line 918
;918:		cgs.media.railRingsShader = trap_R_RegisterShader( "railDisc" );
ADDRGP4 $533
ARGP4
ADDRLP4 280
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+150560+188
ADDRLP4 280
INDIRI4
ASGNI4
line 919
;919:		cgs.media.railCoreShader = trap_R_RegisterShader( "railCore" );
ADDRGP4 $219
ARGP4
ADDRLP4 284
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+150560+192
ADDRLP4 284
INDIRI4
ASGNI4
line 920
;920:		break;
ADDRGP4 $467
JUMPV
LABELV $544
line 923
;921:
;922:	case WP_BFG:
;923:		weaponInfo->readySound = trap_S_RegisterSound( "sound/weapons/bfg/bfg_hum.wav", qfalse );
ADDRGP4 $545
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 288
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 288
INDIRI4
ASGNI4
line 926
;924:
;925:		// bfg dlight
;926:		weaponInfo->missileDlight = MISSILE_GLOW_RADIUS;
ADDRLP4 12
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1128792064
ASGNF4
line 927
;927:		MAKERGB( weaponInfo->missileDlightColor, 0.2f, 1.0f, 0.2f );
ADDRLP4 12
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1045220557
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1045220557
ASGNF4
line 929
;928:
;929:		MAKERGB( weaponInfo->flashDlightColor, 1.0f, 0.7f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 930
;930:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/bfg/bfg_fire.wav", qfalse );
ADDRGP4 $546
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 292
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 292
INDIRI4
ASGNI4
line 931
;931:		cgs.media.bfgExplosionShader = trap_R_RegisterShader( "bfgExplosion" );
ADDRGP4 $549
ARGP4
ADDRLP4 296
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+150560+520
ADDRLP4 296
INDIRI4
ASGNI4
line 932
;932:		weaponInfo->missileModel = trap_R_RegisterModel( "models/weaphits/bfg.md3" );
ADDRGP4 $550
ARGP4
ADDRLP4 300
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 300
INDIRI4
ASGNI4
line 933
;933:		weaponInfo->missileSound = trap_S_RegisterSound( "sound/weapons/rocket/rockfly.wav", qfalse );
ADDRGP4 $514
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 304
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 304
INDIRI4
ASGNI4
line 934
;934:		break;
ADDRGP4 $467
JUMPV
LABELV $466
line 937
;935:
;936:	default:
;937:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 1 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 938
;938:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/rocket/rocklf1a.wav", qfalse );
ADDRGP4 $515
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 308
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 308
INDIRI4
ASGNI4
line 939
;939:		break;
LABELV $467
line 941
;940:	}
;941:}
LABELV $429
endproc CG_RegisterWeapon 312 12
export CG_RegisterItemVisuals
proc CG_RegisterItemVisuals 28 12
line 950
;942:
;943:/*
;944:=================
;945:CG_RegisterItemVisuals
;946:
;947:The server says this item is used on this level
;948:=================
;949:*/
;950:void CG_RegisterItemVisuals( int itemNum ) {
line 954
;951:	itemInfo_t		*itemInfo;
;952:	gitem_t			*item;
;953:
;954:	if ( itemNum < 0 || itemNum >= bg_numItems ) {
ADDRLP4 8
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
LTI4 $556
ADDRLP4 8
INDIRI4
ADDRGP4 bg_numItems
INDIRI4
LTI4 $554
LABELV $556
line 955
;955:		CG_Error( "CG_RegisterItemVisuals: itemNum %d out of range [0-%d]", itemNum, bg_numItems-1 );
ADDRGP4 $557
ARGP4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 bg_numItems
INDIRI4
CNSTI4 1
SUBI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 956
;956:	}
LABELV $554
line 958
;957:
;958:	itemInfo = &cg_items[ itemNum ];
ADDRLP4 0
ADDRFP4 0
INDIRI4
CNSTI4 28
MULI4
ADDRGP4 cg_items
ADDP4
ASGNP4
line 959
;959:	if ( itemInfo->registered ) {
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $558
line 960
;960:		return;
ADDRGP4 $553
JUMPV
LABELV $558
line 963
;961:	}
;962:
;963:	item = &bg_itemlist[ itemNum ];
ADDRLP4 4
ADDRFP4 0
INDIRI4
CNSTI4 52
MULI4
ADDRGP4 bg_itemlist
ADDP4
ASGNP4
line 965
;964:
;965:	memset( itemInfo, 0, sizeof( *itemInfo ) );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 28
ARGI4
ADDRGP4 memset
CALLP4
pop
line 966
;966:	itemInfo->registered = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 1
ASGNI4
line 968
;967:
;968:	itemInfo->models[0] = trap_R_RegisterModel( item->world_model[0] );
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
line 970
;969:
;970:	itemInfo->icon = trap_R_RegisterShader( item->icon );
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 973
;971:
;972:	// try to register depth-fragment shaders
;973:	if ( cg.clientFrame == 0 && cg.skipDFshaders ) {
ADDRGP4 cg
INDIRI4
CNSTI4 0
NEI4 $560
ADDRGP4 cg+282948
INDIRI4
CNSTI4 0
EQI4 $560
line 974
;974:		itemInfo->icon_df = 0;
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
CNSTI4 0
ASGNI4
line 975
;975:	} else {
ADDRGP4 $561
JUMPV
LABELV $560
line 976
;976:		itemInfo->icon_df = trap_R_RegisterShader( va( "%s_df", item->icon ) );
ADDRGP4 $563
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 977
;977:	}
LABELV $561
line 979
;978:
;979:	if ( !itemInfo->icon_df ) {
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CNSTI4 0
NEI4 $564
line 980
;980:		itemInfo->icon_df = itemInfo->icon;
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ASGNI4
line 981
;981:		if ( cg.clientFrame == 0 ) {
ADDRGP4 cg
INDIRI4
CNSTI4 0
NEI4 $566
line 982
;982:			cg.skipDFshaders = qtrue; // skip all further tries to avoid shader debug mesages in 1.32c during map loading
ADDRGP4 cg+282948
CNSTI4 1
ASGNI4
line 983
;983:		} else {
ADDRGP4 $565
JUMPV
LABELV $566
line 984
;984:			cg.skipDFshaders = qfalse;
ADDRGP4 cg+282948
CNSTI4 0
ASGNI4
line 985
;985:		}
line 986
;986:	} else {
ADDRGP4 $565
JUMPV
LABELV $564
line 987
;987:		cg.skipDFshaders = qfalse;
ADDRGP4 cg+282948
CNSTI4 0
ASGNI4
line 988
;988:	}
LABELV $565
line 990
;989:
;990:	if ( item->giType == IT_WEAPON ) {
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 1
NEI4 $571
line 991
;991:		CG_RegisterWeapon( item->giTag );
ADDRLP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 992
;992:	}
LABELV $571
line 997
;993:
;994:	//
;995:	// powerups have an accompanying ring or sphere
;996:	//
;997:	if ( item->giType == IT_POWERUP || item->giType == IT_HEALTH || 
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 5
EQI4 $577
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 4
EQI4 $577
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 3
EQI4 $577
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 6
NEI4 $573
LABELV $577
line 998
;998:		item->giType == IT_ARMOR || item->giType == IT_HOLDABLE ) {
line 999
;999:		if ( item->world_model[1] ) {
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $578
line 1000
;1000:			itemInfo->models[1] = trap_R_RegisterModel( item->world_model[1] );
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 1001
;1001:		}
LABELV $578
line 1002
;1002:	}
LABELV $573
line 1003
;1003:}
LABELV $553
endproc CG_RegisterItemVisuals 28 12
proc CG_MapTorsoToWeaponFrame 24 0
line 1020
;1004:
;1005:
;1006:/*
;1007:========================================================================================
;1008:
;1009:VIEW WEAPON
;1010:
;1011:========================================================================================
;1012:*/
;1013:
;1014:/*
;1015:=================
;1016:CG_MapTorsoToWeaponFrame
;1017:
;1018:=================
;1019:*/
;1020:static int CG_MapTorsoToWeaponFrame( const clientInfo_t *ci, int frame ) {
line 1023
;1021:
;1022:	// change weapon
;1023:	if ( frame >= ci->animations[TORSO_DROP].firstFrame 
ADDRLP4 0
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 700
ADDP4
INDIRI4
LTI4 $581
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 700
ADDP4
INDIRI4
CNSTI4 9
ADDI4
GEI4 $581
line 1024
;1024:		&& frame < ci->animations[TORSO_DROP].firstFrame + 9 ) {
line 1025
;1025:		return frame - ci->animations[TORSO_DROP].firstFrame + 6;
ADDRFP4 4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 700
ADDP4
INDIRI4
SUBI4
CNSTI4 6
ADDI4
RETI4
ADDRGP4 $580
JUMPV
LABELV $581
line 1029
;1026:	}
;1027:
;1028:	// stand attack
;1029:	if ( frame >= ci->animations[TORSO_ATTACK].firstFrame 
ADDRLP4 8
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 644
ADDP4
INDIRI4
LTI4 $583
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 644
ADDP4
INDIRI4
CNSTI4 6
ADDI4
GEI4 $583
line 1030
;1030:		&& frame < ci->animations[TORSO_ATTACK].firstFrame + 6 ) {
line 1031
;1031:		return 1 + frame - ci->animations[TORSO_ATTACK].firstFrame;
ADDRFP4 4
INDIRI4
CNSTI4 1
ADDI4
ADDRFP4 0
INDIRP4
CNSTI4 644
ADDP4
INDIRI4
SUBI4
RETI4
ADDRGP4 $580
JUMPV
LABELV $583
line 1035
;1032:	}
;1033:
;1034:	// stand attack 2
;1035:	if ( frame >= ci->animations[TORSO_ATTACK2].firstFrame 
ADDRLP4 16
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRI4
ADDRLP4 20
INDIRP4
CNSTI4 672
ADDP4
INDIRI4
LTI4 $585
ADDRLP4 16
INDIRI4
ADDRLP4 20
INDIRP4
CNSTI4 672
ADDP4
INDIRI4
CNSTI4 6
ADDI4
GEI4 $585
line 1036
;1036:		&& frame < ci->animations[TORSO_ATTACK2].firstFrame + 6 ) {
line 1037
;1037:		return 1 + frame - ci->animations[TORSO_ATTACK2].firstFrame;
ADDRFP4 4
INDIRI4
CNSTI4 1
ADDI4
ADDRFP4 0
INDIRP4
CNSTI4 672
ADDP4
INDIRI4
SUBI4
RETI4
ADDRGP4 $580
JUMPV
LABELV $585
line 1040
;1038:	}
;1039:	
;1040:	return 0;
CNSTI4 0
RETI4
LABELV $580
endproc CG_MapTorsoToWeaponFrame 24 0
export CG_CalculateWeaponPosition
proc CG_CalculateWeaponPosition 28 4
line 1049
;1041:}
;1042:
;1043:
;1044:/*
;1045:==============
;1046:CG_CalculateWeaponPosition
;1047:==============
;1048:*/
;1049:void CG_CalculateWeaponPosition( vec3_t origin, vec3_t angles ) {
line 1054
;1050:	float	scale;
;1051:	int		delta;
;1052:	float	fracsin;
;1053:
;1054:	VectorCopy( cg.refdef.vieworg, origin );
ADDRFP4 0
INDIRP4
ADDRGP4 cg+236804+24
INDIRB
ASGNB 12
line 1057
;1055:
;1056:#ifdef USE_VR_QVM
;1057:	if ( cg.vr_controller_type ) {
ADDRGP4 cg+282972
INDIRI4
CNSTI4 0
EQI4 $590
line 1059
;1058:		//VectorCopy( cg.predictedPlayerState.right_hand_angles, angles );
;1059:		VectorCopy( cg.refdefVR_RightAngles, angles );
ADDRFP4 4
INDIRP4
ADDRGP4 cg+237184
INDIRB
ASGNB 12
line 1060
;1060:	}
ADDRGP4 $591
JUMPV
LABELV $590
line 1063
;1061:	else
;1062:#endif
;1063:	VectorCopy( cg.refdefViewAngles, angles );
ADDRFP4 4
INDIRP4
ADDRGP4 cg+237172
INDIRB
ASGNB 12
LABELV $591
line 1066
;1064:
;1065:	// on odd legs, invert some angles
;1066:	if ( cg.bobcycle & 1 ) {
ADDRGP4 cg+245732
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $595
line 1067
;1067:		scale = -cg.xyspeed;
ADDRLP4 0
ADDRGP4 cg+245736
INDIRF4
NEGF4
ASGNF4
line 1068
;1068:	} else {
ADDRGP4 $596
JUMPV
LABELV $595
line 1069
;1069:		scale = cg.xyspeed;
ADDRLP4 0
ADDRGP4 cg+245736
INDIRF4
ASGNF4
line 1070
;1070:	}
LABELV $596
line 1083
;1071:
;1072:	// gun angles from bobbing
;1073:#if 0 // this is from ioq3Quest
;1074:	if ( cg_weaponbob.value != 0 )
;1075:	{
;1076:		angles[ROLL] += scale * cg.bobfracsin * 0.005;
;1077:		angles[YAW] += scale * cg.bobfracsin * 0.01;
;1078:		angles[PITCH] += cg.xyspeed * cg.bobfracsin * 0.005;
;1079:	}
;1080:#endif
;1081:
;1082:	// drop the weapon when landing
;1083:	delta = cg.time - cg.landTime;
ADDRLP4 8
ADDRGP4 cg+234764
INDIRI4
ADDRGP4 cg+236700
INDIRI4
SUBI4
ASGNI4
line 1084
;1084:	if ( delta < LAND_DEFLECT_TIME ) {
ADDRLP4 8
INDIRI4
CNSTI4 150
GEI4 $602
line 1085
;1085:		origin[2] += cg.landChange*0.25 * delta / LAND_DEFLECT_TIME;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
ADDRGP4 cg+236696
INDIRF4
CNSTF4 1048576000
MULF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
CNSTF4 1004172302
MULF4
ADDF4
ASGNF4
line 1086
;1086:	} else if ( delta < LAND_DEFLECT_TIME + LAND_RETURN_TIME ) {
ADDRGP4 $603
JUMPV
LABELV $602
ADDRLP4 8
INDIRI4
CNSTI4 450
GEI4 $605
line 1087
;1087:		origin[2] += cg.landChange*0.25 * 
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
ADDRGP4 cg+236696
INDIRF4
CNSTF4 1048576000
MULF4
CNSTI4 450
ADDRLP4 8
INDIRI4
SUBI4
CVIF4 4
MULF4
CNSTF4 995783694
MULF4
ADDF4
ASGNF4
line 1089
;1088:			(LAND_DEFLECT_TIME + LAND_RETURN_TIME - delta) / LAND_RETURN_TIME;
;1089:	}
LABELV $605
LABELV $603
line 1102
;1090:
;1091:#if 0
;1092:	// drop the weapon when stair climbing
;1093:	delta = cg.time - cg.stepTime;
;1094:	if ( delta < STEP_TIME/2 ) {
;1095:		origin[2] -= cg.stepChange*0.25 * delta / (STEP_TIME/2);
;1096:	} else if ( delta < STEP_TIME ) {
;1097:		origin[2] -= cg.stepChange*0.25 * (STEP_TIME - delta) / (STEP_TIME/2);
;1098:	}
;1099:#endif
;1100:
;1101:	// idle drift
;1102:	scale = cg.xyspeed + 40;
ADDRLP4 0
ADDRGP4 cg+245736
INDIRF4
CNSTF4 1109393408
ADDF4
ASGNF4
line 1103
;1103:	fracsin = sin( ( cg.time % TMOD_1000 ) * 0.001 );
ADDRGP4 cg+234764
INDIRI4
CNSTI4 5730265
MODI4
CVIF4 4
CNSTF4 981668463
MULF4
ARGF4
ADDRLP4 12
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 12
INDIRF4
ASGNF4
line 1104
;1104:	angles[ROLL] += scale * fracsin * 0.01;
ADDRLP4 16
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
CNSTF4 1008981770
MULF4
ADDF4
ASGNF4
line 1105
;1105:	angles[YAW] += scale * fracsin * 0.01;
ADDRLP4 20
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
CNSTF4 1008981770
MULF4
ADDF4
ASGNF4
line 1106
;1106:	angles[PITCH] += scale * fracsin * 0.01;
ADDRLP4 24
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
CNSTF4 1008981770
MULF4
ADDF4
ASGNF4
line 1107
;1107:}
LABELV $587
endproc CG_CalculateWeaponPosition 28 4
proc CG_LightningBolt 320 28
line 1121
;1108:
;1109:
;1110:/*
;1111:===============
;1112:CG_LightningBolt
;1113:
;1114:Origin will be the exact tag point, which is slightly
;1115:different than the muzzle point used for determining hits.
;1116:The cent should be the non-predicted cent if it is from the player,
;1117:so the endpoint will reflect the simulated strike (lagging the predicted
;1118:angle)
;1119:===============
;1120:*/
;1121:static void CG_LightningBolt( centity_t *cent, vec3_t origin ) {
line 1133
;1122:	trace_t		trace;
;1123:	refEntity_t	beam;
;1124:	vec3_t		forward;
;1125:	vec3_t		muzzlePoint, endPoint;
;1126:	int			anim;
;1127:	qboolean	directView;
;1128:	qboolean	myself;
;1129:	int			vr_controller_type;
;1130:	vec3_t		rightAngles;
;1131:	vec3_t		refdefAngles;
;1132:
;1133:	if (cent->currentState.weapon != WP_LIGHTNING) {
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 6
EQI4 $611
line 1134
;1134:		return;
ADDRGP4 $610
JUMPV
LABELV $611
line 1137
;1135:	}
;1136:
;1137:	if (cent->pe.lightningFiring) {
ADDRFP4 0
INDIRP4
CNSTI4 1112
ADDP4
INDIRI4
CNSTI4 0
EQI4 $613
line 1138
;1138:		return;
ADDRGP4 $610
JUMPV
LABELV $613
line 1141
;1139:	}
;1140:
;1141:	memset(&beam, 0, sizeof(beam));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1143
;1142:
;1143:	myself = cent->currentState.number == cg.predictedPlayerState.clientNum;
ADDRFP4 0
INDIRP4
INDIRI4
ADDRGP4 cg+234796+140
INDIRI4
NEI4 $618
ADDRLP4 272
CNSTI4 1
ASGNI4
ADDRGP4 $619
JUMPV
LABELV $618
ADDRLP4 272
CNSTI4 0
ASGNI4
LABELV $619
ADDRLP4 264
ADDRLP4 272
INDIRI4
ASGNI4
line 1145
;1144:
;1145:	vr_controller_type = VR_get_cent_controller_type( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 276
ADDRGP4 VR_get_cent_controller_type
CALLI4
ASGNI4
ADDRLP4 256
ADDRLP4 276
INDIRI4
ASGNI4
line 1151
;1146:
;1147:#ifndef USE_VR
;1148:	VectorCopy(cent->lerpAngles, rightAngles);
;1149:	VectorCopy(cg.refdefViewAngles, refdefAngles);
;1150:#else
;1151:	VR_get_cent_controller_angles( cent, rightAngles, SideRIGHT );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 176
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 VR_get_cent_controller_angles
CALLV
pop
line 1152
;1152:	VectorCopy(cg.refdefVR_RightAngles, refdefAngles);
ADDRLP4 152
ADDRGP4 cg+237184
INDIRB
ASGNB 12
line 1156
;1153:#endif
;1154:
;1155:#ifdef USE_VR
;1156:	if ( vr_controller_type ) {
ADDRLP4 256
INDIRI4
CNSTI4 0
EQI4 $621
line 1158
;1157:		// VR client
;1158:		if ( myself ) {
ADDRLP4 264
INDIRI4
CNSTI4 0
EQI4 $623
line 1159
;1159:			directView = qtrue;
ADDRLP4 260
CNSTI4 1
ASGNI4
line 1160
;1160:			if ( vr_controller_type >= 2 ) {
ADDRLP4 256
INDIRI4
CNSTI4 2
LTI4 $625
line 1162
;1161:				vec3_t angle;
;1162:				CG_CalculateWeaponPosition_VR_6Dof( muzzlePoint, angle );
ADDRLP4 140
ARGP4
ADDRLP4 280
ARGP4
ADDRGP4 CG_CalculateWeaponPosition_VR_6Dof
CALLV
pop
line 1163
;1163:				AngleVectors( angle, forward, NULL, NULL );
ADDRLP4 280
ARGP4
ADDRLP4 164
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1164
;1164:			} else {
ADDRGP4 $622
JUMPV
LABELV $625
line 1166
;1165:#ifdef USE_VR_QVM
;1166:				VectorCopy(cg.predictedPlayerState.right_muzzle_position, muzzlePoint);
ADDRLP4 140
ADDRGP4 cg+234796+496
INDIRB
ASGNB 12
line 1171
;1167:#endif
;1168:#ifdef USE_NATIVE_HACK
;1169:				VectorCopy(vrinfo->ray_origin, muzzlePoint);
;1170:#endif
;1171:			}
line 1172
;1172:		} else {
ADDRGP4 $622
JUMPV
LABELV $623
line 1174
;1173:			// not myself
;1174:			directView = qfalse;
ADDRLP4 260
CNSTI4 0
ASGNI4
line 1176
;1175:#ifdef USE_VR_QVM
;1176:			VectorCopy(cent->currentState.rmpos.trBase, muzzlePoint);
ADDRLP4 140
ADDRFP4 0
INDIRP4
CNSTI4 256
ADDP4
INDIRB
ASGNB 12
line 1181
;1177:#endif
;1178:#ifdef USE_NATIVE_HACK
;1179:			VectorCopy(vrinfo->ray_origin, muzzlePoint);
;1180:#endif
;1181:		}
line 1182
;1182:	} else
ADDRGP4 $622
JUMPV
LABELV $621
line 1184
;1183:#endif // USE_VR_QVM
;1184:	{
line 1186
;1185:		// not VR client
;1186:		if ( !cg.renderingThirdPerson && myself ) {
ADDRGP4 cg+234788
INDIRI4
CNSTI4 0
NEI4 $629
ADDRLP4 264
INDIRI4
CNSTI4 0
EQI4 $629
line 1187
;1187:			directView = qtrue;
ADDRLP4 260
CNSTI4 1
ASGNI4
line 1188
;1188:			VectorCopy(cg.refdef.vieworg, muzzlePoint);
ADDRLP4 140
ADDRGP4 cg+236804+24
INDIRB
ASGNB 12
line 1189
;1189:		}
ADDRGP4 $630
JUMPV
LABELV $629
line 1190
;1190:		else {
line 1191
;1191:			directView = qfalse;
ADDRLP4 260
CNSTI4 0
ASGNI4
line 1198
;1192:
;1193:			//--------------------------
;1194:			// !CPMA
;1195:			//AngleVectors(cent->lerpAngles, forward, NULL, NULL); // from ioq3Quest
;1196:			//--------------------------
;1197:
;1198:			VectorCopy(cent->lerpOrigin, muzzlePoint);
ADDRLP4 140
ADDRFP4 0
INDIRP4
CNSTI4 1212
ADDP4
INDIRB
ASGNB 12
line 1199
;1199:			anim = cent->currentState.legsAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 268
ADDRFP4 0
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 1200
;1200:			if ( anim == LEGS_WALKCR || anim == LEGS_IDLECR ) {
ADDRLP4 280
ADDRLP4 268
INDIRI4
ASGNI4
ADDRLP4 280
INDIRI4
CNSTI4 13
EQI4 $636
ADDRLP4 280
INDIRI4
CNSTI4 23
NEI4 $634
LABELV $636
line 1202
;1201:#ifdef USE_VR
;1202:				muzzlePoint[2] += cg.heightCrouch;
ADDRLP4 140+8
ADDRLP4 140+8
INDIRF4
ADDRGP4 cg+282964
INDIRF4
ADDF4
ASGNF4
line 1206
;1203:#else
;1204:				muzzlePoint[2] += CROUCH_VIEWHEIGHT;
;1205:#endif
;1206:			}
ADDRGP4 $635
JUMPV
LABELV $634
line 1207
;1207:			else {
line 1209
;1208:#ifdef USE_VR
;1209:				muzzlePoint[2] += cg.heightStand;
ADDRLP4 140+8
ADDRLP4 140+8
INDIRF4
ADDRGP4 cg+282960
INDIRF4
ADDF4
ASGNF4
line 1213
;1210:#else
;1211:				muzzlePoint[2] += DEFAULT_VIEWHEIGHT;
;1212:#endif
;1213:			}
LABELV $635
line 1214
;1214:		}
LABELV $630
line 1215
;1215:	}
LABELV $622
line 1218
;1216:
;1217:	// CPMA  "true" lightning
;1218:	if ( directView && cg_trueLightning.value ) {
ADDRLP4 260
INDIRI4
CNSTI4 0
EQI4 $641
ADDRGP4 cg_trueLightning+8
INDIRF4
CNSTF4 0
EQF4 $641
line 1223
;1219:		vec3_t angle;
;1220:		int i;
;1221:		float a;
;1222:
;1223:		for (i = 0; i < 3; i++) {
ADDRLP4 280
CNSTI4 0
ASGNI4
LABELV $644
line 1224
;1224:			a = rightAngles[i] - refdefAngles[i];
ADDRLP4 284
ADDRLP4 280
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 176
ADDP4
INDIRF4
ADDRLP4 280
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 152
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1227
;1225:
;1226:
;1227:			if (a > 180) {
ADDRLP4 284
INDIRF4
CNSTF4 1127481344
LEF4 $648
line 1228
;1228:				a -= 360;
ADDRLP4 284
ADDRLP4 284
INDIRF4
CNSTF4 1135869952
SUBF4
ASGNF4
line 1229
;1229:			}
LABELV $648
line 1230
;1230:			if (a < -180) {
ADDRLP4 284
INDIRF4
CNSTF4 3274964992
GEF4 $650
line 1231
;1231:				a += 360;
ADDRLP4 284
ADDRLP4 284
INDIRF4
CNSTF4 1135869952
ADDF4
ASGNF4
line 1232
;1232:			}
LABELV $650
line 1234
;1233:
;1234:			angle[i] = refdefAngles[i] + a * (1.0 - cg_trueLightning.value);
ADDRLP4 280
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 288
ADDP4
ADDRLP4 280
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 152
ADDP4
INDIRF4
ADDRLP4 284
INDIRF4
CNSTF4 1065353216
ADDRGP4 cg_trueLightning+8
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 1236
;1235:
;1236:			if (angle[i] < 0) {
ADDRLP4 280
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 288
ADDP4
INDIRF4
CNSTF4 0
GEF4 $653
line 1237
;1237:				angle[i] += 360;
ADDRLP4 308
ADDRLP4 280
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 288
ADDP4
ASGNP4
ADDRLP4 308
INDIRP4
ADDRLP4 308
INDIRP4
INDIRF4
CNSTF4 1135869952
ADDF4
ASGNF4
line 1238
;1238:			}
LABELV $653
line 1239
;1239:			if (angle[i] > 360) {
ADDRLP4 280
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 288
ADDP4
INDIRF4
CNSTF4 1135869952
LEF4 $655
line 1240
;1240:				angle[i] -= 360;
ADDRLP4 308
ADDRLP4 280
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 288
ADDP4
ASGNP4
ADDRLP4 308
INDIRP4
ADDRLP4 308
INDIRP4
INDIRF4
CNSTF4 1135869952
SUBF4
ASGNF4
line 1241
;1241:			}
LABELV $655
line 1242
;1242:		}
LABELV $645
line 1223
ADDRLP4 280
ADDRLP4 280
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 280
INDIRI4
CNSTI4 3
LTI4 $644
line 1244
;1243:
;1244:		AngleVectors( angle, forward, NULL, NULL );
ADDRLP4 288
ARGP4
ADDRLP4 164
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1245
;1245:	}
ADDRGP4 $642
JUMPV
LABELV $641
line 1246
;1246:	else { // !CPMA
line 1247
;1247:		AngleVectors( rightAngles, forward, NULL, NULL );
ADDRLP4 176
ARGP4
ADDRLP4 164
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1248
;1248:	}
LABELV $642
line 1250
;1249:
;1250:	VectorMA( muzzlePoint, 14, forward, muzzlePoint );
ADDRLP4 140
ADDRLP4 140
INDIRF4
ADDRLP4 164
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 140+4
ADDRLP4 140+4
INDIRF4
ADDRLP4 164+4
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 140+8
ADDRLP4 140+8
INDIRF4
ADDRLP4 164+8
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
line 1253
;1251:
;1252:	// project forward by the lightning range
;1253:	VectorMA( muzzlePoint, LIGHTNING_RANGE, forward, endPoint );
ADDRLP4 244
ADDRLP4 140
INDIRF4
ADDRLP4 164
INDIRF4
CNSTF4 1145044992
MULF4
ADDF4
ASGNF4
ADDRLP4 244+4
ADDRLP4 140+4
INDIRF4
ADDRLP4 164+4
INDIRF4
CNSTF4 1145044992
MULF4
ADDF4
ASGNF4
ADDRLP4 244+8
ADDRLP4 140+8
INDIRF4
ADDRLP4 164+8
INDIRF4
CNSTF4 1145044992
MULF4
ADDF4
ASGNF4
line 1256
;1254:
;1255:	// see if it hit a wall
;1256:	CG_Trace( &trace, muzzlePoint, vec3_origin, vec3_origin, endPoint, 
ADDRLP4 188
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 280
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 280
INDIRP4
ARGP4
ADDRLP4 280
INDIRP4
ARGP4
ADDRLP4 244
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 100663297
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 1260
;1257:		cent->currentState.number, MASK_SHOT );
;1258:
;1259:	// this is the endpoint
;1260:	VectorCopy( trace.endpos, beam.oldorigin );
ADDRLP4 0+84
ADDRLP4 188+12
INDIRB
ASGNB 12
line 1264
;1261:
;1262:	// use the provided origin, even though it may be slightly
;1263:	// different than the muzzle origin
;1264:	VectorCopy( origin, beam.origin );
ADDRLP4 0+68
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1266
;1265:
;1266:	beam.reType = RT_LIGHTNING;
ADDRLP4 0
CNSTI4 6
ASGNI4
line 1267
;1267:	beam.customShader = cgs.media.lightningShader;
ADDRLP4 0+112
ADDRGP4 cgs+150560+196
INDIRI4
ASGNI4
line 1268
;1268:	trap_R_AddRefEntityToScene( &beam );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1271
;1269:
;1270:	// add the impact flare if it hit something
;1271:	if ( trace.fraction < 1.0 ) {
ADDRLP4 188+8
INDIRF4
CNSTF4 1065353216
GEF4 $675
line 1275
;1272:		vec3_t	angles;
;1273:		vec3_t	dir;
;1274:
;1275:		VectorSubtract( beam.oldorigin, beam.origin, dir );
ADDRLP4 284
ADDRLP4 0+84
INDIRF4
ADDRLP4 0+68
INDIRF4
SUBF4
ASGNF4
ADDRLP4 284+4
ADDRLP4 0+84+4
INDIRF4
ADDRLP4 0+68+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 284+8
ADDRLP4 0+84+8
INDIRF4
ADDRLP4 0+68+8
INDIRF4
SUBF4
ASGNF4
line 1276
;1276:		VectorNormalize( dir );
ADDRLP4 284
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1278
;1277:
;1278:		memset(&beam, 0, sizeof(beam));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1279
;1279:		beam.hModel = cgs.media.lightningExplosionModel;
ADDRLP4 0+8
ADDRGP4 cgs+150560+496
INDIRI4
ASGNI4
line 1281
;1280:
;1281:		VectorMA( trace.endpos, -16, dir, beam.origin );
ADDRLP4 0+68
ADDRLP4 188+12
INDIRF4
ADDRLP4 284
INDIRF4
CNSTF4 3246391296
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 188+12+4
INDIRF4
ADDRLP4 284+4
INDIRF4
CNSTF4 3246391296
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 188+12+8
INDIRF4
ADDRLP4 284+8
INDIRF4
CNSTF4 3246391296
MULF4
ADDF4
ASGNF4
line 1284
;1282:
;1283:		// make a random orientation
;1284:		angles[0] = rand() % 360;
ADDRLP4 308
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 296
ADDRLP4 308
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 1285
;1285:		angles[1] = rand() % 360;
ADDRLP4 312
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 296+4
ADDRLP4 312
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 1286
;1286:		angles[2] = rand() % 360;
ADDRLP4 316
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 296+8
ADDRLP4 316
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 1287
;1287:		AnglesToAxis( angles, beam.axis );
ADDRLP4 296
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1288
;1288:		trap_R_AddRefEntityToScene( &beam );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1289
;1289:	}
LABELV $675
line 1290
;1290:}
LABELV $610
endproc CG_LightningBolt 320 28
proc CG_SpawnRailTrail 4 12
line 1301
;1291:
;1292:
;1293:/*
;1294:===============
;1295:CG_SpawnRailTrail
;1296:
;1297:Origin will be the exact tag point, which is slightly
;1298:different than the muzzle point used for determining hits.
;1299:===============
;1300:*/
;1301:static void CG_SpawnRailTrail( centity_t *cent, vec3_t origin ) {
line 1304
;1302:	clientInfo_t	*ci;
;1303:
;1304:	if ( cent->currentState.weapon != WP_RAILGUN ) {
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 7
EQI4 $709
line 1305
;1305:		return;
ADDRGP4 $708
JUMPV
LABELV $709
line 1307
;1306:	}
;1307:	if ( !cent->pe.railgunFlash ) {
ADDRFP4 0
INDIRP4
CNSTI4 1128
ADDP4
INDIRI4
CNSTI4 0
NEI4 $711
line 1308
;1308:		return;
ADDRGP4 $708
JUMPV
LABELV $711
line 1310
;1309:	}
;1310:	cent->pe.railgunFlash = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 1128
ADDP4
CNSTI4 1
ASGNI4
line 1311
;1311:	ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 1680
MULI4
ADDRGP4 cgs+41012
ADDP4
ASGNP4
line 1312
;1312:	CG_RailTrail( ci, origin, cent->pe.railgunImpact );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 1116
ADDP4
ARGP4
ADDRGP4 CG_RailTrail
CALLV
pop
line 1313
;1313:}
LABELV $708
endproc CG_SpawnRailTrail 4 12
proc CG_MachinegunSpinAngle 32 4
line 1323
;1314:
;1315:
;1316:/*
;1317:======================
;1318:CG_MachinegunSpinAngle
;1319:======================
;1320:*/
;1321:#define		SPIN_SPEED	0.9
;1322:#define		COAST_TIME	1000
;1323:static float	CG_MachinegunSpinAngle( centity_t *cent ) {
line 1328
;1324:	int		delta;
;1325:	float	angle;
;1326:	float	speed;
;1327:
;1328:	delta = cg.time - cent->pe.barrelTime;
ADDRLP4 0
ADDRGP4 cg+234764
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 1136
ADDP4
INDIRI4
SUBI4
ASGNI4
line 1329
;1329:	if ( cent->pe.barrelSpinning ) {
ADDRFP4 0
INDIRP4
CNSTI4 1140
ADDP4
INDIRI4
CNSTI4 0
EQI4 $716
line 1330
;1330:		angle = cent->pe.barrelAngle + delta * SPIN_SPEED;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 1132
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
CNSTF4 1063675494
MULF4
ADDF4
ASGNF4
line 1331
;1331:	} else {
ADDRGP4 $717
JUMPV
LABELV $716
line 1332
;1332:		if ( delta > COAST_TIME ) {
ADDRLP4 0
INDIRI4
CNSTI4 1000
LEI4 $718
line 1333
;1333:			delta = COAST_TIME;
ADDRLP4 0
CNSTI4 1000
ASGNI4
line 1334
;1334:		}
LABELV $718
line 1336
;1335:
;1336:		speed = 0.5 * ( SPIN_SPEED + (float)( COAST_TIME - delta ) / COAST_TIME );
ADDRLP4 8
CNSTI4 1000
ADDRLP4 0
INDIRI4
SUBI4
CVIF4 4
CNSTF4 981668463
MULF4
CNSTF4 1063675494
ADDF4
CNSTF4 1056964608
MULF4
ASGNF4
line 1337
;1337:		angle = cent->pe.barrelAngle + delta * speed;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 1132
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRLP4 8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1338
;1338:	}
LABELV $717
line 1340
;1339:
;1340:	if ( cent->pe.barrelSpinning == !(cent->currentState.eFlags & EF_FIRING) ) {
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
NEI4 $723
ADDRLP4 12
CNSTI4 1
ASGNI4
ADDRGP4 $724
JUMPV
LABELV $723
ADDRLP4 12
CNSTI4 0
ASGNI4
LABELV $724
ADDRLP4 16
INDIRP4
CNSTI4 1140
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
NEI4 $720
line 1341
;1341:		cent->pe.barrelTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 1136
ADDP4
ADDRGP4 cg+234764
INDIRI4
ASGNI4
line 1342
;1342:		cent->pe.barrelAngle = AngleMod( angle );
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 20
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1132
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
line 1343
;1343:		cent->pe.barrelSpinning = !!(cent->currentState.eFlags & EF_FIRING);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $727
ADDRLP4 24
CNSTI4 1
ASGNI4
ADDRGP4 $728
JUMPV
LABELV $727
ADDRLP4 24
CNSTI4 0
ASGNI4
LABELV $728
ADDRLP4 28
INDIRP4
CNSTI4 1140
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 1349
;1344:#ifdef MISSIONPACK
;1345:		if ( cent->currentState.weapon == WP_CHAINGUN && !cent->pe.barrelSpinning ) {
;1346:			trap_S_StartSound( NULL, cent->currentState.number, CHAN_WEAPON, trap_S_RegisterSound( "sound/weapons/vulcan/wvulwind.wav", qfalse ) );
;1347:		}
;1348:#endif
;1349:	}
LABELV $720
line 1351
;1350:
;1351:	return angle;
ADDRLP4 4
INDIRF4
RETF4
LABELV $714
endproc CG_MachinegunSpinAngle 32 4
proc CG_AddWeaponWithPowerups 0 4
line 1360
;1352:}
;1353:
;1354:
;1355:/*
;1356:========================
;1357:CG_AddWeaponWithPowerups
;1358:========================
;1359:*/
;1360:static void CG_AddWeaponWithPowerups( refEntity_t *gun, int powerups ) {
line 1362
;1361:	// add powerup effects
;1362:	if ( powerups & ( 1 << PW_INVIS ) ) {
ADDRFP4 4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $730
line 1363
;1363:		gun->customShader = cgs.media.invisShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+150560+464
INDIRI4
ASGNI4
line 1364
;1364:		trap_R_AddRefEntityToScene( gun );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1365
;1365:	} else {
ADDRGP4 $731
JUMPV
LABELV $730
line 1366
;1366:		trap_R_AddRefEntityToScene( gun );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1368
;1367:		
;1368:		if ( powerups & ( 1 << PW_BATTLESUIT ) ) {
ADDRFP4 4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $734
line 1369
;1369:			gun->customShader = cgs.media.battleWeaponShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+150560+476
INDIRI4
ASGNI4
line 1370
;1370:			trap_R_AddRefEntityToScene( gun );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1371
;1371:		}
LABELV $734
line 1372
;1372:		if ( powerups & ( 1 << PW_QUAD ) ) {
ADDRFP4 4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $738
line 1373
;1373:			gun->customShader = cgs.media.quadWeaponShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+150560+460
INDIRI4
ASGNI4
line 1374
;1374:			trap_R_AddRefEntityToScene( gun );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1375
;1375:		}
LABELV $738
line 1376
;1376:	}
LABELV $731
line 1377
;1377:}
LABELV $729
endproc CG_AddWeaponWithPowerups 0 4
data
align 4
LABELV $928
byte 4 0
bss
align 1
LABELV $929
skip 4
export CG_AddPlayerWeapon
code
proc CG_AddPlayerWeapon 528 28
line 1389
;1378:
;1379:
;1380:/*
;1381:=============
;1382:CG_AddPlayerWeapon
;1383:
;1384:Used for both the view weapon (ps is valid) and the world modelother character models (ps is NULL)
;1385:The main player will have this called for BOTH cases, so effects like light and
;1386:sound should only be done on the world model case.
;1387:=============
;1388:*/
;1389:void CG_AddPlayerWeapon( refEntity_t *parent, playerState_t *ps, centity_t *cent, int team, refEntity_t *gun ) {
line 1414
;1390:	refEntity_t		barrel;
;1391:	refEntity_t		flash;
;1392:	vec3_t			angles;
;1393:	weapon_t		weaponNum;
;1394:	weaponInfo_t	*weapon;
;1395:	centity_t		*nonPredictedCent;
;1396:	qboolean 		show_flash;
;1397:	qboolean 		mySelf;
;1398:	qboolean 		grapple_firing;
;1399:	vec3_t 			vr_controller_axis[3];
;1400:	const			clientInfo_t	*ci;
;1401:	int 			radius;
;1402:	vec3_t			gun_delta_axis;
;1403:	int				renderfx;
;1404:	int				vrFlags;
;1405:
;1406:	qboolean directView;
;1407:#ifdef USE_LASER_SIGHT
;1408:	qboolean laserNeeded;
;1409:#endif
;1410:#ifdef USE_WEAPON_WHEEL
;1411:	qboolean weapon_select;
;1412:#endif
;1413:
;1414:	mySelf = (cent->currentState.number == cg.predictedPlayerState.clientNum);
ADDRFP4 8
INDIRP4
INDIRI4
ADDRGP4 cg+234796+140
INDIRI4
NEI4 $746
ADDRLP4 392
CNSTI4 1
ASGNI4
ADDRGP4 $747
JUMPV
LABELV $746
ADDRLP4 392
CNSTI4 0
ASGNI4
LABELV $747
ADDRLP4 140
ADDRLP4 392
INDIRI4
ASGNI4
line 1415
;1415:	vrFlags = VR_get_ps_vrFlags( ps, mySelf );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 140
INDIRI4
ARGI4
ADDRLP4 396
ADDRGP4 VR_get_ps_vrFlags
CALLI4
ASGNI4
ADDRLP4 328
ADDRLP4 396
INDIRI4
ASGNI4
line 1418
;1416:
;1417:#ifdef USE_WEAPON_WHEEL
;1418:	weapon_select = (vrFlags & EF_WEAPON_WHEEL);
ADDRLP4 156
ADDRLP4 328
INDIRI4
CNSTI4 2
BANDI4
ASGNI4
line 1437
;1419:#endif
;1420:
;1421:
;1422:/*
;1423:#ifdef USE_WEAPON_WHEEL
;1424:#ifdef USE_NATIVE_HACK
;1425:	weapon_select = vrinf_o->weapon_select;
;1426:#endif
;1427:#ifdef USE_VR_QVM
;1428:	if ( mySelf )
;1429:		weapon_select = (cg.predictedPlayerState.vrFlags & EF_WEAPON_WHEEL);
;1430:	else
;1431:		weapon_select = (ps && (ps->vrFlags & EF_WEAPON_WHEEL));
;1432:#endif
;1433:#endif*/
;1434:
;1435:	//weapon_select = VR_get_weapon_select(ps, cent);
;1436:
;1437:	ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 164
ADDRFP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 1680
MULI4
ADDRGP4 cgs+41012
ADDP4
ASGNP4
line 1439
;1438:
;1439:	weaponNum = cent->currentState.weapon;
ADDRLP4 148
ADDRFP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ASGNI4
line 1440
;1440:	CG_RegisterWeapon( weaponNum );
ADDRLP4 148
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 1441
;1441:	weapon = &cg_weapons[weaponNum];
ADDRLP4 144
ADDRLP4 148
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 1443
;1442:
;1443:	directView = (!ps && !cg.renderingThirdPerson) || cg.renderingThirdPerson;
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $755
ADDRGP4 cg+234788
INDIRI4
CNSTI4 0
EQI4 $754
LABELV $755
ADDRGP4 cg+234788
INDIRI4
CNSTI4 0
EQI4 $752
LABELV $754
ADDRLP4 400
CNSTI4 1
ASGNI4
ADDRGP4 $753
JUMPV
LABELV $752
ADDRLP4 400
CNSTI4 0
ASGNI4
LABELV $753
ADDRLP4 332
ADDRLP4 400
INDIRI4
ASGNI4
line 1448
;1444:
;1445:	//=============================
;1446:	// add the weapon
;1447:	//=============================
;1448:	VectorCopy( parent->lightingOrigin, gun->lightingOrigin );
ADDRFP4 16
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1449
;1449:	gun->shadowPlane = parent->shadowPlane;
ADDRFP4 16
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1451
;1450:
;1451:	renderfx = parent->renderfx;
ADDRLP4 184
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1453
;1452:
;1453:	gun->renderfx = renderfx;
ADDRFP4 16
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 184
INDIRI4
ASGNI4
line 1456
;1454:
;1455:	// set custom shading for railgun refire rate
;1456:	if ( ps ) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $756
line 1457
;1457:		if ( cg.predictedPlayerState.weapon == WP_RAILGUN
ADDRGP4 cg+234796+144
INDIRI4
CNSTI4 7
NEI4 $758
ADDRGP4 cg+234796+148
INDIRI4
CNSTI4 3
NEI4 $758
line 1458
;1458:			&& cg.predictedPlayerState.weaponstate == WEAPON_FIRING ) {
line 1460
;1459:			float	f;
;1460:			f = ( 1.0f - ((float)cg.predictedPlayerState.weaponTime / 1500.0f) );//q3e
ADDRLP4 404
CNSTF4 1065353216
ADDRGP4 cg+234796+44
INDIRI4
CVIF4 4
CNSTF4 976143166
MULF4
SUBF4
ASGNF4
line 1462
;1461:			//int scale = 255 * (cg.time - cent->pe.railFireTime) / 1500;
;1462:			gun->shaderRGBA[0] = 255 * ci->color1[0] * f; // optimized, to try : ( ci->color1[0] * f ) >> 8
ADDRLP4 412
ADDRLP4 164
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ADDRLP4 404
INDIRF4
MULF4
ASGNF4
ADDRLP4 416
CNSTF4 1325400064
ASGNF4
ADDRLP4 412
INDIRF4
ADDRLP4 416
INDIRF4
LTF4 $767
ADDRLP4 408
ADDRLP4 412
INDIRF4
ADDRLP4 416
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $768
JUMPV
LABELV $767
ADDRLP4 408
ADDRLP4 412
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $768
ADDRFP4 16
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 408
INDIRU4
CVUU1 4
ASGNU1
line 1463
;1463:			gun->shaderRGBA[1] = 255 * ci->color1[1] * f;
ADDRLP4 424
ADDRLP4 164
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ADDRLP4 404
INDIRF4
MULF4
ASGNF4
ADDRLP4 428
CNSTF4 1325400064
ASGNF4
ADDRLP4 424
INDIRF4
ADDRLP4 428
INDIRF4
LTF4 $770
ADDRLP4 420
ADDRLP4 424
INDIRF4
ADDRLP4 428
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $771
JUMPV
LABELV $770
ADDRLP4 420
ADDRLP4 424
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $771
ADDRFP4 16
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 420
INDIRU4
CVUU1 4
ASGNU1
line 1464
;1464:			gun->shaderRGBA[2] = 255 * ci->color1[2] * f;
ADDRLP4 436
ADDRLP4 164
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ADDRLP4 404
INDIRF4
MULF4
ASGNF4
ADDRLP4 440
CNSTF4 1325400064
ASGNF4
ADDRLP4 436
INDIRF4
ADDRLP4 440
INDIRF4
LTF4 $773
ADDRLP4 432
ADDRLP4 436
INDIRF4
ADDRLP4 440
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $774
JUMPV
LABELV $773
ADDRLP4 432
ADDRLP4 436
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $774
ADDRFP4 16
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 432
INDIRU4
CVUU1 4
ASGNU1
line 1465
;1465:		} else {
ADDRGP4 $759
JUMPV
LABELV $758
line 1466
;1466:			gun->shaderRGBA[0] = 255 * ci->color1[0];
ADDRLP4 408
ADDRLP4 164
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 412
CNSTF4 1325400064
ASGNF4
ADDRLP4 408
INDIRF4
ADDRLP4 412
INDIRF4
LTF4 $776
ADDRLP4 404
ADDRLP4 408
INDIRF4
ADDRLP4 412
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $777
JUMPV
LABELV $776
ADDRLP4 404
ADDRLP4 408
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $777
ADDRFP4 16
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 404
INDIRU4
CVUU1 4
ASGNU1
line 1467
;1467:			gun->shaderRGBA[1] = 255 * ci->color1[1];
ADDRLP4 420
ADDRLP4 164
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 424
CNSTF4 1325400064
ASGNF4
ADDRLP4 420
INDIRF4
ADDRLP4 424
INDIRF4
LTF4 $779
ADDRLP4 416
ADDRLP4 420
INDIRF4
ADDRLP4 424
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $780
JUMPV
LABELV $779
ADDRLP4 416
ADDRLP4 420
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $780
ADDRFP4 16
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 416
INDIRU4
CVUU1 4
ASGNU1
line 1468
;1468:			gun->shaderRGBA[2] = 255 * ci->color1[2];
ADDRLP4 432
ADDRLP4 164
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 436
CNSTF4 1325400064
ASGNF4
ADDRLP4 432
INDIRF4
ADDRLP4 436
INDIRF4
LTF4 $782
ADDRLP4 428
ADDRLP4 432
INDIRF4
ADDRLP4 436
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $783
JUMPV
LABELV $782
ADDRLP4 428
ADDRLP4 432
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $783
ADDRFP4 16
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 428
INDIRU4
CVUU1 4
ASGNU1
line 1469
;1469:			if ( gun->shaderRGBA[1] < 64 )
ADDRFP4 16
INDIRP4
CNSTI4 117
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
GEI4 $784
line 1470
;1470:				gun->shaderRGBA[1] = 64;
ADDRFP4 16
INDIRP4
CNSTI4 117
ADDP4
CNSTU1 64
ASGNU1
LABELV $784
line 1471
;1471:		}
LABELV $759
line 1472
;1472:		gun->shaderRGBA[3] = 255;
ADDRFP4 16
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 1473
;1473:	}
LABELV $756
line 1475
;1474:
;1475:	gun->hModel = weapon->weaponModel;
ADDRFP4 16
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 144
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ASGNI4
line 1476
;1476:	if ( !gun->hModel ) {
ADDRFP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 0
NEI4 $786
line 1477
;1477:		return;
ADDRGP4 $742
JUMPV
LABELV $786
line 1480
;1478:	}
;1479:
;1480:	if ( !ps ) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $788
line 1482
;1481:		// add weapon ready sound
;1482:		cent->pe.lightningFiring = qfalse;
ADDRFP4 8
INDIRP4
CNSTI4 1112
ADDP4
CNSTI4 0
ASGNI4
line 1483
;1483:		if ( (cent->currentState.eFlags & EF_FIRING) && weapon->firingSound ) {
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $790
ADDRLP4 144
INDIRP4
CNSTI4 128
ADDP4
INDIRI4
CNSTI4 0
EQI4 $790
line 1485
;1484:			// lightning gun and gauntlet make a different sound when fire is held down
;1485:			trap_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->firingSound );
ADDRLP4 404
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 404
INDIRP4
INDIRI4
ARGI4
ADDRLP4 404
INDIRP4
CNSTI4 1212
ADDP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 144
INDIRP4
CNSTI4 128
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_AddLoopingSound
CALLV
pop
line 1486
;1486:			cent->pe.lightningFiring = qtrue;
ADDRFP4 8
INDIRP4
CNSTI4 1112
ADDP4
CNSTI4 1
ASGNI4
line 1487
;1487:		}
ADDRGP4 $791
JUMPV
LABELV $790
line 1488
;1488:		else if ( weapon->readySound ) {
ADDRLP4 144
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
CNSTI4 0
EQI4 $792
line 1489
;1489:			trap_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->readySound );
ADDRLP4 404
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 404
INDIRP4
INDIRI4
ARGI4
ADDRLP4 404
INDIRP4
CNSTI4 1212
ADDP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 144
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_AddLoopingSound
CALLV
pop
line 1490
;1490:		}
LABELV $792
LABELV $791
line 1491
;1491:	}
LABELV $788
line 1498
;1492:
;1493:	// =========================================================
;1494:	// We now have weapon origin and axis
;1495:	// ( gun->origin & gun->axis )
;1496:	// =========================================================
;1497:#ifdef USE_VR
;1498:	if ( cg.vr_controller_type >= 2 )
ADDRGP4 cg+282972
INDIRI4
CNSTI4 2
LTI4 $794
line 1499
;1499:	{
line 1501
;1500:		orientation_t lerped;
;1501:		trap_R_LerpTag( &lerped, parent->hModel, parent->oldframe, parent->frame,
ADDRLP4 404
ARGP4
ADDRLP4 452
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 452
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRLP4 452
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
ARGI4
ADDRLP4 452
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
ARGI4
CNSTF4 1065353216
ADDRLP4 452
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
SUBF4
ARGF4
ADDRGP4 $797
ARGP4
ADDRGP4 trap_R_LerpTag
CALLI4
pop
line 1503
;1502:			1.0 - parent->backlerp, "tag_weapon" );
;1503:		VectorCopy( parent->origin, gun->origin );
ADDRFP4 16
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 1505
;1504:
;1505:		VectorMA( gun->origin, lerped.origin[0], parent->axis[0], gun->origin );
ADDRLP4 456
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 456
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 456
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 404
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 460
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 460
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 460
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 404
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 464
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 464
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 464
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ADDRLP4 404
INDIRF4
MULF4
ADDF4
ASGNF4
line 1508
;1506:
;1507:		// Make weapon appear left-handed for 2 and centered for 3
;1508:		if (ps && cg_drawGun.integer == 2)
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $798
ADDRGP4 cg_drawGun+12
INDIRI4
CNSTI4 2
NEI4 $798
line 1509
;1509:			VectorMA( gun->origin, -lerped.origin[1], parent->axis[1], gun->origin );
ADDRLP4 468
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 468
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 468
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRLP4 404+4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 472
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 472
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 472
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ADDRLP4 404+4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 476
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 476
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 476
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
ADDRLP4 404+4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRGP4 $799
JUMPV
LABELV $798
line 1510
;1510:		else if (!ps || cg_drawGun.integer != 3)
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $807
ADDRGP4 cg_drawGun+12
INDIRI4
CNSTI4 3
EQI4 $804
LABELV $807
line 1511
;1511:			VectorMA( gun->origin, lerped.origin[1], parent->axis[1], gun->origin );
ADDRLP4 480
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 480
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 480
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRLP4 404+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 484
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 484
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 484
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ADDRLP4 404+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 488
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 488
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 488
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
ADDRLP4 404+4
INDIRF4
MULF4
ADDF4
ASGNF4
LABELV $804
LABELV $799
line 1513
;1512:
;1513:		VectorMA( gun->origin, lerped.origin[2], parent->axis[2], gun->origin );
ADDRLP4 492
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 492
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 492
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
ADDRLP4 404+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 496
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 496
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 496
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
ADDRLP4 404+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 500
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 500
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 500
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
ADDRLP4 404+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1515
;1514:
;1515:		MatrixMultiply( lerped.axis, ((refEntity_t *)parent)->axis, gun->axis );
ADDRLP4 404+12
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRFP4 16
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 MatrixMultiply
CALLV
pop
line 1516
;1516:	}
LABELV $794
line 1519
;1517:
;1518:	// copy infos in our structures, overwright the axis (from cg_player.c) who only contained the ROLL axis when 3DOF
;1519:	if ( mySelf ) {
ADDRLP4 140
INDIRI4
CNSTI4 0
EQI4 $815
line 1521
;1520:		//VectorCopy( gun->origin, client_weapon.origin ); // no more used, keep it cause it could be usefull
;1521:		AxisCopy( gun->axis, client_weapon.axis );
ADDRFP4 16
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 client_weapon
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 1522
;1522:	}
LABELV $815
line 1524
;1523:
;1524:	gun->backlerp = parent->backlerp;
ADDRFP4 16
INDIRP4
CNSTI4 100
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
ASGNF4
line 1530
;1525:#else
;1526:	CG_PositionEntityOnTag( gun, parent, parent->hModel, "tag_weapon" );
;1527:#endif
;1528:
;1529:#ifdef USE_WEAPON_WHEEL
;1530:	if ( weapon_select && directView )
ADDRLP4 156
INDIRI4
CNSTI4 0
EQI4 $817
ADDRLP4 332
INDIRI4
CNSTI4 0
EQI4 $817
line 1531
;1531:		CG_DrawWeaponSelector( cent );
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 CG_DrawWeaponSelector
CALLV
pop
LABELV $817
line 1533
;1532:
;1533:	if ( !weapon_select )
ADDRLP4 156
INDIRI4
CNSTI4 0
NEI4 $819
line 1535
;1534:#endif
;1535:		CG_AddWeaponWithPowerups( gun, cent->currentState.powerups );
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddWeaponWithPowerups
CALLV
pop
LABELV $819
line 1539
;1536:
;1537:	//=============================
;1538:	// make sure we aren't looking at cg.predictedPlayerEntity for LG
;1539:	nonPredictedCent = &cg_entities[cent->currentState.number];
ADDRLP4 152
ADDRFP4 8
INDIRP4
INDIRI4
CNSTI4 1236
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 1544
;1540:
;1541:	// if the index of the nonPredictedCent is not the same as the clientNum
;1542:	// then this is a fake player (like on the single player podiums), so
;1543:	// go ahead and use the cent
;1544:	if ( (nonPredictedCent - cg_entities) != cent->currentState.clientNum ) {
ADDRLP4 152
INDIRP4
CVPU4 4
ADDRGP4 cg_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 1236
DIVI4
ADDRFP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
EQI4 $821
line 1545
;1545:		nonPredictedCent = cent;
ADDRLP4 152
ADDRFP4 8
INDIRP4
ASGNP4
line 1546
;1546:	}
LABELV $821
line 1551
;1547:
;1548:	//=============================
;1549:	// add the spinning barrel
;1550:	//=============================
;1551:	if ( weapon->barrelModel && !weapon_select ) {
ADDRLP4 144
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 0
EQI4 $823
ADDRLP4 156
INDIRI4
CNSTI4 0
NEI4 $823
line 1555
;1552:		// no barrel if weapon is grapplingHook and it's firing: this makes the grapple disappear when launched
;1553:#ifdef USE_GRAPPLING_HOOK
;1554:		// detect if grapple had been fire
;1555:		grapple_firing = (( weaponNum == WP_GRAPPLING_HOOK ) && (nonPredictedCent->currentState.eFlags & EF_FIRING));
ADDRLP4 148
INDIRI4
CNSTI4 10
NEI4 $826
ADDRLP4 152
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $826
ADDRLP4 404
CNSTI4 1
ASGNI4
ADDRGP4 $827
JUMPV
LABELV $826
ADDRLP4 404
CNSTI4 0
ASGNI4
LABELV $827
ADDRLP4 384
ADDRLP4 404
INDIRI4
ASGNI4
line 1560
;1556:#else
;1557:		grapple_firing = qfalse;
;1558:#endif
;1559:
;1560:		if ( !grapple_firing ) {
ADDRLP4 384
INDIRI4
CNSTI4 0
NEI4 $828
line 1561
;1561:			memset( &barrel, 0, sizeof(barrel) );
ADDRLP4 188
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1562
;1562:			VectorCopy( parent->lightingOrigin, barrel.lightingOrigin );
ADDRLP4 188+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1563
;1563:			barrel.shadowPlane = parent->shadowPlane;
ADDRLP4 188+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1564
;1564:			barrel.renderfx = renderfx;
ADDRLP4 188+4
ADDRLP4 184
INDIRI4
ASGNI4
line 1566
;1565:
;1566:			barrel.hModel = weapon->barrelModel;
ADDRLP4 188+8
ADDRLP4 144
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ASGNI4
line 1567
;1567:			angles[YAW] = 0;
ADDRLP4 172+4
CNSTF4 0
ASGNF4
line 1568
;1568:			angles[PITCH] = 0;
ADDRLP4 172
CNSTF4 0
ASGNF4
line 1569
;1569:			angles[ROLL] = CG_MachinegunSpinAngle(cent);
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 408
ADDRGP4 CG_MachinegunSpinAngle
CALLF4
ASGNF4
ADDRLP4 172+8
ADDRLP4 408
INDIRF4
ASGNF4
line 1570
;1570:			AnglesToAxis(angles, barrel.axis);
ADDRLP4 172
ARGP4
ADDRLP4 188+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1572
;1571:
;1572:			CG_PositionRotatedEntityOnTag( &barrel, gun, weapon->weaponModel, "tag_barrel" );
ADDRLP4 188
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 144
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRGP4 $837
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 1574
;1573:
;1574:			CG_AddWeaponWithPowerups( &barrel, cent->currentState.powerups );
ADDRLP4 188
ARGP4
ADDRFP4 8
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddWeaponWithPowerups
CALLV
pop
line 1575
;1575:		}
LABELV $828
line 1576
;1576:	}
LABELV $823
line 1581
;1577:
;1578:	//=============================
;1579:	// add the flash
;1580:	//=============================
;1581:	memset(&flash, 0, sizeof(flash));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1582
;1582:	flash.hModel = weapon->flashModel;
ADDRLP4 0+8
ADDRLP4 144
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ASGNI4
line 1583
;1583:	if (!flash.hModel) {//if there is no weapon muzzle
ADDRLP4 0+8
INDIRI4
CNSTI4 0
NEI4 $839
line 1584
;1584:		if ( mySelf) {
ADDRLP4 140
INDIRI4
CNSTI4 0
EQI4 $742
line 1585
;1585:			VectorCopy( gun->origin, client_weapon.muzzle );//not tested
ADDRGP4 client_weapon+36
ADDRFP4 16
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 1586
;1586:		}
line 1587
;1587:		return;
ADDRGP4 $742
JUMPV
LABELV $839
line 1591
;1588:	}
;1589:
;1590:	// fixme: quick fix, or the lightning gun always appeared
;1591:	if ( (weaponNum == WP_LIGHTNING) && !(nonPredictedCent->currentState.eFlags & EF_FIRING) )
ADDRLP4 148
INDIRI4
CNSTI4 6
NEI4 $845
ADDRLP4 152
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
NEI4 $845
line 1592
;1592:		return;
ADDRGP4 $742
JUMPV
LABELV $845
line 1595
;1593:
;1594:	// no continuous flash with grappling hook
;1595:	if ( ( weaponNum == WP_LIGHTNING || weaponNum == WP_GAUNTLET /*|| weaponNum == WP_GRAPPLING_HOOK*/)
ADDRLP4 148
INDIRI4
CNSTI4 6
EQI4 $849
ADDRLP4 148
INDIRI4
CNSTI4 1
NEI4 $847
LABELV $849
ADDRLP4 152
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $847
line 1597
;1596:		&& ( nonPredictedCent->currentState.eFlags & EF_FIRING) )
;1597:	{
line 1599
;1598:		// continuous flash
;1599:		show_flash = qtrue;
ADDRLP4 160
CNSTI4 1
ASGNI4
line 1600
;1600:	} else {
ADDRGP4 $848
JUMPV
LABELV $847
line 1602
;1601:		// impulse flash
;1602:		show_flash = qtrue;
ADDRLP4 160
CNSTI4 1
ASGNI4
line 1603
;1603:		if ( cg.time - cent->muzzleFlashTime > MUZZLE_FLASH_TIME ) {
ADDRGP4 cg+234764
INDIRI4
ADDRFP4 8
INDIRP4
CNSTI4 920
ADDP4
INDIRI4
SUBI4
CNSTI4 20
LEI4 $850
line 1604
;1604:			show_flash = qfalse;
ADDRLP4 160
CNSTI4 0
ASGNI4
line 1605
;1605:		}
LABELV $850
line 1606
;1606:	}
LABELV $848
line 1608
;1607:
;1608:	if ( show_flash ) {
ADDRLP4 160
INDIRI4
CNSTI4 0
EQI4 $853
line 1609
;1609:		VectorCopy( parent->lightingOrigin, flash.lightingOrigin );
ADDRLP4 0+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1610
;1610:		flash.shadowPlane = parent->shadowPlane;
ADDRLP4 0+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1611
;1611:		flash.renderfx = renderfx;
ADDRLP4 0+4
ADDRLP4 184
INDIRI4
ASGNI4
line 1613
;1612:
;1613:		angles[YAW] = 0;
ADDRLP4 172+4
CNSTF4 0
ASGNF4
line 1614
;1614:		angles[PITCH] = 0;
ADDRLP4 172
CNSTF4 0
ASGNF4
line 1615
;1615:		angles[ROLL] = crandom() * 10;
ADDRLP4 408
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 172+8
ADDRLP4 408
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1101004800
MULF4
ASGNF4
line 1616
;1616:		AnglesToAxis( angles, flash.axis );
ADDRLP4 172
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1619
;1617:
;1618:		// colorize the railgun blast
;1619:		if ( weaponNum == WP_RAILGUN ) {
ADDRLP4 148
INDIRI4
CNSTI4 7
NEI4 $861
line 1620
;1620:			flash.shaderRGBA[0] = 255 * ci->color1[0];
ADDRLP4 416
ADDRLP4 164
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 420
CNSTF4 1325400064
ASGNF4
ADDRLP4 416
INDIRF4
ADDRLP4 420
INDIRF4
LTF4 $865
ADDRLP4 412
ADDRLP4 416
INDIRF4
ADDRLP4 420
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $866
JUMPV
LABELV $865
ADDRLP4 412
ADDRLP4 416
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $866
ADDRLP4 0+116
ADDRLP4 412
INDIRU4
CVUU1 4
ASGNU1
line 1621
;1621:			flash.shaderRGBA[1] = 255 * ci->color1[1];
ADDRLP4 428
ADDRLP4 164
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 432
CNSTF4 1325400064
ASGNF4
ADDRLP4 428
INDIRF4
ADDRLP4 432
INDIRF4
LTF4 $870
ADDRLP4 424
ADDRLP4 428
INDIRF4
ADDRLP4 432
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $871
JUMPV
LABELV $870
ADDRLP4 424
ADDRLP4 428
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $871
ADDRLP4 0+116+1
ADDRLP4 424
INDIRU4
CVUU1 4
ASGNU1
line 1622
;1622:			flash.shaderRGBA[2] = 255 * ci->color1[2];
ADDRLP4 440
ADDRLP4 164
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 444
CNSTF4 1325400064
ASGNF4
ADDRLP4 440
INDIRF4
ADDRLP4 444
INDIRF4
LTF4 $875
ADDRLP4 436
ADDRLP4 440
INDIRF4
ADDRLP4 444
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $876
JUMPV
LABELV $875
ADDRLP4 436
ADDRLP4 440
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $876
ADDRLP4 0+116+2
ADDRLP4 436
INDIRU4
CVUU1 4
ASGNU1
line 1623
;1623:			flash.shaderRGBA[3] = 255;
ADDRLP4 0+116+3
CNSTU1 255
ASGNU1
line 1624
;1624:		}
LABELV $861
line 1625
;1625:	}
LABELV $853
line 1627
;1626:
;1627:	CG_PositionRotatedEntityOnTag( &flash, gun, weapon->weaponModel, "tag_flash" );
ADDRLP4 0
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 144
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRGP4 $879
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 1633
;1628:
;1629:	//=========================================================
;1630:	//=   We now have the weapon muzzle point: flash.origin   =
;1631:	//=========================================================
;1632:#ifdef USE_VR
;1633:	if ( mySelf && cg.vr_controller_type ) {
ADDRLP4 140
INDIRI4
CNSTI4 0
EQI4 $880
ADDRGP4 cg+282972
INDIRI4
CNSTI4 0
EQI4 $880
line 1634
;1634:		VectorCopy(flash.origin, client_weapon.muzzle);
ADDRGP4 client_weapon+36
ADDRLP4 0+68
INDIRB
ASGNB 12
line 1635
;1635:	}
LABELV $880
line 1644
;1636:#endif
;1637:
;1638:#ifdef USE_NATIVE_HACK
;1639:	if ( mySelf && cg.vr_controller_type == 1 ) {
;1640:		VectorCopy(client_weapon.axis[0], client_weapon.vr_controller_3axis_smooth);// GUNNM needed ?
;1641:	}
;1642:#endif
;1643:
;1644:	if ( mySelf && (ps || cg.renderingThirdPerson) )
ADDRLP4 140
INDIRI4
CNSTI4 0
EQI4 $885
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $888
ADDRGP4 cg+234788
INDIRI4
CNSTI4 0
EQI4 $885
LABELV $888
line 1645
;1645:	{
line 1646
;1646:		if ( cg.vr_controller_type /*== 1*/ )
ADDRGP4 cg+282972
INDIRI4
CNSTI4 0
EQI4 $889
line 1647
;1647:		{
line 1648
;1648:			if (cg.refdefVR_RightAngles[0] != 0.0f) {
ADDRGP4 cg+237184
INDIRF4
CNSTF4 0
EQF4 $892
line 1649
;1649:				AnglesToAxis(cg.refdefVR_RightAngles, vr_controller_axis);
ADDRGP4 cg+237184
ARGP4
ADDRLP4 336
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1650
;1650:				VectorSubtract(gun->axis[0], vr_controller_axis[0], gun_delta_axis);
ADDRLP4 408
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 372
ADDRLP4 408
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 336
INDIRF4
SUBF4
ASGNF4
ADDRLP4 372+4
ADDRLP4 408
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 336+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 372+8
ADDRFP4 16
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ADDRLP4 336+8
INDIRF4
SUBF4
ASGNF4
line 1651
;1651:			}
LABELV $892
line 1653
;1652:			// keep in client_weapon struct for later use
;1653:			AnglesToAxis(cg.refdefVR_RightAngles, vr_controller_axis);
ADDRGP4 cg+237184
ARGP4
ADDRLP4 336
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1654
;1654:			VectorAdd(vr_controller_axis[0], gun_delta_axis, client_weapon.vr_controller_3axis_smooth);
ADDRGP4 client_weapon+48
ADDRLP4 336
INDIRF4
ADDRLP4 372
INDIRF4
ADDF4
ASGNF4
ADDRGP4 client_weapon+48+4
ADDRLP4 336+4
INDIRF4
ADDRLP4 372+4
INDIRF4
ADDF4
ASGNF4
ADDRGP4 client_weapon+48+8
ADDRLP4 336+8
INDIRF4
ADDRLP4 372+8
INDIRF4
ADDF4
ASGNF4
line 1655
;1655:		}
LABELV $889
line 1672
;1656:
;1657:		//===================================
;1658:		// send laser beam origin and angles to client
;1659:		// in order to fire from weapon muzzle point in 'game' VM
;1660:		// and for intersection with virtual menu (cursor)
;1661:		//===================================
;1662:#ifdef USE_NATIVE_HACK
;1663:		// keep laser beam origin
;1664:		VectorScale(flash.origin, 1000.0f, vrinfo->ray_origin);
;1665:
;1666:		// keep laser beam orientation
;1667:		if (cent->currentState.eFlags & EF_TALK)
;1668:			VectorCopy(gun->axis[0], vrinfo->ray_orientation);
;1669:#endif
;1670:#ifdef USE_VR_QVM
;1671:		// keep laser beam origin
;1672:		trap_VR_keepRightMuzzlePos( (int)(flash.origin[0] * 1000.0f), (int)(flash.origin[1] * 1000.0f), (int)(flash.origin[2] * 1000.0f) );
ADDRLP4 0+68
INDIRF4
CNSTF4 1148846080
MULF4
CVFI4 4
ARGI4
ADDRLP4 0+68+4
INDIRF4
CNSTF4 1148846080
MULF4
CVFI4 4
ARGI4
ADDRLP4 0+68+8
INDIRF4
CNSTF4 1148846080
MULF4
CVFI4 4
ARGI4
ADDRGP4 trap_VR_keepRightMuzzlePos
CALLV
pop
line 1675
;1673:
;1674:		// keep laser beam orientation
;1675:		if (cent->currentState.eFlags & EF_TALK)
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $915
line 1676
;1676:			trap_VR_KeepRightAngles(gun->axis[0]);
ADDRFP4 16
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 trap_VR_KeepRightAngles
CALLV
pop
LABELV $915
line 1678
;1677:#endif
;1678:	} // myself
LABELV $885
line 1684
;1679:
;1680:#ifdef USE_LASER_SIGHT
;1681:	//===================================
;1682:	//		Draw the laser beam
;1683:	//===================================
;1684:	laserNeeded = CG_LaserNeeded( cent, qfalse );
ADDRFP4 8
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 408
ADDRGP4 CG_LaserNeeded
CALLI4
ASGNI4
ADDRLP4 168
ADDRLP4 408
INDIRI4
ASGNI4
line 1686
;1685:
;1686:	if ( laserNeeded && mySelf && cg.vr_controller_type ) {
ADDRLP4 168
INDIRI4
CNSTI4 0
EQI4 $917
ADDRLP4 140
INDIRI4
CNSTI4 0
EQI4 $917
ADDRGP4 cg+282972
INDIRI4
CNSTI4 0
EQI4 $917
line 1687
;1687:		if ( cg.renderingThirdPerson  )
ADDRGP4 cg+234788
INDIRI4
CNSTI4 0
EQI4 $920
line 1688
;1688:			laserNeeded = qtrue;
ADDRLP4 168
CNSTI4 1
ASGNI4
ADDRGP4 $921
JUMPV
LABELV $920
line 1689
;1689:		else if ( !ps && !cg.renderingThirdPerson )
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $923
ADDRGP4 cg+234788
INDIRI4
CNSTI4 0
NEI4 $923
line 1690
;1690:			laserNeeded = qfalse;
ADDRLP4 168
CNSTI4 0
ASGNI4
LABELV $923
LABELV $921
line 1691
;1691:	}
LABELV $917
line 1693
;1692:
;1693:	if ( laserNeeded )
ADDRLP4 168
INDIRI4
CNSTI4 0
EQI4 $926
line 1694
;1694:	{
line 1704
;1695:		trace_t trace;
;1696:		static qboolean lb_init = qfalse;
;1697:		static byte		client_beam_RGBA[4];
;1698:		byte			colour[4];
;1699:		vec3_t 			ctrl_axis;
;1700:		vec3_t 			endpos;
;1701:#ifdef USE_VR_QVM
;1702:		char 			lbStabstr[1];
;1703:		qboolean 		laserBeamStabilized;
;1704:		trap_Cvar_VariableStringBuffer("laserBeamStabilized", lbStabstr, sizeof(lbStabstr));
ADDRGP4 $930
ARGP4
ADDRLP4 440
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 trap_Cvar_VariableStringBuffer
CALLV
pop
line 1705
;1705:		laserBeamStabilized = atof(lbStabstr);
ADDRLP4 440
ARGP4
ADDRLP4 504
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 500
ADDRLP4 504
INDIRF4
CVFI4 4
ASGNI4
line 1706
;1706:		if ( laserBeamStabilized && mySelf )
ADDRLP4 500
INDIRI4
CNSTI4 0
EQI4 $931
ADDRLP4 140
INDIRI4
CNSTI4 0
EQI4 $931
line 1707
;1707:			VectorCopy(client_weapon.vr_controller_3axis_smooth, ctrl_axis);
ADDRLP4 416
ADDRGP4 client_weapon+48
INDIRB
ASGNB 12
ADDRGP4 $932
JUMPV
LABELV $931
line 1710
;1708:		else
;1709:#endif
;1710:			VectorCopy(gun->axis[PITCH], ctrl_axis);
ADDRLP4 416
ADDRFP4 16
INDIRP4
CNSTI4 28
ADDP4
INDIRB
ASGNB 12
LABELV $932
line 1717
;1711:
;1712:		//=============================
;1713:		// find the target point
;1714:		// (endpoint of the laser beam)
;1715:		//=============================
;1716:		// in menu, the endpoint is the menu plane depth
;1717:		if ((cent->currentState.eFlags & EF_TALK) && mySelf && cgs.cursorZ != 0)
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $934
ADDRLP4 140
INDIRI4
CNSTI4 0
EQI4 $934
ADDRGP4 cgs+151704
INDIRF4
CNSTF4 0
EQF4 $934
line 1718
;1718:			VectorMA(client_weapon.muzzle, cgs.cursorZ, ctrl_axis, endpos);
ADDRLP4 428
ADDRGP4 client_weapon+36
INDIRF4
ADDRLP4 416
INDIRF4
ADDRGP4 cgs+151704
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 428+4
ADDRGP4 client_weapon+36+4
INDIRF4
ADDRLP4 416+4
INDIRF4
ADDRGP4 cgs+151704
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 428+8
ADDRGP4 client_weapon+36+8
INDIRF4
ADDRLP4 416+8
INDIRF4
ADDRGP4 cgs+151704
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRGP4 $935
JUMPV
LABELV $934
line 1720
;1719:		else
;1720:			VectorMA(client_weapon.muzzle, /*maxdist*/4096, ctrl_axis, endpos);
ADDRLP4 428
ADDRGP4 client_weapon+36
INDIRF4
ADDRLP4 416
INDIRF4
CNSTF4 1166016512
MULF4
ADDF4
ASGNF4
ADDRLP4 428+4
ADDRGP4 client_weapon+36+4
INDIRF4
ADDRLP4 416+4
INDIRF4
CNSTF4 1166016512
MULF4
ADDF4
ASGNF4
ADDRLP4 428+8
ADDRGP4 client_weapon+36+8
INDIRF4
ADDRLP4 416+8
INDIRF4
CNSTF4 1166016512
MULF4
ADDF4
ASGNF4
LABELV $935
line 1722
;1721:
;1722:		CG_Trace(&trace, client_weapon.muzzle, NULL, NULL, endpos, cg.predictedPlayerState.clientNum, MASK_SOLID);
ADDRLP4 444
ARGP4
ADDRGP4 client_weapon+36
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 428
ARGP4
ADDRGP4 cg+234796+140
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 1724
;1723:
;1724:		if ( mySelf ) {
ADDRLP4 140
INDIRI4
CNSTI4 0
EQI4 $961
line 1725
;1725:			if (!lb_init) {
ADDRGP4 $928
INDIRI4
CNSTI4 0
NEI4 $962
line 1726
;1726:				char *laserBeamRGBA = "";
ADDRLP4 508
ADDRGP4 $965
ASGNP4
line 1727
;1727:				trap_Cvar_VariableStringBuffer("laserBeamRGBA", laserBeamRGBA, sizeof(char) * 9);
ADDRGP4 $966
ARGP4
ADDRLP4 508
INDIRP4
ARGP4
CNSTI4 9
ARGI4
ADDRGP4 trap_Cvar_VariableStringBuffer
CALLV
pop
line 1728
;1728:				hex_to_color( laserBeamRGBA, client_beam_RGBA );
ADDRLP4 508
INDIRP4
ARGP4
ADDRGP4 $929
ARGP4
ADDRGP4 hex_to_color
CALLV
pop
line 1729
;1729:				lb_init = qtrue;
ADDRGP4 $928
CNSTI4 1
ASGNI4
line 1730
;1730:			}
line 1731
;1731:		} else {
ADDRGP4 $962
JUMPV
LABELV $961
line 1732
;1732:			memcpy(client_beam_RGBA, ci->c3RGBA, sizeof(client_beam_RGBA));
ADDRGP4 $929
ARGP4
ADDRLP4 164
INDIRP4
CNSTI4 1656
ADDP4
ARGP4
CNSTI4 4
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 1734
;1733:			// TODO check other players laser color in multiplayer game
;1734:		}
LABELV $962
line 1736
;1735:
;1736:		memcpy(colour, client_beam_RGBA, sizeof(colour) );
ADDRLP4 412
ARGP4
ADDRGP4 $929
ARGP4
CNSTI4 4
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 1738
;1737:
;1738:		if ( cg_debugWeaponAiming.integer ) {
ADDRGP4 cg_debugWeaponAiming+12
INDIRI4
CNSTI4 0
EQI4 $967
line 1739
;1739:			if ( !ps ) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $970
line 1740
;1740:				colour[0] = 0x00;
ADDRLP4 412
CNSTU1 0
ASGNU1
line 1741
;1741:				colour[1] = 0xff;
ADDRLP4 412+1
CNSTU1 255
ASGNU1
line 1742
;1742:				colour[2] = 0xff;
ADDRLP4 412+2
CNSTU1 255
ASGNU1
line 1743
;1743:				colour[3] = 0xff;
ADDRLP4 412+3
CNSTU1 255
ASGNU1
line 1744
;1744:			}
LABELV $970
line 1745
;1745:		}
LABELV $967
line 1747
;1746:
;1747:		CG_LaserSight(client_weapon.muzzle, trace.endpos, colour, 1.0f);
ADDRGP4 client_weapon+36
ARGP4
ADDRLP4 444+12
ARGP4
ADDRLP4 412
ARGP4
CNSTF4 1065353216
ARGF4
ADDRGP4 CG_LaserSight
CALLV
pop
line 1748
;1748:	}
LABELV $926
line 1751
;1749:#endif // USE_LASER_SIGHT
;1750:
;1751:	if ( show_flash )
ADDRLP4 160
INDIRI4
CNSTI4 0
EQI4 $977
line 1752
;1752:		trap_R_AddRefEntityToScene( &flash );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
LABELV $977
line 1754
;1753:
;1754:	if ( ps || cg.renderingThirdPerson || !mySelf ) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $983
ADDRGP4 cg+234788
INDIRI4
CNSTI4 0
NEI4 $983
ADDRLP4 140
INDIRI4
CNSTI4 0
NEI4 $979
LABELV $983
line 1757
;1755:
;1756:		// add lightning bolt
;1757:		CG_LightningBolt( nonPredictedCent, flash.origin );
ADDRLP4 152
INDIRP4
ARGP4
ADDRLP4 0+68
ARGP4
ADDRGP4 CG_LightningBolt
CALLV
pop
line 1760
;1758:
;1759:		// add rail trail
;1760:		CG_SpawnRailTrail( cent, flash.origin );
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0+68
ARGP4
ADDRGP4 CG_SpawnRailTrail
CALLV
pop
line 1764
;1761:
;1762:		// use our own muzzle point as dlight origin 
;1763:		// and put it a bit closer to vieworigin to avoid bad normals near walls
;1764:		if ( ps && cent->currentState.number == cg.predictedPlayerState.clientNum ) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $986
ADDRFP4 8
INDIRP4
INDIRI4
ADDRGP4 cg+234796+140
INDIRI4
NEI4 $986
line 1767
;1765:			vec3_t	start, end, muzzle, forward, up;
;1766:			trace_t	tr;
;1767:			AngleVectors( cg.refdefViewAngles, forward, NULL, up );
ADDRGP4 cg+237172
ARGP4
ADDRLP4 412
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 460
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1768
;1768:			VectorMA( cg.refdef.vieworg, 14, forward, muzzle );
ADDRLP4 424
ADDRGP4 cg+236804+24
INDIRF4
ADDRLP4 412
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 424+4
ADDRGP4 cg+236804+24+4
INDIRF4
ADDRLP4 412+4
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 424+8
ADDRGP4 cg+236804+24+8
INDIRF4
ADDRLP4 412+8
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
line 1769
;1769:			if ( weaponNum == WP_LIGHTNING )
ADDRLP4 148
INDIRI4
CNSTI4 6
NEI4 $1003
line 1770
;1770:				VectorMA( muzzle, -8, up, muzzle );
ADDRLP4 424
ADDRLP4 424
INDIRF4
ADDRLP4 460
INDIRF4
CNSTF4 3238002688
MULF4
ADDF4
ASGNF4
ADDRLP4 424+4
ADDRLP4 424+4
INDIRF4
ADDRLP4 460+4
INDIRF4
CNSTF4 3238002688
MULF4
ADDF4
ASGNF4
ADDRLP4 424+8
ADDRLP4 424+8
INDIRF4
ADDRLP4 460+8
INDIRF4
CNSTF4 3238002688
MULF4
ADDF4
ASGNF4
ADDRGP4 $1004
JUMPV
LABELV $1003
line 1772
;1771:			else
;1772:				VectorMA( muzzle, -6, up, muzzle );
ADDRLP4 424
ADDRLP4 424
INDIRF4
ADDRLP4 460
INDIRF4
CNSTF4 3233808384
MULF4
ADDF4
ASGNF4
ADDRLP4 424+4
ADDRLP4 424+4
INDIRF4
ADDRLP4 460+4
INDIRF4
CNSTF4 3233808384
MULF4
ADDF4
ASGNF4
ADDRLP4 424+8
ADDRLP4 424+8
INDIRF4
ADDRLP4 460+8
INDIRF4
CNSTF4 3233808384
MULF4
ADDF4
ASGNF4
LABELV $1004
line 1773
;1773:			VectorMA( cg.refdef.vieworg, 14, forward, start );
ADDRLP4 436
ADDRGP4 cg+236804+24
INDIRF4
ADDRLP4 412
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 436+4
ADDRGP4 cg+236804+24+4
INDIRF4
ADDRLP4 412+4
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 436+8
ADDRGP4 cg+236804+24+8
INDIRF4
ADDRLP4 412+8
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
line 1774
;1774:			VectorMA( cg.refdef.vieworg, 28, forward, end );
ADDRLP4 448
ADDRGP4 cg+236804+24
INDIRF4
ADDRLP4 412
INDIRF4
CNSTF4 1105199104
MULF4
ADDF4
ASGNF4
ADDRLP4 448+4
ADDRGP4 cg+236804+24+4
INDIRF4
ADDRLP4 412+4
INDIRF4
CNSTF4 1105199104
MULF4
ADDF4
ASGNF4
ADDRLP4 448+8
ADDRGP4 cg+236804+24+8
INDIRF4
ADDRLP4 412+8
INDIRF4
CNSTF4 1105199104
MULF4
ADDF4
ASGNF4
line 1775
;1775:			CG_Trace( &tr, start, NULL, NULL, end, cent->currentState.number, MASK_SHOT | CONTENTS_TRANSLUCENT );
ADDRLP4 472
ARGP4
ADDRLP4 436
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 448
ARGP4
ADDRFP4 8
INDIRP4
INDIRI4
ARGI4
CNSTI4 637534209
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 1776
;1776:			if ( tr.fraction != 1.0 ) {
ADDRLP4 472+8
INDIRF4
CNSTF4 1065353216
EQF4 $1041
line 1777
;1777:				VectorMA( muzzle, -13.0 * ( 1.0 - tr.fraction ), forward, flash.origin );
ADDRLP4 0+68
ADDRLP4 424
INDIRF4
ADDRLP4 412
INDIRF4
CNSTF4 1065353216
ADDRLP4 472+8
INDIRF4
SUBF4
CNSTF4 3243245568
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 424+4
INDIRF4
ADDRLP4 412+4
INDIRF4
CNSTF4 1065353216
ADDRLP4 472+8
INDIRF4
SUBF4
CNSTF4 3243245568
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 424+8
INDIRF4
ADDRLP4 412+8
INDIRF4
CNSTF4 1065353216
ADDRLP4 472+8
INDIRF4
SUBF4
CNSTF4 3243245568
MULF4
MULF4
ADDF4
ASGNF4
line 1778
;1778:			} else {
ADDRGP4 $1042
JUMPV
LABELV $1041
line 1779
;1779:				VectorCopy( muzzle, flash.origin );
ADDRLP4 0+68
ADDRLP4 424
INDIRB
ASGNB 12
line 1780
;1780:			}
LABELV $1042
line 1781
;1781:		}
LABELV $986
line 1783
;1782:
;1783:		if ( !show_flash )
ADDRLP4 160
INDIRI4
CNSTI4 0
NEI4 $1057
line 1784
;1784:			return;
ADDRGP4 $742
JUMPV
LABELV $1057
line 1786
;1785:
;1786:		if ( weaponNum == WP_MACHINEGUN ) // make it a bit less annoying
ADDRLP4 148
INDIRI4
CNSTI4 2
NEI4 $1059
line 1787
;1787:			radius = MG_FLASH_RADIUS + (rand() & WEAPON_FLASH_RADIUS_MOD);
ADDRLP4 412
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 388
ADDRLP4 412
INDIRI4
CNSTI4 31
BANDI4
CNSTI4 200
ADDI4
ASGNI4
ADDRGP4 $1060
JUMPV
LABELV $1059
line 1789
;1788:		else
;1789:			radius = WEAPON_FLASH_RADIUS + (rand() & WEAPON_FLASH_RADIUS_MOD);
ADDRLP4 416
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 388
ADDRLP4 416
INDIRI4
CNSTI4 31
BANDI4
CNSTI4 300
ADDI4
ASGNI4
LABELV $1060
line 1791
;1790:
;1791:		if ( weapon->flashDlightColor[0] || weapon->flashDlightColor[1] || weapon->flashDlightColor[2] ) {
ADDRLP4 144
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
CNSTF4 0
NEF4 $1064
ADDRLP4 144
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 0
NEF4 $1064
ADDRLP4 144
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 0
EQF4 $1061
LABELV $1064
line 1792
;1792:			trap_R_AddLightToScene( flash.origin, radius, 
ADDRLP4 0+68
ARGP4
ADDRLP4 388
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 144
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ARGF4
ADDRLP4 144
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ARGF4
ADDRLP4 144
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 1794
;1793:				weapon->flashDlightColor[0], weapon->flashDlightColor[1], weapon->flashDlightColor[2] );
;1794:		}
LABELV $1061
line 1795
;1795:	}
LABELV $979
line 1796
;1796:}
LABELV $742
endproc CG_AddPlayerWeapon 528 28
export CG_AddViewWeapon
proc CG_AddViewWeapon 920 36
line 1807
;1797:
;1798:
;1799:/*
;1800:==============
;1801:CG_AddViewWeapon
;1802:
;1803:Add the weapon, flash and laser beam 
;1804:for the player's view (the 'fake FPS view')
;1805:==============
;1806:*/
;1807:void CG_AddViewWeapon( playerState_t *ps ) {
line 1820
;1808:	refEntity_t			hand;
;1809:	centity_t			*cent;
;1810:	const clientInfo_t	*ci;
;1811:	const weaponInfo_t	*weapon;
;1812:	vec3_t				angles;
;1813:	refEntity_t			gun;
;1814:#ifndef USE_VR
;1815:	vec3_t				fovOffset;
;1816:#endif
;1817:
;1818:#ifdef USE_VR
;1819:	float	scale;
;1820:	int vrFlags = VR_get_client_vrFlags();
ADDRLP4 312
ADDRGP4 VR_get_client_vrFlags
CALLI4
ASGNI4
ADDRLP4 300
ADDRLP4 312
INDIRI4
ASGNI4
line 1829
;1821:	//int vrFlags = VR_get_anyPlayer_vrFlags( ps, qtrue );
;1822:#endif
;1823:
;1824:#ifdef USE_VR_ZOOM
;1825:	qboolean weapon_zoomed;
;1826:	weapon_zoomed = (vrFlags & EF_WEAPON_ZOOM);
;1827:#endif
;1828:
;1829:	if ( ps->persistant[PERS_TEAM] == TEAM_SPECTATOR ) {
ADDRFP4 0
INDIRP4
CNSTI4 260
ADDP4
INDIRI4
CNSTI4 3
NEI4 $1067
line 1830
;1830:		return;
ADDRGP4 $1066
JUMPV
LABELV $1067
line 1833
;1831:	}
;1832:
;1833:	if ( ps->pm_type == PM_INTERMISSION ) {
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 5
NEI4 $1069
line 1834
;1834:		return;
ADDRGP4 $1066
JUMPV
LABELV $1069
line 1839
;1835:	}
;1836:
;1837:	// no gun if in third person view or a camera is active
;1838:	//if ( cg.renderingThirdPerson || cg.cameraMode) {
;1839:	if ( cg.renderingThirdPerson ) {
ADDRGP4 cg+234788
INDIRI4
CNSTI4 0
EQI4 $1071
line 1840
;1840:		return;
ADDRGP4 $1066
JUMPV
LABELV $1071
line 1844
;1841:	}
;1842:
;1843:	// don't draw if testing a gun model
;1844:	if ( cg.testGun ) {
ADDRGP4 cg+245948
INDIRI4
CNSTI4 0
EQI4 $1074
line 1845
;1845:		return;
ADDRGP4 $1066
JUMPV
LABELV $1074
line 1856
;1846:	}
;1847:
;1848:#ifdef USE_VR_ZOOM
;1849:	// do not draw weapon model with enabled weapon scope
;1850:	if ( weapon_zoomed ) {
;1851:		return;
;1852:	}
;1853:#endif
;1854:
;1855:	// allow the gun to be completely removed
;1856:	if ( !cg_drawGun.integer ) {
ADDRGP4 cg_drawGun+12
INDIRI4
CNSTI4 0
NEI4 $1077
line 1859
;1857:		vec3_t origin;
;1858:
;1859:		if ( cg.predictedPlayerState.eFlags & EF_FIRING ) {
ADDRGP4 cg+234796+104
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $1066
line 1861
;1860:			// special hack for lightning gun...
;1861:			VectorCopy( cg.refdef.vieworg, origin );
ADDRLP4 316
ADDRGP4 cg+236804+24
INDIRB
ASGNB 12
line 1862
;1862:			VectorMA( origin, -8, cg.refdef.viewaxis[2], origin );
ADDRLP4 316
ADDRLP4 316
INDIRF4
ADDRGP4 cg+236804+36+24
INDIRF4
CNSTF4 3238002688
MULF4
ADDF4
ASGNF4
ADDRLP4 316+4
ADDRLP4 316+4
INDIRF4
ADDRGP4 cg+236804+36+24+4
INDIRF4
CNSTF4 3238002688
MULF4
ADDF4
ASGNF4
ADDRLP4 316+8
ADDRLP4 316+8
INDIRF4
ADDRGP4 cg+236804+36+24+8
INDIRF4
CNSTF4 3238002688
MULF4
ADDF4
ASGNF4
line 1863
;1863:			CG_LightningBolt( &cg_entities[ps->clientNum], origin );
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
CNSTI4 1236
MULI4
ADDRGP4 cg_entities
ADDP4
ARGP4
ADDRLP4 316
ARGP4
ADDRGP4 CG_LightningBolt
CALLV
pop
line 1864
;1864:		}
line 1865
;1865:		return;
ADDRGP4 $1066
JUMPV
LABELV $1077
line 1880
;1866:	}
;1867:
;1868:	// drop gun lower at higher fov
;1869:#ifndef USE_VR
;1870:	if ( cgs.fov > 90.0 ) {
;1871:		fovOffset[0] = 0;
;1872:		fovOffset[2] = -0.2 * ( cgs.fov - 90.0 );
;1873:	} else {
;1874:		// move gun forward at lowerer fov
;1875:		fovOffset[0] = -0.2 * ( cgs.fov - 90.0 );
;1876:		fovOffset[2] = 0;
;1877:	}
;1878:#endif
;1879:
;1880:	cent = &cg.predictedPlayerEntity;
ADDRLP4 280
ADDRGP4 cg+235356
ASGNP4
line 1882
;1881:
;1882:	CG_RegisterWeapon(ps->weapon);
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 1883
;1883:	weapon = &cg_weapons[ps->weapon];
ADDRLP4 284
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 1885
;1884:
;1885:	memset(&hand, 0, sizeof(hand));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1886
;1886:	memset(&gun, 0, sizeof(gun));
ADDRLP4 140
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1890
;1887:
;1888:	// set up gun position
;1889:#ifdef USE_VR
;1890:	if ( cg.vr_controller_type == 1 )
ADDRGP4 cg+282972
INDIRI4
CNSTI4 1
NEI4 $1102
line 1891
;1891:		CG_CalculateWeaponPosition_VR_3Dof( &gun );
ADDRLP4 140
ARGP4
ADDRGP4 CG_CalculateWeaponPosition_VR_3Dof
CALLV
pop
ADDRGP4 $1103
JUMPV
LABELV $1102
line 1892
;1892:	else if ( cg.vr_controller_type >= 2 )
ADDRGP4 cg+282972
INDIRI4
CNSTI4 2
LTI4 $1105
line 1893
;1893:		CG_CalculateWeaponPosition_VR_6Dof( hand.origin, angles );
ADDRLP4 0+68
ARGP4
ADDRLP4 288
ARGP4
ADDRGP4 CG_CalculateWeaponPosition_VR_6Dof
CALLV
pop
ADDRGP4 $1106
JUMPV
LABELV $1105
line 1896
;1894:	else
;1895:#endif
;1896:		CG_CalculateWeaponPosition( hand.origin, angles );
ADDRLP4 0+68
ARGP4
ADDRLP4 288
ARGP4
ADDRGP4 CG_CalculateWeaponPosition
CALLV
pop
LABELV $1106
LABELV $1103
line 1899
;1897:
;1898:#ifdef USE_VR
;1899:	if ( cg.vr_controller_type >= 2 )
ADDRGP4 cg+282972
INDIRI4
CNSTI4 2
LTI4 $1110
line 1900
;1900:	{
line 1902
;1901:		//Scale / Move gun etc
;1902:		scale = 1.0f;
ADDRLP4 308
CNSTF4 1065353216
ASGNF4
line 1903
;1903:		if ( !( (cg.snap->ps.pm_flags & PMF_FOLLOW) && (vrFlags & EF_FM_FIRSTPERSON ) ))
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $1116
ADDRLP4 300
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
NEI4 $1113
LABELV $1116
line 1904
;1904:		{
line 1908
;1905:			char cvar_name[64];
;1906:			char weapon_adjustment[256];
;1907:
;1908:			Com_sprintf(cvar_name, sizeof(cvar_name), "vr_weapon_adjustment_%i", ps->weapon);
ADDRLP4 316
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $1117
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLI4
pop
line 1909
;1909:			trap_Cvar_VariableStringBuffer(cvar_name, weapon_adjustment, 256);
ADDRLP4 316
ARGP4
ADDRLP4 380
ARGP4
CNSTI4 256
ARGI4
ADDRGP4 trap_Cvar_VariableStringBuffer
CALLV
pop
line 1911
;1910:
;1911:			if (strlen(weapon_adjustment) > 0) {
ADDRLP4 380
ARGP4
ADDRLP4 636
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 636
INDIRI4
CNSTI4 0
LEI4 $1118
line 1919
;1912:				vec3_t offset;
;1913:				vec3_t adjust;
;1914:				vec3_t temp_offset;
;1915:				matrix4x4 m1, m2, m3;
;1916:				vec3_t zero;
;1917:				vec3_t forward, right, up;
;1918:
;1919:				VectorClear(temp_offset);
ADDRLP4 652
CNSTF4 0
ASGNF4
ADDRLP4 652+4
CNSTF4 0
ASGNF4
ADDRLP4 652+8
CNSTF4 0
ASGNF4
line 1920
;1920:				VectorClear(adjust);
ADDRLP4 664
CNSTF4 0
ASGNF4
ADDRLP4 664+4
CNSTF4 0
ASGNF4
ADDRLP4 664+8
CNSTF4 0
ASGNF4
line 1922
;1921:
;1922:				Q_sscanf(weapon_adjustment, "%f,%f,%f,%f,%f,%f,%f", &scale,
ADDRLP4 380
ARGP4
ADDRGP4 $1124
ARGP4
ADDRLP4 308
ARGP4
ADDRLP4 652
ARGP4
ADDRLP4 652+4
ARGP4
ADDRLP4 652+8
ARGP4
ADDRLP4 664
ARGP4
ADDRLP4 664+4
ARGP4
ADDRLP4 664+8
ARGP4
ADDRGP4 Q_sscanf
CALLI4
pop
line 1925
;1923:					&(temp_offset[0]), &(temp_offset[1]), &(temp_offset[2]),
;1924:					&(adjust[PITCH]), &(adjust[YAW]), &(adjust[ROLL]));
;1925:				VectorScale(temp_offset, scale, offset);
ADDRLP4 916
ADDRLP4 308
INDIRF4
ASGNF4
ADDRLP4 640
ADDRLP4 652
INDIRF4
ADDRLP4 916
INDIRF4
MULF4
ASGNF4
ADDRLP4 640+4
ADDRLP4 652+4
INDIRF4
ADDRLP4 916
INDIRF4
MULF4
ASGNF4
ADDRLP4 640+8
ADDRLP4 652+8
INDIRF4
ADDRLP4 308
INDIRF4
MULF4
ASGNF4
line 1927
;1926:
;1927:				if ( vrFlags & EF_LEFT_HANDED )
ADDRLP4 300
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $1133
line 1928
;1928:				{
line 1930
;1929:					//yaw needs to go in the other direction as left handed model is reversed
;1930:					adjust[YAW] *= -1.0f;
ADDRLP4 664+4
ADDRLP4 664+4
INDIRF4
CNSTF4 3212836864
MULF4
ASGNF4
line 1931
;1931:				}
LABELV $1133
line 1934
;1932:
;1933:				//Adjust angles for weapon models that aren't aligned very well
;1934:				VectorClear(zero);
ADDRLP4 676
CNSTF4 0
ASGNF4
ADDRLP4 676+4
CNSTF4 0
ASGNF4
ADDRLP4 676+8
CNSTF4 0
ASGNF4
line 1935
;1935:				Matrix4x4_CreateFromEntity(m1, angles, zero, 1.0);
ADDRLP4 724
ARGP4
ADDRLP4 288
ARGP4
ADDRLP4 676
ARGP4
CNSTF4 1065353216
ARGF4
ADDRGP4 Matrix4x4_CreateFromEntity
CALLV
pop
line 1936
;1936:				Matrix4x4_CreateFromEntity(m2, adjust, zero, 1.0);
ADDRLP4 788
ARGP4
ADDRLP4 664
ARGP4
ADDRLP4 676
ARGP4
CNSTF4 1065353216
ARGF4
ADDRGP4 Matrix4x4_CreateFromEntity
CALLV
pop
line 1938
;1937:
;1938:				Matrix4x4_Concat(m3, m1, m2);
ADDRLP4 852
ARGP4
ADDRLP4 724
ARGP4
ADDRLP4 788
ARGP4
ADDRGP4 Matrix4x4_Concat
CALLV
pop
line 1940
;1939:
;1940:				Matrix4x4_ConvertToEntity(m3, angles, zero);
ADDRLP4 852
ARGP4
ADDRLP4 288
ARGP4
ADDRLP4 676
ARGP4
ADDRGP4 Matrix4x4_ConvertToEntity
CALLV
pop
line 1943
;1941:
;1942:				//Now move weapon closer to proper origin
;1943:				AngleVectors(angles, forward, right, up);
ADDRLP4 288
ARGP4
ADDRLP4 688
ARGP4
ADDRLP4 700
ARGP4
ADDRLP4 712
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1944
;1944:				VectorMA(hand.origin, offset[2], forward, hand.origin);
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRLP4 688
INDIRF4
ADDRLP4 640+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRLP4 688+4
INDIRF4
ADDRLP4 640+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRLP4 688+8
INDIRF4
ADDRLP4 640+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1945
;1945:				VectorMA(hand.origin, offset[1], up, hand.origin);
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRLP4 712
INDIRF4
ADDRLP4 640+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRLP4 712+4
INDIRF4
ADDRLP4 640+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRLP4 712+8
INDIRF4
ADDRLP4 640+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1947
;1946:
;1947:				if ( !(vrFlags & EF_LEFT_HANDED) ) {
ADDRLP4 300
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
NEI4 $1168
line 1948
;1948:					VectorMA(hand.origin, offset[0], right, hand.origin);
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRLP4 700
INDIRF4
ADDRLP4 640
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRLP4 700+4
INDIRF4
ADDRLP4 640
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRLP4 700+8
INDIRF4
ADDRLP4 640
INDIRF4
MULF4
ADDF4
ASGNF4
line 1949
;1949:				} else {
ADDRGP4 $1169
JUMPV
LABELV $1168
line 1950
;1950:					VectorMA(hand.origin, -offset[0], right, hand.origin);
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRLP4 700
INDIRF4
ADDRLP4 640
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRLP4 700+4
INDIRF4
ADDRLP4 640
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRLP4 700+8
INDIRF4
ADDRLP4 640
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 1951
;1951:				}
LABELV $1169
line 1952
;1952:			}
LABELV $1118
line 1953
;1953:		}
LABELV $1113
line 1954
;1954:	}
LABELV $1110
line 1958
;1955:#endif
;1956:
;1957:#ifdef USE_VR
;1958:	VectorMA(hand.origin, cg_gun_x.value, cg.refdef.viewaxis[0], hand.origin);
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRGP4 cg+236804+36
INDIRF4
ADDRGP4 cg_gun_x+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRGP4 cg+236804+36+4
INDIRF4
ADDRGP4 cg_gun_x+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRGP4 cg+236804+36+8
INDIRF4
ADDRGP4 cg_gun_x+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1959
;1959:	VectorMA(hand.origin, cg_gun_y.value, cg.refdef.viewaxis[1], hand.origin);
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRGP4 cg+236804+36+12
INDIRF4
ADDRGP4 cg_gun_y+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRGP4 cg+236804+36+12+4
INDIRF4
ADDRGP4 cg_gun_y+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRGP4 cg+236804+36+12+8
INDIRF4
ADDRGP4 cg_gun_y+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1960
;1960:	VectorMA(hand.origin, cg_gun_z.value, cg.refdef.viewaxis[2], hand.origin);
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRGP4 cg+236804+36+24
INDIRF4
ADDRGP4 cg_gun_z+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRGP4 cg+236804+36+24+4
INDIRF4
ADDRGP4 cg_gun_z+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRGP4 cg+236804+36+24+8
INDIRF4
ADDRGP4 cg_gun_z+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1967
;1961:#else
;1962:	VectorMA(hand.origin, (cg_gun_x.value + fovOffset[0]), cg.refdef.viewaxis[0], hand.origin);
;1963:	VectorMA(hand.origin, cg_gun_y.value, cg.refdef.viewaxis[1], hand.origin);
;1964:	VectorMA(hand.origin, (cg_gun_z.value + fovOffset[2]), cg.refdef.viewaxis[2], hand.origin);
;1965:#endif
;1966:
;1967:	AnglesToAxis(angles, hand.axis);
ADDRLP4 288
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1970
;1968:
;1969:	// map torso animations to weapon animations
;1970:	if ( cg_gun_frame.integer ) {
ADDRGP4 cg_gun_frame+12
INDIRI4
CNSTI4 0
EQI4 $1264
line 1972
;1971:		// development tool
;1972:		hand.frame = hand.oldframe = cg_gun_frame.integer;
ADDRLP4 316
ADDRGP4 cg_gun_frame+12
INDIRI4
ASGNI4
ADDRLP4 0+96
ADDRLP4 316
INDIRI4
ASGNI4
ADDRLP4 0+80
ADDRLP4 316
INDIRI4
ASGNI4
line 1973
;1973:		hand.backlerp = 0;
ADDRLP4 0+100
CNSTF4 0
ASGNF4
line 1974
;1974:	} else {
ADDRGP4 $1265
JUMPV
LABELV $1264
line 1976
;1975:		// get clientinfo for animation map
;1976:		ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 304
ADDRLP4 280
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 1680
MULI4
ADDRGP4 cgs+41012
ADDP4
ASGNP4
line 1977
;1977:		hand.frame = CG_MapTorsoToWeaponFrame( ci, cent->pe.torso.frame );
ADDRLP4 304
INDIRP4
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 1012
ADDP4
INDIRI4
ARGI4
ADDRLP4 316
ADDRGP4 CG_MapTorsoToWeaponFrame
CALLI4
ASGNI4
ADDRLP4 0+80
ADDRLP4 316
INDIRI4
ASGNI4
line 1978
;1978:		hand.oldframe = CG_MapTorsoToWeaponFrame( ci, cent->pe.torso.oldFrame );
ADDRLP4 304
INDIRP4
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 1004
ADDP4
INDIRI4
ARGI4
ADDRLP4 320
ADDRGP4 CG_MapTorsoToWeaponFrame
CALLI4
ASGNI4
ADDRLP4 0+96
ADDRLP4 320
INDIRI4
ASGNI4
line 1979
;1979:		hand.backlerp = cent->pe.torso.backlerp;
ADDRLP4 0+100
ADDRLP4 280
INDIRP4
CNSTI4 1020
ADDP4
INDIRF4
ASGNF4
line 1980
;1980:	}
LABELV $1265
line 1982
;1981:
;1982:	hand.hModel = weapon->handsModel;
ADDRLP4 0+8
ADDRLP4 284
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 1983
;1983:	hand.renderfx = RF_FIRST_PERSON | RF_MINLIGHT;
ADDRLP4 0+4
CNSTI4 5
ASGNI4
line 1990
;1984:#ifndef USE_VR
;1985:	if( !cg.vr_controller_type )
;1986:		hand.renderfx |= RF_DEPTHHACK;
;1987:#endif
;1988:
;1989:	// add everything onto the hand
;1990:	CG_AddPlayerWeapon( &hand, ps, &cg.predictedPlayerEntity, ps->persistant[PERS_TEAM], &gun );
ADDRLP4 0
ARGP4
ADDRLP4 316
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 316
INDIRP4
ARGP4
ADDRGP4 cg+235356
ARGP4
ADDRLP4 316
INDIRP4
CNSTI4 260
ADDP4
INDIRI4
ARGI4
ADDRLP4 140
ARGP4
ADDRGP4 CG_AddPlayerWeapon
CALLV
pop
line 1991
;1991:}
LABELV $1066
endproc CG_AddViewWeapon 920 36
proc CG_DrawWeaponSelect 3752 32
line 2008
;1992:
;1993:/*
;1994:==============================================================================
;1995:
;1996:WEAPON SELECTION
;1997:
;1998:==============================================================================
;1999:*/
;2000:
;2001:
;2002:/*
;2003:===================
;2004:CG_DrawWeaponSelect
;2005:===================
;2006:*/
;2007:#ifdef USE_NEOHUD
;2008:static void CG_DrawWeaponSelect(item_t *itm) {
line 2043
;2009:	int			i;
;2010:	int			bits;
;2011:	int			count;
;2012:	int			weaponSelect;
;2013:	const char	*name;
;2014:	//float		*forecolor;
;2015:	float		*fadeColor;
;2016:	vec4_t		forecolor;
;2017:
;2018:	char		buf[16];
;2019:	float		icoX, icoY;
;2020:	qhandle_t	shader;
;2021:	qboolean	SelectedColExist;
;2022:	rectangle_t r;
;2023:	item_t		ico;
;2024:	item_t		icoS;
;2025:	/*qboolean	showWeaponWheel;
;2026:#ifdef USE_WEAPON_WHEEL
;2027:#ifdef USE_NATIVE_HACK
;2028:	showWeaponWheel = vrinf_o->weapon_select;
;2029:#endif
;2030:#ifdef USE_VR_QVM
;2031:	// if ( mySelf )
;2032:	showWeaponWheel = (cg.predictedPlayerState.vrFlags & EF_WEAPON_WHEEL);
;2033:	//else
;2034:	//	showWeaponWheel = (cg.predictedPlayerState.vrFlags & EF_WEAPON_WHEEL);
;2035:#endif
;2036:	// don't display when weapon wheel is opened
;2037:	if ( showWeaponWheel ) {
;2038:		return;
;2039:	}
;2040:#endif // USE_WEAPON_WHEEL
;2041:	*/
;2042:
;2043:	if ( cg_drawWeaponSelect.integer == 0 ) {
ADDRGP4 cg_drawWeaponSelect+12
INDIRI4
CNSTI4 0
NEI4 $1279
line 2044
;2044:		return;
ADDRGP4 $1278
JUMPV
LABELV $1279
line 2047
;2045:	}
;2046:
;2047:	if ( !CG_HUDItemVisible(itm) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 2512
ADDRGP4 CG_HUDItemVisible
CALLI4
ASGNI4
ADDRLP4 2512
INDIRI4
CNSTI4 0
NEI4 $1282
line 2048
;2048:		return;
ADDRGP4 $1278
JUMPV
LABELV $1282
line 2052
;2049:	}
;2050:
;2051:	// don't draw if dead or the scoreboard is being explicitly shown
;2052:	if ( cg.showScores || !cg.snap->ps.stats[STAT_HEALTH] > 0 ) {
ADDRGP4 cg+243116
INDIRI4
CNSTI4 0
NEI4 $1289
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1290
ADDRLP4 2516
CNSTI4 1
ASGNI4
ADDRGP4 $1291
JUMPV
LABELV $1290
ADDRLP4 2516
CNSTI4 0
ASGNI4
LABELV $1291
ADDRLP4 2516
INDIRI4
CNSTI4 0
LEI4 $1284
LABELV $1289
line 2053
;2053:		return;
ADDRGP4 $1278
JUMPV
LABELV $1284
line 2056
;2054:	}
;2055:
;2056:	ico = dyn_itemArray[IcoWeapList_idx];
ADDRLP4 1216
ADDRGP4 IcoWeapList_idx
INDIRI4
CNSTI4 1212
MULI4
ADDRGP4 dyn_itemArray
ADDP4
INDIRB
ASGNB 1212
line 2057
;2057:	icoS = dyn_itemArray[IcoWeapListSel_idx];
ADDRLP4 4
ADDRGP4 IcoWeapListSel_idx
INDIRI4
CNSTI4 1212
MULI4
ADDRGP4 dyn_itemArray
ADDP4
INDIRB
ASGNB 1212
line 2059
;2058:
;2059:	weaponSelect = abs(cg_drawWeaponSelect.integer);
ADDRGP4 cg_drawWeaponSelect+12
INDIRI4
ARGI4
ADDRLP4 2520
ADDRGP4 abs
CALLI4
ASGNI4
ADDRLP4 2440
ADDRLP4 2520
INDIRI4
ASGNI4
line 2062
;2060:
;2061:	// color of text (ammo counters/selected name)
;2062:	HUD_color(itm, &itm->forecolor, &forecolor, colorWhite);
ADDRLP4 2524
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 2524
INDIRP4
ARGP4
ADDRLP4 2524
INDIRP4
CNSTI4 1152
ADDP4
ARGP4
ADDRLP4 2492
ARGP4
ADDRGP4 colorWhite
ARGP4
ADDRGP4 HUD_color
CALLV
pop
line 2064
;2063:
;2064:	fadeColor = CG_FadeColor(cg.weaponSelectTime, itm->time, forecolor);
ADDRGP4 cg+245636
INDIRI4
ARGI4
ADDRFP4 0
INDIRP4
CNSTI4 1032
ADDP4
INDIRI4
ARGI4
ADDRLP4 2492
ARGP4
ADDRLP4 2528
ADDRGP4 CG_FadeColor
CALLP4
ASGNP4
ADDRLP4 2472
ADDRLP4 2528
INDIRP4
ASGNP4
line 2065
;2065:	if ( !fadeColor ) {
ADDRLP4 2472
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1294
line 2066
;2066:		return;
ADDRGP4 $1278
JUMPV
LABELV $1294
line 2069
;2067:	}
;2068:
;2069:	trap_R_SetColor(fadeColor);
ADDRLP4 2472
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 2072
;2070:
;2071:	// showing weapon select clears pickup item display, but not the blend blob
;2072:	cg.itemPickupTime = 0;
ADDRGP4 cg+245628
CNSTI4 0
ASGNI4
line 2075
;2073:
;2074:	// count the number of weapons owned
;2075:	bits = cg.snap->ps.stats[STAT_WEAPONS];
ADDRLP4 2436
ADDRGP4 cg+36
INDIRP4
CNSTI4 236
ADDP4
INDIRI4
ASGNI4
line 2076
;2076:	count = 0;
ADDRLP4 2464
CNSTI4 0
ASGNI4
line 2077
;2077:	for ( i = WP_GAUNTLET; i < MAX_WEAPONS; i++ ) {
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $1298
line 2078
;2078:		if ( bits & (1 << i) ) {
ADDRLP4 2436
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $1302
line 2079
;2079:			count++;
ADDRLP4 2464
ADDRLP4 2464
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2080
;2080:		}
LABELV $1302
line 2081
;2081:	}
LABELV $1299
line 2077
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1298
line 2084
;2082:
;2083:	// pos & size according to anchor & margins
;2084:	HUD_Update_Anchors(itm, &r);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 2448
ARGP4
ADDRGP4 HUD_Update_Anchors
CALLV
pop
line 2088
;2085:	//CG_Update_Margin(itm, &r);
;2086:
;2087:	// horizontal ammo counters
;2088:	if ( weaponSelect < 3 ) {
ADDRLP4 2440
INDIRI4
CNSTI4 3
GEI4 $1304
line 2089
;2089:		icoX = itm->rect.x - count * icoS.rect.w * 0.5;
ADDRLP4 2432
ADDRFP4 0
INDIRP4
CNSTI4 1088
ADDP4
INDIRF4
ADDRLP4 2464
INDIRI4
CVIF4 4
ADDRLP4 4+1088+8
INDIRF4
MULF4
CNSTF4 1056964608
MULF4
SUBF4
ASGNF4
line 2090
;2090:		icoY = itm->rect.y + cgs.screenYmin;
ADDRLP4 2428
ADDRFP4 0
INDIRP4
CNSTI4 1092
ADDP4
INDIRF4
ADDRGP4 cgs+31476
INDIRF4
ADDF4
ASGNF4
line 2091
;2091:	}
ADDRGP4 $1305
JUMPV
LABELV $1304
line 2092
;2092:	else {// vertical ammo counters
line 2093
;2093:		icoX = itm->rect.x + cgs.screenXmin;
ADDRLP4 2432
ADDRFP4 0
INDIRP4
CNSTI4 1088
ADDP4
INDIRF4
ADDRGP4 cgs+31468
INDIRF4
ADDF4
ASGNF4
line 2097
;2094:		//icoY = itm->rect.y - count * icoS.rect.h * 0.5;
;2095:		//CG_Update_Valign(itm, &r); // TODO
;2096:
;2097:		if (itm->propFlags & PROP_VALIGN_TOP)
ADDRFP4 0
INDIRP4
CNSTI4 1052
ADDP4
INDIRU4
CNSTU4 1
BANDU4
CNSTU4 0
EQU4 $1310
line 2098
;2098:			icoY = itm->rect.y;
ADDRLP4 2428
ADDRFP4 0
INDIRP4
CNSTI4 1092
ADDP4
INDIRF4
ASGNF4
ADDRGP4 $1311
JUMPV
LABELV $1310
line 2099
;2099:		else if (itm->propFlags & PROP_VALIGN_MIDDLE)
ADDRFP4 0
INDIRP4
CNSTI4 1052
ADDP4
INDIRU4
CNSTU4 2
BANDU4
CNSTU4 0
EQU4 $1312
line 2100
;2100:			icoY = itm->rect.y - count * icoS.rect.h * 0.5;
ADDRLP4 2428
ADDRFP4 0
INDIRP4
CNSTI4 1092
ADDP4
INDIRF4
ADDRLP4 2464
INDIRI4
CVIF4 4
ADDRLP4 4+1088+12
INDIRF4
MULF4
CNSTF4 1056964608
MULF4
SUBF4
ASGNF4
ADDRGP4 $1313
JUMPV
LABELV $1312
line 2101
;2101:		else if (itm->propFlags & PROP_VALIGN_BOTTOM)
ADDRFP4 0
INDIRP4
CNSTI4 1052
ADDP4
INDIRU4
CNSTU4 4
BANDU4
CNSTU4 0
EQU4 $1316
line 2102
;2102:			icoY = itm->rect.y - count * icoS.rect.h;
ADDRLP4 2428
ADDRFP4 0
INDIRP4
CNSTI4 1092
ADDP4
INDIRF4
ADDRLP4 2464
INDIRI4
CVIF4 4
ADDRLP4 4+1088+12
INDIRF4
MULF4
SUBF4
ASGNF4
LABELV $1316
LABELV $1313
LABELV $1311
line 2103
;2103:	}
LABELV $1305
line 2105
;2104:
;2105:	r.x = icoX;
ADDRLP4 2448
ADDRLP4 2432
INDIRF4
ASGNF4
line 2106
;2106:	r.y = icoY;
ADDRLP4 2448+4
ADDRLP4 2428
INDIRF4
ASGNF4
line 2107
;2107:	r.w = count * icoS.rect.w;
ADDRLP4 2448+8
ADDRLP4 2464
INDIRI4
CVIF4 4
ADDRLP4 4+1088+8
INDIRF4
MULF4
ASGNF4
line 2108
;2108:	r.h = icoS.rect.h;
ADDRLP4 2448+12
ADDRLP4 4+1088+12
INDIRF4
ASGNF4
line 2110
;2109:
;2110:	HUD_Update_finalRect(itm, r.x, r.y, r.w, r.h);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 2448
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 2448+4
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 2448+8
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 2448+12
INDIRF4
CVFI4 4
ARGI4
ADDRGP4 HUD_Update_finalRect
CALLV
pop
line 2113
;2111:
;2112:	// is selected color defined in HUD file?
;2113:	SelectedColExist = (icoS.backcolor.colorflags & C_COLOR_RGBA);//TOOD use HUD_Getbackcolor
ADDRLP4 2444
ADDRLP4 4+1128+16
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
ASGNI4
line 2115
;2114:
;2115:	shader = CG_HUDShader(&icoS, cgs.media.selectShader);
ADDRLP4 4
ARGP4
ADDRGP4 cgs+150560+212
INDIRI4
ARGI4
ADDRLP4 2532
ADDRGP4 CG_HUDShader
CALLI4
ASGNI4
ADDRLP4 2468
ADDRLP4 2532
INDIRI4
ASGNI4
line 2117
;2116:
;2117:	for ( i = WP_GAUNTLET; i < MAX_WEAPONS; i++ ) {
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $1334
line 2118
;2118:		if ( !(bits & (1 << i)) ) {
ADDRLP4 2436
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $1338
line 2119
;2119:			continue;
ADDRGP4 $1335
JUMPV
LABELV $1338
line 2122
;2120:		}
;2121:
;2122:		CG_RegisterWeapon(i);
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 2125
;2123:
;2124:		// draw weapon icon
;2125:		CG_DrawPic( icoX, icoY, ico.rect.w, ico.rect.h, cg_weapons[i].weaponIcon );
ADDRLP4 2432
INDIRF4
ARGF4
ADDRLP4 2428
INDIRF4
ARGF4
ADDRLP4 1216+1088+8
INDIRF4
ARGF4
ADDRLP4 1216+1088+12
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons+68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 2128
;2126:
;2127:		// draw selection marker
;2128:		if ( i == cg.weaponSelect ) {
ADDRLP4 0
INDIRI4
ADDRGP4 cg+236704
INDIRI4
NEI4 $1345
line 2130
;2129:
;2130:			if ( SelectedColExist ) {
ADDRLP4 2444
INDIRI4
CNSTI4 0
EQI4 $1348
line 2131
;2131:				trap_R_SetColor(icoS.backcolor.color);
ADDRLP4 4+1128
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 2132
;2132:			}
LABELV $1348
line 2134
;2133:
;2134:			if ( icoS.param == 1 ) { // allow a better control of the selection mark
ADDRLP4 4+1036
INDIRI4
CNSTI4 1
NEI4 $1351
line 2135
;2135:				CG_DrawPic( icoX + icoS.rect.x, icoY + icoS.rect.y, icoS.rect.w, icoS.rect.h, shader );
ADDRLP4 2432
INDIRF4
ADDRLP4 4+1088
INDIRF4
ADDF4
ARGF4
ADDRLP4 2428
INDIRF4
ADDRLP4 4+1088+4
INDIRF4
ADDF4
ARGF4
ADDRLP4 4+1088+8
INDIRF4
ARGF4
ADDRLP4 4+1088+12
INDIRF4
ARGF4
ADDRLP4 2468
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 2136
;2136:			}
ADDRGP4 $1352
JUMPV
LABELV $1351
line 2137
;2137:			else {
line 2138
;2138:				int icoSX = icoX - (icoS.rect.w - ico.rect.w) * 0.5f;
ADDRLP4 2536
ADDRLP4 2432
INDIRF4
ADDRLP4 4+1088+8
INDIRF4
ADDRLP4 1216+1088+8
INDIRF4
SUBF4
CNSTF4 1056964608
MULF4
SUBF4
CVFI4 4
ASGNI4
line 2139
;2139:				int icoSY = icoY - (icoS.rect.h - ico.rect.h) * 0.5f;
ADDRLP4 2540
ADDRLP4 2428
INDIRF4
ADDRLP4 4+1088+12
INDIRF4
ADDRLP4 1216+1088+12
INDIRF4
SUBF4
CNSTF4 1056964608
MULF4
SUBF4
CVFI4 4
ASGNI4
line 2141
;2140:
;2141:				CG_DrawPic(icoSX, icoSY, icoS.rect.w, icoS.rect.h, shader);
ADDRLP4 2536
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 2540
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 4+1088+8
INDIRF4
ARGF4
ADDRLP4 4+1088+12
INDIRF4
ARGF4
ADDRLP4 2468
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 2142
;2142:			}
LABELV $1352
line 2144
;2143:
;2144:			if ( SelectedColExist ) {
ADDRLP4 2444
INDIRI4
CNSTI4 0
EQI4 $1373
line 2145
;2145:				trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 2146
;2146:			}
LABELV $1373
line 2147
;2147:		}
LABELV $1345
line 2150
;2148:
;2149:		// no-ammo cross on top
;2150:		if ( !cg.snap->ps.ammo[i] ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1375
line 2151
;2151:			CG_DrawPic(icoX, icoY, ico.rect.w, ico.rect.h, cgs.media.noammoShader);
ADDRLP4 2432
INDIRF4
ARGF4
ADDRLP4 2428
INDIRF4
ARGF4
ADDRLP4 1216+1088+8
INDIRF4
ARGF4
ADDRLP4 1216+1088+12
INDIRF4
ARGF4
ADDRGP4 cgs+150560+272
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 2152
;2152:		}
ADDRGP4 $1376
JUMPV
LABELV $1375
line 2153
;2153:		else if ( weaponSelect > 1 && cg.snap->ps.ammo[i] > 0 ) {
ADDRLP4 2440
INDIRI4
CNSTI4 1
LEI4 $1384
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
LEI4 $1384
line 2154
;2154:			item_t WpNameP = dyn_itemArray[WeapListSelName_idx];
ADDRLP4 2536
ADDRGP4 WeapListSelName_idx
INDIRI4
CNSTI4 1212
MULI4
ADDRGP4 dyn_itemArray
ADDP4
INDIRB
ASGNB 1212
line 2157
;2155:
;2156:			// ammo counter
;2157:			BG_sprintf(buf, "%i", cg.snap->ps.ammo[i]);
ADDRLP4 2476
ARGP4
ADDRGP4 $1387
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRGP4 BG_sprintf
CALLI4
pop
line 2159
;2158:
;2159:			if ( weaponSelect == 2 ) {
ADDRLP4 2440
INDIRI4
CNSTI4 2
NEI4 $1389
line 2161
;2160:				// horizontal ammo counters
;2161:				CG_DrawString(icoX + ico.rect.w / 2, icoY - icoS.rect.h*0.5, buf, fadeColor,
ADDRLP4 2432
INDIRF4
ADDRLP4 1216+1088+8
INDIRF4
CNSTF4 1056964608
MULF4
ADDF4
ARGF4
ADDRLP4 2428
INDIRF4
ADDRLP4 4+1088+12
INDIRF4
CNSTF4 1056964608
MULF4
SUBF4
ARGF4
ADDRLP4 2476
ARGP4
ADDRLP4 2472
INDIRP4
ARGP4
ADDRLP4 2536+1120
INDIRF4
ARGF4
ADDRLP4 2536+1120+4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 2536+1196+4
INDIRU4
CVUI4 4
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 2163
;2162:					WpNameP.fontsize.w, WpNameP.fontsize.h, 0, WpNameP.text.styleflags);// DS_CENTER | DS_PROPORTIONAL );
;2163:			}
ADDRGP4 $1390
JUMPV
LABELV $1389
line 2164
;2164:			else {
line 2166
;2165:				// vertical ammo counters
;2166:				if ( icoS.param == 1 ) {
ADDRLP4 4+1036
INDIRI4
CNSTI4 1
NEI4 $1400
line 2167
;2167:					int x = icoX + ico.rect.w;
ADDRLP4 3748
ADDRLP4 2432
INDIRF4
ADDRLP4 1216+1088+8
INDIRF4
ADDF4
CVFI4 4
ASGNI4
line 2169
;2168:
;2169:					if ( WpNameP.text.styleflags & DS_RIGHT )
ADDRLP4 2536+1196+4
INDIRU4
CNSTU4 16
BANDU4
CNSTU4 0
EQU4 $1405
line 2170
;2170:						x += (3 * WpNameP.fontsize.w);
ADDRLP4 3748
ADDRLP4 3748
INDIRI4
CVIF4 4
ADDRLP4 2536+1120
INDIRF4
CNSTF4 1077936128
MULF4
ADDF4
CVFI4 4
ASGNI4
LABELV $1405
line 2172
;2171:
;2172:					CG_DrawString( x, icoY + (ico.rect.h - WpNameP.fontsize.h) / 2, buf, fadeColor,
ADDRLP4 3748
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 2428
INDIRF4
ADDRLP4 1216+1088+12
INDIRF4
ADDRLP4 2536+1120+4
INDIRF4
SUBF4
CNSTF4 1056964608
MULF4
ADDF4
ARGF4
ADDRLP4 2476
ARGP4
ADDRLP4 2472
INDIRP4
ARGP4
ADDRLP4 2536+1120
INDIRF4
ARGF4
ADDRLP4 2536+1120+4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 2536+1196+4
INDIRU4
CVUI4 4
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 2174
;2173:						WpNameP.fontsize.w, WpNameP.fontsize.h, 0, WpNameP.text.styleflags );// DS_RIGHT );
;2174:				}
ADDRGP4 $1401
JUMPV
LABELV $1400
line 2175
;2175:				else {
line 2176
;2176:					CG_DrawString( icoX + icoS.rect.w - 1 + (3 * WpNameP.fontsize.w), icoY + (ico.rect.h - WpNameP.fontsize.h) / 2, buf, fadeColor,
ADDRLP4 2432
INDIRF4
ADDRLP4 4+1088+8
INDIRF4
ADDF4
CNSTF4 1065353216
SUBF4
ADDRLP4 2536+1120
INDIRF4
CNSTF4 1077936128
MULF4
ADDF4
ARGF4
ADDRLP4 2428
INDIRF4
ADDRLP4 1216+1088+12
INDIRF4
ADDRLP4 2536+1120+4
INDIRF4
SUBF4
CNSTF4 1056964608
MULF4
ADDF4
ARGF4
ADDRLP4 2476
ARGP4
ADDRLP4 2472
INDIRP4
ARGP4
ADDRLP4 2536+1120
INDIRF4
ARGF4
ADDRLP4 2536+1120+4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 2536+1196+4
INDIRU4
CVUI4 4
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 2178
;2177:						WpNameP.fontsize.w, WpNameP.fontsize.h, 0, WpNameP.text.styleflags );// DS_RIGHT );
;2178:				}
LABELV $1401
line 2180
;2179:
;2180:			}
LABELV $1390
line 2181
;2181:		}
LABELV $1384
LABELV $1376
line 2183
;2182:
;2183:		if ( weaponSelect < 3 )
ADDRLP4 2440
INDIRI4
CNSTI4 3
GEI4 $1431
line 2184
;2184:			icoX += icoS.rect.w;
ADDRLP4 2432
ADDRLP4 2432
INDIRF4
ADDRLP4 4+1088+8
INDIRF4
ADDF4
ASGNF4
ADDRGP4 $1432
JUMPV
LABELV $1431
line 2186
;2185:		else
;2186:			icoY += icoS.rect.h + itm->margin.top;
ADDRLP4 2428
ADDRLP4 2428
INDIRF4
ADDRLP4 4+1088+12
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 1184
ADDP4
INDIRF4
ADDF4
ADDF4
ASGNF4
LABELV $1432
line 2187
;2187:	}
LABELV $1335
line 2117
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1334
line 2190
;2188:
;2189:	// draw selected weapon name
;2190:	if (cg_weapons[cg.weaponSelect].item && weaponSelect == 1) {
ADDRGP4 cg+236704
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons+4
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1437
ADDRLP4 2440
INDIRI4
CNSTI4 1
NEI4 $1437
line 2191
;2191:		name = cg_weapons[cg.weaponSelect].item->pickup_name;
ADDRLP4 2508
ADDRGP4 cg+236704
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons+4
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRP4
ASGNP4
line 2192
;2192:		if ( name ) {
ADDRLP4 2508
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1443
line 2193
;2193:			item_t WpNameP = dyn_itemArray[WeapListSelName_idx];
ADDRLP4 2536
ADDRGP4 WeapListSelName_idx
INDIRI4
CNSTI4 1212
MULI4
ADDRGP4 dyn_itemArray
ADDP4
INDIRB
ASGNB 1212
line 2195
;2194:
;2195:			CG_DrawString( itm->rect.x, icoY - (WpNameP.fontsize.h + 6), name, fadeColor,
ADDRFP4 0
INDIRP4
CNSTI4 1088
ADDP4
INDIRF4
ARGF4
ADDRLP4 2428
INDIRF4
ADDRLP4 2536+1120+4
INDIRF4
CNSTF4 1086324736
ADDF4
SUBF4
ARGF4
ADDRLP4 2508
INDIRP4
ARGP4
ADDRLP4 2472
INDIRP4
ARGP4
ADDRLP4 2536+1120
INDIRF4
ARGF4
ADDRLP4 2536+1120+4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 2536+1196+4
INDIRU4
CNSTU4 2
BORU4
CVUI4 4
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 2197
;2196:				WpNameP.fontsize.w, WpNameP.fontsize.h, 0, WpNameP.text.styleflags | DS_FORCE_COLOR );// DS_SHADOW | DS_PROPORTIONAL | DS_CENTER | DS_FORCE_COLOR);
;2197:		}
LABELV $1443
line 2198
;2198:	}
LABELV $1437
line 2199
;2199:	trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 2200
;2200:}
LABELV $1278
endproc CG_DrawWeaponSelect 3752 32
export CG_DrawWeaponSelect_H
proc CG_DrawWeaponSelect_H 4 4
line 2203
;2201:
;2202:// horizontal ammo
;2203:void CG_DrawWeaponSelect_H( item_t *itm ) {
line 2204
;2204:	if (abs(cg_drawWeaponSelect.integer) < 3) {
ADDRGP4 cg_drawWeaponSelect+12
INDIRI4
ARGI4
ADDRLP4 0
ADDRGP4 abs
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
GEI4 $1453
line 2205
;2205:		CG_DrawWeaponSelect(itm);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_DrawWeaponSelect
CALLV
pop
line 2206
;2206:	}
LABELV $1453
line 2207
;2207:}
LABELV $1452
endproc CG_DrawWeaponSelect_H 4 4
export CG_DrawWeaponSelect_V
proc CG_DrawWeaponSelect_V 4 4
line 2210
;2208:
;2209:// vertical ammo
;2210:void CG_DrawWeaponSelect_V( item_t *itm ) {
line 2211
;2211:	if (abs(cg_drawWeaponSelect.integer) >= 3) {
ADDRGP4 cg_drawWeaponSelect+12
INDIRI4
ARGI4
ADDRLP4 0
ADDRGP4 abs
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $1457
line 2212
;2212:		CG_DrawWeaponSelect(itm);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_DrawWeaponSelect
CALLV
pop
line 2213
;2213:	}
LABELV $1457
line 2214
;2214:}
LABELV $1456
endproc CG_DrawWeaponSelect_V 4 4
proc CG_WeaponSelectable 0 0
line 2323
;2215:#else
;2216:#define AMMO_FONT_SIZE 12
;2217:void CG_DrawWeaponSelect( void ) {
;2218:	int		i;
;2219:	int		bits;
;2220:	int		count;
;2221:	int		x, y;
;2222:	int		dx, dy;
;2223:	int		weaponSelect;
;2224:	const char *name;
;2225:	float	*color;
;2226:	char	buf[16];
;2227:
;2228:	// don't display if dead
;2229:	if ( cg.predictedPlayerState.stats[STAT_HEALTH] <= 0 || cg_drawWeaponSelect.integer == 0 ) {
;2230:		return;
;2231:	}
;2232:
;2233:	if ( cg_drawWeaponSelect.integer < 0 ) {
;2234:		color = colorWhite;
;2235:	} else {
;2236:		color = CG_FadeColor( cg.weaponSelectTime, WEAPON_SELECT_TIME );
;2237:		if ( !color ) {
;2238:			return;
;2239:		}
;2240:	}
;2241:	trap_R_SetColor( color );
;2242:
;2243:	weaponSelect = abs( cg_drawWeaponSelect.integer );
;2244:
;2245:	// showing weapon select clears pickup item display, but not the blend blob
;2246:	cg.itemPickupTime = 0;
;2247:
;2248:	// count the number of weapons owned
;2249:	bits = cg.snap->ps.stats[STAT_WEAPONS];
;2250:	count = 0;
;2251:	for ( i = WP_GAUNTLET; i < MAX_WEAPONS; i++ ) {
;2252:		if ( bits & (1 << i) ) {
;2253:			count++;
;2254:		}
;2255:	}
;2256:
;2257:	if ( weaponSelect < 3 ) {
;2258:		x = 320 - count * 20;
;2259:		y = cgs.screenYmax + 1 - 100; // - STATUSBAR_HEIGHT - 40
;2260:		dx = 40;
;2261:		dy = 0;
;2262:	} else {
;2263:		x = cgs.screenXmin + 6;
;2264:		y = 240 - count * 20;
;2265:		dx = 0;
;2266:		dy = 40;
;2267:	}
;2268:
;2269:	for ( i = WP_GAUNTLET; i < MAX_WEAPONS; i++ ) {
;2270:		if ( !(bits & (1 << i)) ) {
;2271:			continue;
;2272:		}
;2273:
;2274:		CG_RegisterWeapon(i);
;2275:
;2276:		// draw weapon icon
;2277:		CG_DrawPic( x, y, 32, 32, cg_weapons[i].weaponIcon );
;2278:
;2279:		// draw selection marker
;2280:		if ( i == cg.weaponSelect ) {
;2281:			CG_DrawPic( x - 4, y - 4, 32 + 8, 32 + 8, cgs.media.selectShader );
;2282:		}
;2283:
;2284:		// no ammo cross on top
;2285:		if ( !cg.snap->ps.ammo[i] ) {
;2286:			CG_DrawPic( x, y, 32, 32, cgs.media.noammoShader );
;2287:		}
;2288:		else if ( weaponSelect > 1 && cg.snap->ps.ammo[i] > 0 ) {
;2289:			// ammo counter
;2290:			BG_sprintf(buf, "%i", cg.snap->ps.ammo[i]);
;2291:			if ( weaponSelect == 2 ) {
;2292:				// horizontal ammo counters
;2293:				CG_DrawString( x + 32 / 2, y - 20, buf, color, AMMO_FONT_SIZE, AMMO_FONT_SIZE, 0, DS_CENTER | DS_PROPORTIONAL );
;2294:			}
;2295:			else {
;2296:				// vectical ammo counters
;2297:				CG_DrawString( x + 39 + (3 * AMMO_FONT_SIZE), y + (32 - AMMO_FONT_SIZE) / 2, buf, color, AMMO_FONT_SIZE, AMMO_FONT_SIZE, 0, DS_RIGHT );
;2298:			}
;2299:		}
;2300:
;2301:		x += dx;
;2302:		y += dy;
;2303:	}
;2304:
;2305:	// draw the selected name
;2306:	if ( cg_weapons[cg.weaponSelect].item && weaponSelect == 1 ) {
;2307:		name = cg_weapons[cg.weaponSelect].item->pickup_name;
;2308:		if ( name ) {
;2309:			CG_DrawString( 320, y - 22, name, color, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, DS_SHADOW | DS_PROPORTIONAL | DS_CENTER | DS_FORCE_COLOR );
;2310:		}
;2311:	}
;2312:
;2313:	trap_R_SetColor( NULL );
;2314:}
;2315:#endif
;2316:
;2317:
;2318:/*
;2319:===============
;2320:CG_WeaponSelectable
;2321:===============
;2322:*/
;2323:static qboolean CG_WeaponSelectable( int i ) {
line 2324
;2324:	if ( !cg.snap->ps.ammo[i] ) {
ADDRFP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1461
line 2325
;2325:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $1460
JUMPV
LABELV $1461
line 2327
;2326:	}
;2327:	if ( ! (cg.snap->ps.stats[ STAT_WEAPONS ] & ( 1 << i ) ) ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 236
ADDP4
INDIRI4
CNSTI4 1
ADDRFP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $1464
line 2328
;2328:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $1460
JUMPV
LABELV $1464
line 2331
;2329:	}
;2330:
;2331:	return qtrue;
CNSTI4 1
RETI4
LABELV $1460
endproc CG_WeaponSelectable 0 0
export CG_NextWeapon_f
proc CG_NextWeapon_f 16 4
line 2340
;2332:}
;2333:
;2334:
;2335:/*
;2336:===============
;2337:CG_NextWeapon_f
;2338:===============
;2339:*/
;2340:void CG_NextWeapon_f( void ) {
line 2344
;2341:	int		i;
;2342:	int		original;
;2343:
;2344:	if ( !cg.snap ) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1468
line 2345
;2345:		return;
ADDRGP4 $1467
JUMPV
LABELV $1468
line 2348
;2346:	}
;2347:
;2348:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+245636
ADDRGP4 cg+234764
INDIRI4
ASGNI4
line 2350
;2349:
;2350:	if ( cg.snap->ps.pm_flags & PMF_FOLLOW || cg.demoPlayback ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $1477
ADDRGP4 cg+8
INDIRI4
CNSTI4 0
EQI4 $1473
LABELV $1477
line 2351
;2351:		return;
ADDRGP4 $1467
JUMPV
LABELV $1473
line 2354
;2352:	}
;2353:
;2354:	original = cg.weaponSelect;
ADDRLP4 4
ADDRGP4 cg+236704
INDIRI4
ASGNI4
line 2356
;2355:
;2356:	for ( i = 0 ; i < MAX_WEAPONS ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1479
line 2357
;2357:		cg.weaponSelect++;
ADDRLP4 8
ADDRGP4 cg+236704
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2358
;2358:		if ( cg.weaponSelect == MAX_WEAPONS ) {
ADDRGP4 cg+236704
INDIRI4
CNSTI4 16
NEI4 $1484
line 2359
;2359:			cg.weaponSelect = 0;
ADDRGP4 cg+236704
CNSTI4 0
ASGNI4
line 2360
;2360:		}
LABELV $1484
line 2361
;2361:		if ( cg.weaponSelect == WP_GAUNTLET && !cg.vr_controller_type ) {
ADDRGP4 cg+236704
INDIRI4
CNSTI4 1
NEI4 $1488
ADDRGP4 cg+282972
INDIRI4
CNSTI4 0
NEI4 $1488
line 2362
;2362:			continue; // never cycle to gauntlet (except VR because of limited amount of buttons)
ADDRGP4 $1480
JUMPV
LABELV $1488
line 2364
;2363:		}
;2364:		if ( CG_WeaponSelectable( cg.weaponSelect ) ) {
ADDRGP4 cg+236704
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $1492
line 2365
;2365:			break;
ADDRGP4 $1481
JUMPV
LABELV $1492
line 2367
;2366:		}
;2367:	}
LABELV $1480
line 2356
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1479
LABELV $1481
line 2368
;2368:	if ( i == MAX_WEAPONS ) {
ADDRLP4 0
INDIRI4
CNSTI4 16
NEI4 $1495
line 2369
;2369:		cg.weaponSelect = original;
ADDRGP4 cg+236704
ADDRLP4 4
INDIRI4
ASGNI4
line 2370
;2370:	}
LABELV $1495
line 2371
;2371:}
LABELV $1467
endproc CG_NextWeapon_f 16 4
export CG_PrevWeapon_f
proc CG_PrevWeapon_f 16 4
line 2379
;2372:
;2373:
;2374:/*
;2375:===============
;2376:CG_PrevWeapon_f
;2377:===============
;2378:*/
;2379:void CG_PrevWeapon_f( void ) {
line 2383
;2380:	int		i;
;2381:	int		original;
;2382:
;2383:	if ( !cg.snap ) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1499
line 2384
;2384:		return;
ADDRGP4 $1498
JUMPV
LABELV $1499
line 2387
;2385:	}
;2386:
;2387:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+245636
ADDRGP4 cg+234764
INDIRI4
ASGNI4
line 2389
;2388:
;2389:	if ( cg.snap->ps.pm_flags & PMF_FOLLOW || cg.demoPlayback ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $1508
ADDRGP4 cg+8
INDIRI4
CNSTI4 0
EQI4 $1504
LABELV $1508
line 2390
;2390:		return;
ADDRGP4 $1498
JUMPV
LABELV $1504
line 2393
;2391:	}
;2392:
;2393:	original = cg.weaponSelect;
ADDRLP4 4
ADDRGP4 cg+236704
INDIRI4
ASGNI4
line 2395
;2394:
;2395:	for ( i = 0 ; i < MAX_WEAPONS ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1510
line 2396
;2396:		cg.weaponSelect--;
ADDRLP4 8
ADDRGP4 cg+236704
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 2397
;2397:		if ( cg.weaponSelect == -1 ) {
ADDRGP4 cg+236704
INDIRI4
CNSTI4 -1
NEI4 $1515
line 2398
;2398:			cg.weaponSelect = MAX_WEAPONS - 1;
ADDRGP4 cg+236704
CNSTI4 15
ASGNI4
line 2399
;2399:		}
LABELV $1515
line 2400
;2400:		if ( cg.weaponSelect == WP_GAUNTLET && !cg.vr_controller_type ) {
ADDRGP4 cg+236704
INDIRI4
CNSTI4 1
NEI4 $1519
ADDRGP4 cg+282972
INDIRI4
CNSTI4 0
NEI4 $1519
line 2401
;2401:			continue; // never cycle to gauntlet, except in VR
ADDRGP4 $1511
JUMPV
LABELV $1519
line 2403
;2402:		}
;2403:		if ( CG_WeaponSelectable( cg.weaponSelect ) ) {
ADDRGP4 cg+236704
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $1523
line 2404
;2404:			break;
ADDRGP4 $1512
JUMPV
LABELV $1523
line 2406
;2405:		}
;2406:	}
LABELV $1511
line 2395
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1510
LABELV $1512
line 2407
;2407:	if ( i == MAX_WEAPONS ) {
ADDRLP4 0
INDIRI4
CNSTI4 16
NEI4 $1526
line 2408
;2408:		cg.weaponSelect = original;
ADDRGP4 cg+236704
ADDRLP4 4
INDIRI4
ASGNI4
line 2409
;2409:	}
LABELV $1526
line 2410
;2410:}
LABELV $1498
endproc CG_PrevWeapon_f 16 4
export CG_Weapon_f
proc CG_Weapon_f 16 4
line 2418
;2411:
;2412:
;2413:/*
;2414:===============
;2415:CG_Weapon_f
;2416:===============
;2417:*/
;2418:void CG_Weapon_f( void ) {
line 2421
;2419:	int		num;
;2420:
;2421:	if ( !cg.snap ) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1530
line 2422
;2422:		return;
ADDRGP4 $1529
JUMPV
LABELV $1530
line 2425
;2423:	}
;2424:
;2425:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+245636
ADDRGP4 cg+234764
INDIRI4
ASGNI4
line 2427
;2426:
;2427:	if ( cg.snap->ps.pm_flags & PMF_FOLLOW || cg.demoPlayback ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $1539
ADDRGP4 cg+8
INDIRI4
CNSTI4 0
EQI4 $1535
LABELV $1539
line 2428
;2428:		return;
ADDRGP4 $1529
JUMPV
LABELV $1535
line 2431
;2429:	}
;2430:
;2431:	num = atoi( CG_Argv( 1 ) );
CNSTI4 1
ARGI4
ADDRLP4 4
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 8
INDIRI4
ASGNI4
line 2433
;2432:
;2433:	if ( num < 1 || num > MAX_WEAPONS-1 ) {
ADDRLP4 0
INDIRI4
CNSTI4 1
LTI4 $1542
ADDRLP4 0
INDIRI4
CNSTI4 15
LEI4 $1540
LABELV $1542
line 2434
;2434:		return;
ADDRGP4 $1529
JUMPV
LABELV $1540
line 2437
;2435:	}
;2436:#ifdef USE_VR
;2437:	if ( ! ( cg.snap->ps.stats[STAT_WEAPONS] & ( 1 << num ) ) ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 236
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $1543
line 2438
;2438:		if ( num != WP_VR_CONTROLLER ) // VR Controller still selectable for the menu
ADDRLP4 0
INDIRI4
CNSTI4 11
EQI4 $1546
line 2439
;2439:			return;		// don't have the weapon
ADDRGP4 $1529
JUMPV
LABELV $1546
line 2440
;2440:	}
LABELV $1543
line 2442
;2441:#endif
;2442:	cg.weaponSelect = num;
ADDRGP4 cg+236704
ADDRLP4 0
INDIRI4
ASGNI4
line 2443
;2443:}
LABELV $1529
endproc CG_Weapon_f 16 4
export CG_WeaponSelectorSelect_f
proc CG_WeaponSelectorSelect_f 0 0
line 2448
;2444:
;2445:#ifdef USE_WEAPON_WHEEL
;2446://Selects the currently selected weapon (if one _is_ selected)
;2447:void CG_WeaponSelectorSelect_f(void)
;2448:{
line 2449
;2449:	cg.weaponSelectorTime = 0;
ADDRGP4 cg+282996
CNSTI4 0
ASGNI4
line 2451
;2450:
;2451:	if (cg.weaponSelectorSelection == WP_NONE ||
ADDRGP4 cg+282992
INDIRI4
CNSTI4 0
EQI4 $1556
ADDRGP4 cg+236704
INDIRI4
ADDRGP4 cg+282992
INDIRI4
NEI4 $1551
LABELV $1556
line 2453
;2452:		cg.weaponSelect == cg.weaponSelectorSelection)
;2453:	{
line 2454
;2454:		return;
ADDRGP4 $1549
JUMPV
LABELV $1551
line 2457
;2455:	}
;2456:
;2457:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+245636
ADDRGP4 cg+234764
INDIRI4
ASGNI4
line 2458
;2458:	cg.weaponSelect = cg.weaponSelectorSelection;
ADDRGP4 cg+236704
ADDRGP4 cg+282992
INDIRI4
ASGNI4
line 2459
;2459:	cg.weaponSelectorSelection = WP_NONE;
ADDRGP4 cg+282992
CNSTI4 0
ASGNI4
line 2460
;2460:}
LABELV $1549
endproc CG_WeaponSelectorSelect_f 0 0
export CG_DrawWeaponSelector
proc CG_DrawWeaponSelector 672 16
line 2463
;2461:
;2462:void CG_DrawWeaponSelector( centity_t *cent )
;2463:{
line 2467
;2464:	vec3_t controllerOrigin, controllerAngles, selectorOrigin;
;2465:	vec3_t wheelAngles, wheelOrigin, beamOrigin, wheelForward, wheelRight, wheelUp;
;2466:
;2467:	const int selectorMode = (int)trap_Cvar_VariableValue("vr_weaponSelectorMode");
ADDRGP4 $1563
ARGP4
ADDRLP4 228
ADDRGP4 trap_Cvar_VariableValue
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 228
INDIRF4
CVFI4 4
ASGNI4
line 2469
;2468:
;2469:	float dist = 10.0f;
ADDRLP4 92
CNSTF4 1092616192
ASGNF4
line 2470
;2470:	float radius = 4.0f;// 4.0f;
ADDRLP4 28
CNSTF4 1082130432
ASGNF4
line 2471
;2471:	float scale = 0.05f;
ADDRLP4 60
CNSTF4 1028443341
ASGNF4
line 2474
;2472:	float frac;
;2473:
;2474:	const int switchThumbsticks = (int)trap_Cvar_VariableValue("vr_switchThumbsticks");
ADDRGP4 $1564
ARGP4
ADDRLP4 232
ADDRGP4 trap_Cvar_VariableValue
CALLF4
ASGNF4
ADDRLP4 168
ADDRLP4 232
INDIRF4
CVFI4 4
ASGNI4
line 2475
;2475:	const int thumb = switchThumbsticks != 0 ? THUMB_LEFT : THUMB_RIGHT;
ADDRLP4 168
INDIRI4
CNSTI4 0
EQI4 $1566
ADDRLP4 236
CNSTI4 0
ASGNI4
ADDRGP4 $1567
JUMPV
LABELV $1566
ADDRLP4 236
CNSTI4 1
ASGNI4
LABELV $1567
ADDRLP4 224
ADDRLP4 236
INDIRI4
ASGNI4
line 2478
;2476:	
;2477:	float thumbstickValue;
;2478:	float thumbstickAxisX = 0.0f;
ADDRLP4 176
CNSTF4 0
ASGNF4
line 2479
;2479:	float thumbstickAxisY = 0.0f;
ADDRLP4 180
CNSTF4 0
ASGNF4
line 2481
;2480:	float a;
;2481:	float x = 0.0f;
ADDRLP4 84
CNSTF4 0
ASGNF4
line 2482
;2482:	float y = 0.0f;
ADDRLP4 88
CNSTF4 0
ASGNF4
line 2486
;2483:	float len;
;2484:	int weaponId;
;2485:	float weaponAngles;
;2486:	qboolean selected = qfalse;
ADDRLP4 80
CNSTI4 0
ASGNI4
line 2487
;2487:	int angleIndex = 0;
ADDRLP4 24
CNSTI4 0
ASGNI4
line 2493
;2488:
;2489:#ifdef USE_VR
;2490:	vec3_t ctrlAngles, ctrlPos, ctrlOffset, HMDposition;
;2491:	// GUNNM TODO avoid the use of VR_get_client_xxx() functions,
;2492:	// if you want to show other players selector
;2493:	VR_get_cent_controller_angles( cent, ctrlAngles, SideRIGHT );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 64
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 VR_get_cent_controller_angles
CALLV
pop
line 2494
;2494:	VR_get_client_controller_position( SideRIGHT, ctrlPos);
CNSTI4 1
ARGI4
ADDRLP4 96
ARGP4
ADDRGP4 VR_get_client_controller_position
CALLV
pop
line 2495
;2495:	VR_get_client_controller_offset( SideRIGHT, ctrlOffset);
CNSTI4 1
ARGI4
ADDRLP4 108
ARGP4
ADDRGP4 VR_get_client_controller_offset
CALLV
pop
line 2496
;2496:	VR_get_client_HMD_position( HMDposition ); 
ADDRLP4 212
ARGP4
ADDRGP4 VR_get_client_HMD_position
CALLV
pop
line 2499
;2497:#endif
;2498:
;2499:	if ( cg.weaponSelectorTime == 0 ) {
ADDRGP4 cg+282996
INDIRI4
CNSTI4 0
NEI4 $1568
line 2500
;2500:		cg.weaponSelectorTime = cg.time;
ADDRGP4 cg+282996
ADDRGP4 cg+234764
INDIRI4
ASGNI4
line 2509
;2501:
;2502:#ifdef USE_NATIVE_HACK
;2503:		VectorCopy(ctrlAngles,   cg.weaponSelectorAngles);
;2504:		VectorCopy(ctrlPos, cg.weaponSelectorOrigin);
;2505:		VectorCopy(ctrlOffset, cg.weaponSelectorOffset);
;2506:#endif
;2507:
;2508:#ifdef USE_VR_QVM
;2509:		VectorCopy(ctrlAngles, cg.weaponSelectorAngles);
ADDRGP4 cg+283000
ADDRLP4 64
INDIRB
ASGNB 12
line 2510
;2510:		VectorCopy(ctrlPos, cg.weaponSelectorOrigin);
ADDRGP4 cg+283012
ADDRLP4 96
INDIRB
ASGNB 12
line 2511
;2511:		VectorCopy(ctrlOffset, cg.weaponSelectorOffset);
ADDRGP4 cg+283024
ADDRLP4 108
INDIRB
ASGNB 12
line 2513
;2512:#endif
;2513:	}
LABELV $1568
line 2515
;2514:
;2515:	if ( selectorMode == WS_HMD ) // HMD locked
ADDRLP4 4
INDIRI4
CNSTI4 1
NEI4 $1576
line 2516
;2516:	{
line 2520
;2517:#ifdef USE_NATIVE_HACK
;2518:		VectorCopy(vrinfo->hmdinfo.angles.actual, cg.weaponSelectorAngles);
;2519:#else
;2520:		VectorCopy(cg.predictedPlayerState.viewangles, cg.weaponSelectorAngles);
ADDRGP4 cg+283000
ADDRGP4 cg+234796+152
INDIRB
ASGNB 12
line 2522
;2521:#endif
;2522:		VectorCopy(HMDposition, cg.weaponSelectorOrigin);
ADDRGP4 cg+283012
ADDRLP4 212
INDIRB
ASGNB 12
line 2524
;2523:
;2524:		VectorClear(cg.weaponSelectorOffset);
ADDRGP4 cg+283024
CNSTF4 0
ASGNF4
ADDRGP4 cg+283024+4
CNSTF4 0
ASGNF4
ADDRGP4 cg+283024+8
CNSTF4 0
ASGNF4
line 2525
;2525:		dist = (trap_Cvar_VariableValue("vr_hudDepth") + 3) * 3;
ADDRGP4 $1587
ARGP4
ADDRLP4 240
ADDRGP4 trap_Cvar_VariableValue
CALLF4
ASGNF4
ADDRLP4 92
ADDRLP4 240
INDIRF4
CNSTF4 1077936128
ADDF4
CNSTF4 1077936128
MULF4
ASGNF4
line 2526
;2526:		radius = dist / 3.0f;
ADDRLP4 28
ADDRLP4 92
INDIRF4
CNSTF4 1051372203
MULF4
ASGNF4
line 2527
;2527:		scale = 0.04f + 0.01f * (trap_Cvar_VariableValue("vr_hudDepth") + 1);
ADDRGP4 $1587
ARGP4
ADDRLP4 244
ADDRGP4 trap_Cvar_VariableValue
CALLF4
ASGNF4
ADDRLP4 60
ADDRLP4 244
INDIRF4
CNSTF4 1065353216
ADDF4
CNSTF4 1008981770
MULF4
CNSTF4 1025758986
ADDF4
ASGNF4
line 2528
;2528:	}
LABELV $1576
line 2530
;2529:
;2530:	frac = (cg.time - cg.weaponSelectorTime) / 100.0f;
ADDRLP4 8
ADDRGP4 cg+234764
INDIRI4
ADDRGP4 cg+282996
INDIRI4
SUBI4
CVIF4 4
CNSTF4 1008981770
MULF4
ASGNF4
line 2531
;2531:	if (frac > 1.0f) frac = 1.0f;
ADDRLP4 8
INDIRF4
CNSTF4 1065353216
LEF4 $1590
ADDRLP4 8
CNSTF4 1065353216
ASGNF4
LABELV $1590
line 2533
;2532:
;2533:	CG_CalculateWeaponPosition_VR_6Dof( controllerOrigin, controllerAngles );
ADDRLP4 184
ARGP4
ADDRLP4 156
ARGP4
ADDRGP4 CG_CalculateWeaponPosition_VR_6Dof
CALLV
pop
line 2535
;2534:
;2535:	VectorSubtract(ctrlPos, cg.weaponSelectorOrigin, ctrlOffset);
ADDRLP4 108
ADDRLP4 96
INDIRF4
ADDRGP4 cg+283012
INDIRF4
SUBF4
ASGNF4
ADDRLP4 108+4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg+283012+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 108+8
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg+283012+8
INDIRF4
SUBF4
ASGNF4
line 2537
;2536:
;2537:	if ( selectorMode == WS_ROLL) {
ADDRLP4 4
INDIRI4
CNSTI4 4
NEI4 $1601
line 2541
;2538:#ifdef USE_NATIVE_HACK
;2539:		CG_CalculateVRPositionInWorld(ctrlPos/*, ctrlOffset*/, ctrlAngles, wheelOrigin, wheelAngles);
;2540:#else
;2541:		CG_CalculateVRPositionInWorld(ctrlPos/*, ctrlOffset*/, ctrlAngles, wheelOrigin, wheelAngles);
ADDRLP4 96
ARGP4
ADDRLP4 64
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 48
ARGP4
ADDRGP4 CG_CalculateVRPositionInWorld
CALLV
pop
line 2543
;2542:#endif
;2543:	}
ADDRGP4 $1602
JUMPV
LABELV $1601
line 2544
;2544:	else {
line 2545
;2545:		CG_CalculateVRPositionInWorld(cg.weaponSelectorOrigin/*, cg.weaponSelectorOffset*/, cg.weaponSelectorAngles, wheelOrigin, wheelAngles);
ADDRGP4 cg+283012
ARGP4
ADDRGP4 cg+283000
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 48
ARGP4
ADDRGP4 CG_CalculateVRPositionInWorld
CALLV
pop
line 2546
;2546:	}
LABELV $1602
line 2548
;2547:
;2548:	AngleVectors(wheelAngles, wheelForward, wheelRight, wheelUp);
ADDRLP4 48
ARGP4
ADDRLP4 120
ARGP4
ADDRLP4 132
ARGP4
ADDRLP4 144
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 2550
;2549:
;2550:	if (selectorMode == WS_CONTROLLER)
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $1605
line 2551
;2551:	{
line 2552
;2552:		VectorCopy(controllerOrigin, wheelOrigin);
ADDRLP4 12
ADDRLP4 184
INDIRB
ASGNB 12
line 2553
;2553:	}
LABELV $1605
line 2555
;2554:	else
;2555:	{
line 2558
;2556:		// Do not shift weapon wheel down in order to fit inside comfort vignette
;2557:		//VectorMA(wheelOrigin, -3.0f, wheelUp, wheelOrigin);
;2558:	}
LABELV $1606
line 2560
;2559:
;2560:	if ( cg.vr_controller_type == 1 && selectorMode == WS_ROLL) {
ADDRGP4 cg+282972
INDIRI4
CNSTI4 1
NEI4 $1607
ADDRLP4 4
INDIRI4
CNSTI4 4
NEI4 $1607
line 2561
;2561:		VectorCopy(client_weapon.muzzle, wheelOrigin);
ADDRLP4 12
ADDRGP4 client_weapon+36
INDIRB
ASGNB 12
line 2562
;2562:		dist = 1.0f;
ADDRLP4 92
CNSTF4 1065353216
ASGNF4
line 2563
;2563:	}
LABELV $1607
line 2565
;2564:
;2565:	VectorCopy(wheelOrigin, beamOrigin);
ADDRLP4 196
ADDRLP4 12
INDIRB
ASGNB 12
line 2566
;2566:	VectorMA(wheelOrigin, (dist * ((selectorMode == WS_CONTROLLER) ? frac : 1.0f)), wheelForward, wheelOrigin);
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $1620
ADDRLP4 240
ADDRLP4 8
INDIRF4
ASGNF4
ADDRGP4 $1621
JUMPV
LABELV $1620
ADDRLP4 240
CNSTF4 1065353216
ASGNF4
LABELV $1621
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRLP4 120
INDIRF4
ADDRLP4 92
INDIRF4
ADDRLP4 240
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $1622
ADDRLP4 244
ADDRLP4 8
INDIRF4
ASGNF4
ADDRGP4 $1623
JUMPV
LABELV $1622
ADDRLP4 244
CNSTF4 1065353216
ASGNF4
LABELV $1623
ADDRLP4 12+4
ADDRLP4 12+4
INDIRF4
ADDRLP4 120+4
INDIRF4
ADDRLP4 92
INDIRF4
ADDRLP4 244
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $1624
ADDRLP4 248
ADDRLP4 8
INDIRF4
ASGNF4
ADDRGP4 $1625
JUMPV
LABELV $1624
ADDRLP4 248
CNSTF4 1065353216
ASGNF4
LABELV $1625
ADDRLP4 12+8
ADDRLP4 12+8
INDIRF4
ADDRLP4 120+8
INDIRF4
ADDRLP4 92
INDIRF4
ADDRLP4 248
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 2567
;2567:	VectorCopy(wheelOrigin, selectorOrigin);
ADDRLP4 32
ADDRLP4 12
INDIRB
ASGNB 12
line 2574
;2568:
;2569:#ifdef USE_NATIVE_HACK
;2570:	a = atan2(vrinfo->thumbstick_location[thumb][0], vrinfo->thumbstick_location[thumb][1]);
;2571:	thumbstickValue = math_length(vrinfo->thumbstick_location[thumb][0], vrinfo->thumbstick_location[thumb][1]);
;2572:#else
;2573:	// GUNNM TODO thumbstick_location is not sent in snapshot at the moment
;2574:	a = 0.0f;
ADDRLP4 76
CNSTF4 0
ASGNF4
line 2575
;2575:	thumbstickValue = 0.0f;
ADDRLP4 172
CNSTF4 0
ASGNF4
line 2578
;2576:#endif
;2577:
;2578:	if (thumbstickValue > 0.95f)
ADDRLP4 172
INDIRF4
CNSTF4 1064514355
LEF4 $1626
line 2579
;2579:	{
line 2580
;2580:		thumbstickAxisX = sinf(a) * 0.95f;
ADDRLP4 76
INDIRF4
ARGF4
ADDRLP4 252
ADDRGP4 sinf
CALLI4
ASGNI4
ADDRLP4 176
ADDRLP4 252
INDIRI4
CVIF4 4
CNSTF4 1064514355
MULF4
ASGNF4
line 2581
;2581:		thumbstickAxisY = cosf(a) * 0.95f;
ADDRLP4 76
INDIRF4
ARGF4
ADDRLP4 256
ADDRGP4 cosf
CALLI4
ASGNI4
ADDRLP4 180
ADDRLP4 256
INDIRI4
CVIF4 4
CNSTF4 1064514355
MULF4
ASGNF4
line 2582
;2582:	}
LABELV $1626
line 2584
;2583:
;2584:	if ( selectorMode == WS_CONTROLLER )
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $1628
line 2585
;2585:	{
line 2586
;2586:		x = (sinf(DEG2RAD(wheelAngles[YAW] - controllerAngles[YAW])) / sinf(DEG2RAD(22.5f)));
ADDRLP4 48+4
INDIRF4
ADDRLP4 156+4
INDIRF4
SUBF4
CNSTF4 1016003125
MULF4
ARGF4
ADDRLP4 252
ADDRGP4 sinf
CALLI4
ASGNI4
CNSTF4 1053364187
ARGF4
ADDRLP4 256
ADDRGP4 sinf
CALLI4
ASGNI4
ADDRLP4 84
ADDRLP4 252
INDIRI4
ADDRLP4 256
INDIRI4
DIVI4
CVIF4 4
ASGNF4
line 2587
;2587:		y = ((wheelAngles[PITCH] - controllerAngles[PITCH]) / 22.5f);
ADDRLP4 88
ADDRLP4 48
INDIRF4
ADDRLP4 156
INDIRF4
SUBF4
CNSTF4 1026952033
MULF4
ASGNF4
line 2589
;2588:
;2589:		len = math_length(x, y);
ADDRLP4 84
INDIRF4
ARGF4
ADDRLP4 88
INDIRF4
ARGF4
ADDRLP4 260
ADDRGP4 math_length
CALLF4
ASGNF4
ADDRLP4 208
ADDRLP4 260
INDIRF4
ASGNF4
line 2590
;2590:		if (len > 1.0f)
ADDRLP4 208
INDIRF4
CNSTF4 1065353216
LEF4 $1629
line 2591
;2591:		{
line 2592
;2592:			x *= (1.0f / len);
ADDRLP4 84
ADDRLP4 84
INDIRF4
CNSTF4 1065353216
ADDRLP4 208
INDIRF4
DIVF4
MULF4
ASGNF4
line 2593
;2593:			y *= (1.0f / len);
ADDRLP4 88
ADDRLP4 88
INDIRF4
CNSTF4 1065353216
ADDRLP4 208
INDIRF4
DIVF4
MULF4
ASGNF4
line 2594
;2594:		}
line 2595
;2595:	}
ADDRGP4 $1629
JUMPV
LABELV $1628
line 2597
;2596:	else //selectorMode == WS_HMD
;2597:	{
line 2598
;2598:		x = thumbstickAxisX;
ADDRLP4 84
ADDRLP4 176
INDIRF4
ASGNF4
line 2599
;2599:		y = thumbstickAxisY;
ADDRLP4 88
ADDRLP4 180
INDIRF4
ASGNF4
line 2600
;2600:	}
LABELV $1629
line 2602
;2601:
;2602:	VectorMA(selectorOrigin, radius * x, wheelRight, selectorOrigin);
ADDRLP4 252
ADDRLP4 28
INDIRF4
ADDRLP4 84
INDIRF4
MULF4
ASGNF4
ADDRLP4 32
ADDRLP4 32
INDIRF4
ADDRLP4 132
INDIRF4
ADDRLP4 252
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 32+4
ADDRLP4 32+4
INDIRF4
ADDRLP4 132+4
INDIRF4
ADDRLP4 252
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 32+8
ADDRLP4 32+8
INDIRF4
ADDRLP4 132+8
INDIRF4
ADDRLP4 28
INDIRF4
ADDRLP4 84
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 2603
;2603:	VectorMA(selectorOrigin, radius * y, wheelUp, selectorOrigin);
ADDRLP4 256
ADDRLP4 28
INDIRF4
ADDRLP4 88
INDIRF4
MULF4
ASGNF4
ADDRLP4 32
ADDRLP4 32
INDIRF4
ADDRLP4 144
INDIRF4
ADDRLP4 256
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 32+4
ADDRLP4 32+4
INDIRF4
ADDRLP4 144+4
INDIRF4
ADDRLP4 256
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 32+8
ADDRLP4 32+8
INDIRF4
ADDRLP4 144+8
INDIRF4
ADDRLP4 28
INDIRF4
ADDRLP4 88
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 2606
;2604:
;2605:	// Add the central sphere
;2606:	if ( selectorMode != WS_ROLL)
ADDRLP4 4
INDIRI4
CNSTI4 4
EQI4 $1646
line 2607
;2607:	{
line 2609
;2608:		refEntity_t		blob;
;2609:		memset(&blob, 0, sizeof(blob));
ADDRLP4 260
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2610
;2610:		VectorCopy(selectorOrigin, blob.origin);
ADDRLP4 260+68
ADDRLP4 32
INDIRB
ASGNB 12
line 2611
;2611:		AnglesToAxis(vec3_origin, blob.axis);
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 260+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 2612
;2612:		VectorScale(blob.axis[0], scale - 0.01f, blob.axis[0]);
ADDRLP4 260+28
ADDRLP4 260+28
INDIRF4
ADDRLP4 60
INDIRF4
CNSTF4 1008981770
SUBF4
MULF4
ASGNF4
ADDRLP4 260+28+4
ADDRLP4 260+28+4
INDIRF4
ADDRLP4 60
INDIRF4
CNSTF4 1008981770
SUBF4
MULF4
ASGNF4
ADDRLP4 260+28+8
ADDRLP4 260+28+8
INDIRF4
ADDRLP4 60
INDIRF4
CNSTF4 1008981770
SUBF4
MULF4
ASGNF4
line 2613
;2613:		VectorScale(blob.axis[1], scale - 0.01f, blob.axis[1]);
ADDRLP4 260+28+12
ADDRLP4 260+28+12
INDIRF4
ADDRLP4 60
INDIRF4
CNSTF4 1008981770
SUBF4
MULF4
ASGNF4
ADDRLP4 260+28+12+4
ADDRLP4 260+28+12+4
INDIRF4
ADDRLP4 60
INDIRF4
CNSTF4 1008981770
SUBF4
MULF4
ASGNF4
ADDRLP4 260+28+12+8
ADDRLP4 260+28+12+8
INDIRF4
ADDRLP4 60
INDIRF4
CNSTF4 1008981770
SUBF4
MULF4
ASGNF4
line 2614
;2614:		VectorScale(blob.axis[2], scale - 0.01f, blob.axis[2]);
ADDRLP4 260+28+24
ADDRLP4 260+28+24
INDIRF4
ADDRLP4 60
INDIRF4
CNSTF4 1008981770
SUBF4
MULF4
ASGNF4
ADDRLP4 260+28+24+4
ADDRLP4 260+28+24+4
INDIRF4
ADDRLP4 60
INDIRF4
CNSTF4 1008981770
SUBF4
MULF4
ASGNF4
ADDRLP4 260+28+24+8
ADDRLP4 260+28+24+8
INDIRF4
ADDRLP4 60
INDIRF4
CNSTF4 1008981770
SUBF4
MULF4
ASGNF4
line 2615
;2615:		blob.nonNormalizedAxes = qtrue;
ADDRLP4 260+64
CNSTI4 1
ASGNI4
line 2616
;2616:		blob.hModel = cgs.media.smallSphereModel;
ADDRLP4 260+8
ADDRGP4 cgs+150560+300
INDIRI4
ASGNI4
line 2617
;2617:		trap_R_AddRefEntityToScene(&blob);
ADDRLP4 260
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2618
;2618:	}
LABELV $1646
line 2621
;2619:
;2620:#ifdef USE_LASER_SIGHT
;2621:	if ( selectorMode == WS_CONTROLLER )
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $1696
line 2622
;2622:	{
line 2624
;2623:		byte colour[4];
;2624:		colour[0] = 0x00;
ADDRLP4 260
CNSTU1 0
ASGNU1
line 2625
;2625:		colour[1] = 0x00;
ADDRLP4 260+1
CNSTU1 0
ASGNU1
line 2626
;2626:		colour[2] = 0xff;
ADDRLP4 260+2
CNSTU1 255
ASGNU1
line 2627
;2627:		colour[3] = 0x40;
ADDRLP4 260+3
CNSTU1 64
ASGNU1
line 2628
;2628:		CG_LaserSight(beamOrigin, selectorOrigin, colour, 0.1f);
ADDRLP4 196
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 260
ARGP4
CNSTF4 1036831949
ARGF4
ADDRGP4 CG_LaserSight
CALLV
pop
line 2629
;2629:	}
LABELV $1696
line 2635
;2630:#endif
;2631:
;2632:	//===========================
;2633:	// draw a needle in center
;2634:	//===========================
;2635:	if ( selectorMode == WS_ROLL )
ADDRLP4 4
INDIRI4
CNSTI4 4
NEI4 $1701
line 2636
;2636:	{
line 2642
;2637:		refEntity_t		needleSprite;
;2638:		float anglesCursor;
;2639:		vec3_t angles, iconOrigin, iconBackground, iconForeground;
;2640:		vec3_t forward, up;
;2641:
;2642:		memset(&needleSprite, 0, sizeof(needleSprite));
ADDRLP4 260
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2644
;2643:
;2644:		VectorClear(angles);
ADDRLP4 400
CNSTF4 0
ASGNF4
ADDRLP4 400+4
CNSTF4 0
ASGNF4
ADDRLP4 400+8
CNSTF4 0
ASGNF4
line 2645
;2645:		angles[YAW]		= wheelAngles[YAW];
ADDRLP4 400+4
ADDRLP4 48+4
INDIRF4
ASGNF4
line 2646
;2646:		angles[PITCH]	= wheelAngles[PITCH];
ADDRLP4 400
ADDRLP4 48
INDIRF4
ASGNF4
line 2647
;2647:		angles[ROLL]	= ctrlAngles[ROLL];
ADDRLP4 400+8
ADDRLP4 64+8
INDIRF4
ASGNF4
line 2648
;2648:		anglesCursor	= -angles[ROLL] * 4.0f;
ADDRLP4 460
ADDRLP4 400+8
INDIRF4
NEGF4
CNSTF4 1082130432
MULF4
ASGNF4
line 2649
;2649:		AngleVectors(angles, forward, NULL, up);
ADDRLP4 400
ARGP4
ADDRLP4 424
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 464
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 2651
;2650:
;2651:		VectorCopy(wheelOrigin, iconOrigin);
ADDRLP4 412
ADDRLP4 12
INDIRB
ASGNB 12
line 2652
;2652:		VectorMA(iconOrigin, 0.2f, forward, iconBackground);
ADDRLP4 448
ADDRLP4 412
INDIRF4
ADDRLP4 424
INDIRF4
CNSTF4 1045220557
MULF4
ADDF4
ASGNF4
ADDRLP4 448+4
ADDRLP4 412+4
INDIRF4
ADDRLP4 424+4
INDIRF4
CNSTF4 1045220557
MULF4
ADDF4
ASGNF4
ADDRLP4 448+8
ADDRLP4 412+8
INDIRF4
ADDRLP4 424+8
INDIRF4
CNSTF4 1045220557
MULF4
ADDF4
ASGNF4
line 2653
;2653:		VectorMA(iconOrigin, -0.2f, forward, iconForeground);
ADDRLP4 436
ADDRLP4 412
INDIRF4
ADDRLP4 424
INDIRF4
CNSTF4 3192704205
MULF4
ADDF4
ASGNF4
ADDRLP4 436+4
ADDRLP4 412+4
INDIRF4
ADDRLP4 424+4
INDIRF4
CNSTF4 3192704205
MULF4
ADDF4
ASGNF4
ADDRLP4 436+8
ADDRLP4 412+8
INDIRF4
ADDRLP4 424+8
INDIRF4
CNSTF4 3192704205
MULF4
ADDF4
ASGNF4
line 2654
;2654:		VectorCopy(iconForeground, needleSprite.origin);
ADDRLP4 260+68
ADDRLP4 436
INDIRB
ASGNB 12
line 2656
;2655:	
;2656:		needleSprite.rotation = anglesCursor;
ADDRLP4 260+136
ADDRLP4 460
INDIRF4
ASGNF4
line 2657
;2657:		needleSprite.reType = RT_SPRITE;
ADDRLP4 260
CNSTI4 2
ASGNI4
line 2658
;2658:		needleSprite.customShader = cgs.media.needle;
ADDRLP4 260+112
ADDRGP4 cgs+150560+308
INDIRI4
ASGNI4
line 2659
;2659:		needleSprite.radius = 3.0f;
ADDRLP4 260+132
CNSTF4 1077936128
ASGNF4
line 2660
;2660:		needleSprite.shaderRGBA[0] = 255;
ADDRLP4 260+116
CNSTU1 255
ASGNU1
line 2661
;2661:		needleSprite.shaderRGBA[1] = 255;
ADDRLP4 260+116+1
CNSTU1 255
ASGNU1
line 2662
;2662:		needleSprite.shaderRGBA[2] = 255;
ADDRLP4 260+116+2
CNSTU1 255
ASGNU1
line 2663
;2663:		needleSprite.shaderRGBA[3] = 255;
ADDRLP4 260+116+3
CNSTU1 255
ASGNU1
line 2664
;2664:		trap_R_AddRefEntityToScene(&needleSprite);
ADDRLP4 260
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2665
;2665:	}
LABELV $1701
line 2667
;2666:
;2667:	weaponAngles = 360 / (WP_NUM_WEAPONS - 2);
ADDRLP4 44
CNSTF4 1108344832
ASGNF4
line 2669
;2668:
;2669:	for ( weaponId = WP_GAUNTLET; weaponId < WP_NUM_WEAPONS; ++weaponId )
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $1735
line 2670
;2670:	{
line 2673
;2671:		float anglesCursor;
;2672:
;2673:		if (weaponId == WP_VR_CONTROLLER)
ADDRLP4 0
INDIRI4
CNSTI4 11
NEI4 $1739
line 2674
;2674:			continue;
ADDRGP4 $1736
JUMPV
LABELV $1739
line 2678
;2675:
;2676:		//increment now we know we aren't looking at an invalid weapon id
;2677:
;2678:		CG_RegisterWeapon(weaponId);
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 2680
;2679:
;2680:		{
line 2683
;2681:			vec3_t angles, iconOrigin, iconBackground, iconForeground;
;2682:			vec3_t forward, up;
;2683:			qboolean selectable = CG_WeaponSelectable(weaponId) && cg.snap->ps.ammo[weaponId];
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 344
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 344
INDIRI4
CNSTI4 0
EQI4 $1743
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1743
ADDRLP4 340
CNSTI4 1
ASGNI4
ADDRGP4 $1744
JUMPV
LABELV $1743
ADDRLP4 340
CNSTI4 0
ASGNI4
LABELV $1744
ADDRLP4 336
ADDRLP4 340
INDIRI4
ASGNI4
line 2686
;2684:
;2685:			//first calculate wheel slot position
;2686:			VectorClear(angles);
ADDRLP4 276
CNSTF4 0
ASGNF4
ADDRLP4 276+4
CNSTF4 0
ASGNF4
ADDRLP4 276+8
CNSTF4 0
ASGNF4
line 2687
;2687:			angles[YAW]		= wheelAngles[YAW];
ADDRLP4 276+4
ADDRLP4 48+4
INDIRF4
ASGNF4
line 2688
;2688:			angles[PITCH]	= wheelAngles[PITCH];
ADDRLP4 276
ADDRLP4 48
INDIRF4
ASGNF4
line 2689
;2689:			angles[ROLL]	= weaponAngles * angleIndex;
ADDRLP4 276+8
ADDRLP4 44
INDIRF4
ADDRLP4 24
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 2691
;2690:
;2691:			AngleVectors(angles, forward, NULL, up);
ADDRLP4 276
ARGP4
ADDRLP4 288
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 300
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 2693
;2692:
;2693:			VectorMA(wheelOrigin, (radius*frac), up, iconOrigin);
ADDRLP4 348
ADDRLP4 28
INDIRF4
ADDRLP4 8
INDIRF4
MULF4
ASGNF4
ADDRLP4 264
ADDRLP4 12
INDIRF4
ADDRLP4 300
INDIRF4
ADDRLP4 348
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 264+4
ADDRLP4 12+4
INDIRF4
ADDRLP4 300+4
INDIRF4
ADDRLP4 348
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 264+8
ADDRLP4 12+8
INDIRF4
ADDRLP4 300+8
INDIRF4
ADDRLP4 28
INDIRF4
ADDRLP4 8
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 2694
;2694:			VectorMA(iconOrigin, 0.2f, forward, iconBackground);
ADDRLP4 312
ADDRLP4 264
INDIRF4
ADDRLP4 288
INDIRF4
CNSTF4 1045220557
MULF4
ADDF4
ASGNF4
ADDRLP4 312+4
ADDRLP4 264+4
INDIRF4
ADDRLP4 288+4
INDIRF4
CNSTF4 1045220557
MULF4
ADDF4
ASGNF4
ADDRLP4 312+8
ADDRLP4 264+8
INDIRF4
ADDRLP4 288+8
INDIRF4
CNSTF4 1045220557
MULF4
ADDF4
ASGNF4
line 2695
;2695:			VectorMA(iconOrigin, -0.2f, forward, iconForeground);
ADDRLP4 324
ADDRLP4 264
INDIRF4
ADDRLP4 288
INDIRF4
CNSTF4 3192704205
MULF4
ADDF4
ASGNF4
ADDRLP4 324+4
ADDRLP4 264+4
INDIRF4
ADDRLP4 288+4
INDIRF4
CNSTF4 3192704205
MULF4
ADDF4
ASGNF4
ADDRLP4 324+8
ADDRLP4 264+8
INDIRF4
ADDRLP4 288+8
INDIRF4
CNSTF4 3192704205
MULF4
ADDF4
ASGNF4
line 2697
;2696:
;2697:			if ( selectorMode == WS_CONTROLLER )
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $1768
line 2698
;2698:			{
line 2701
;2699:				float length;
;2700:				vec3_t diff;
;2701:				VectorSubtract(selectorOrigin, iconOrigin, diff);
ADDRLP4 352
ADDRLP4 32
INDIRF4
ADDRLP4 264
INDIRF4
SUBF4
ASGNF4
ADDRLP4 352+4
ADDRLP4 32+4
INDIRF4
ADDRLP4 264+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 352+8
ADDRLP4 32+8
INDIRF4
ADDRLP4 264+8
INDIRF4
SUBF4
ASGNF4
line 2702
;2702:				length = VectorLength(diff);
ADDRLP4 352
ARGP4
ADDRLP4 368
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 364
ADDRLP4 368
INDIRF4
ASGNF4
line 2703
;2703:				if ( length <= 1.4f && frac == 1.0f && selectable )
ADDRLP4 364
INDIRF4
CNSTF4 1068708659
GTF4 $1776
ADDRLP4 8
INDIRF4
CNSTF4 1065353216
NEF4 $1776
ADDRLP4 336
INDIRI4
CNSTI4 0
EQI4 $1776
line 2704
;2704:				{
line 2705
;2705:					if ( cg.weaponSelectorSelection != weaponId )
ADDRGP4 cg+282992
INDIRI4
ADDRLP4 0
INDIRI4
EQI4 $1778
line 2706
;2706:					{
line 2707
;2707:						cg.weaponSelectorSelection = weaponId;
ADDRGP4 cg+282992
ADDRLP4 0
INDIRI4
ASGNI4
line 2711
;2708:#ifdef USE_HAPTIC
;2709:						trap_HapticEvent("selector_icon", 0, 0, 100, 0, 0);
;2710:#endif
;2711:					}
LABELV $1778
line 2712
;2712:					selected = qtrue;
ADDRLP4 80
CNSTI4 1
ASGNI4
line 2713
;2713:				}
LABELV $1776
line 2714
;2714:			}
LABELV $1768
line 2715
;2715:			if ( selectorMode == WS_ROLL ) {
ADDRLP4 4
INDIRI4
CNSTI4 4
NEI4 $1782
line 2716
;2716:				anglesCursor = (int)(ctrlAngles[ROLL] * 4.0f) % 360;
ADDRLP4 260
ADDRLP4 64+8
INDIRF4
CNSTF4 1082130432
MULF4
CVFI4 4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 2718
;2717:
;2718:				if (anglesCursor < 0)
ADDRLP4 260
INDIRF4
CNSTF4 0
GEF4 $1785
line 2719
;2719:					anglesCursor = 360 + anglesCursor;
ADDRLP4 260
ADDRLP4 260
INDIRF4
CNSTF4 1135869952
ADDF4
ASGNF4
LABELV $1785
line 2721
;2720:
;2721:				if (anglesCursor >= angles[ROLL] - 5 && anglesCursor <= angles[ROLL] + 5) {
ADDRLP4 260
INDIRF4
ADDRLP4 276+8
INDIRF4
CNSTF4 1084227584
SUBF4
LTF4 $1783
ADDRLP4 260
INDIRF4
ADDRLP4 276+8
INDIRF4
CNSTF4 1084227584
ADDF4
GTF4 $1783
line 2722
;2722:					if (cg.weaponSelectorSelection != weaponId)
ADDRGP4 cg+282992
INDIRI4
ADDRLP4 0
INDIRI4
EQI4 $1783
line 2723
;2723:					{
line 2724
;2724:						sfxHandle_t wheelSound = trap_S_RegisterSound("sound/weapwheel/light_switch.wav", qtrue);
ADDRGP4 $1794
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 360
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 356
ADDRLP4 360
INDIRI4
ASGNI4
line 2726
;2725:
;2726:						cg.weaponSelectorSelection = weaponId;
ADDRGP4 cg+282992
ADDRLP4 0
INDIRI4
ASGNI4
line 2731
;2727:#ifdef USE_HAPTIC
;2728:						trap_HapticEvent("selector_icon", 0, 0, 100, 0, 0);
;2729:#endif
;2730:						// Play a sound
;2731:						trap_S_StartSound(wheelOrigin, ENTITYNUM_NONE, CHAN_AUTO, wheelSound);
ADDRLP4 12
ARGP4
CNSTI4 1023
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 356
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 2732
;2732:					}
line 2733
;2733:				}
line 2734
;2734:			}
ADDRGP4 $1783
JUMPV
LABELV $1782
line 2736
;2735:			else
;2736:			{
line 2740
;2737:				//For HMD selector, the weapon can be selected before the selector has finished
;2738:				//its opening animation, use angles to identify the selected weapon, rather than
;2739:				//the position of the selector pointer
;2740:				float angle = AngleNormalize360(RAD2DEG(a));
ADDRLP4 76
INDIRF4
CNSTF4 1113927393
MULF4
ARGF4
ADDRLP4 368
ADDRGP4 AngleNormalize360
CALLF4
ASGNF4
ADDRLP4 352
ADDRLP4 368
INDIRF4
ASGNF4
line 2741
;2741:				float angle360 = angle + 360; // HACK - Account for the icon at the top
ADDRLP4 356
ADDRLP4 352
INDIRF4
CNSTF4 1135869952
ADDF4
ASGNF4
line 2742
;2742:				float low = (((weaponAngles * (angleIndex - 1)) + (weaponAngles * angleIndex)) / 2.0f);
ADDRLP4 360
ADDRLP4 44
INDIRF4
ADDRLP4 24
INDIRI4
CNSTI4 1
SUBI4
CVIF4 4
MULF4
ADDRLP4 44
INDIRF4
ADDRLP4 24
INDIRI4
CVIF4 4
MULF4
ADDF4
CNSTF4 1056964608
MULF4
ASGNF4
line 2743
;2743:				float high = ((weaponAngles * angleIndex + (weaponAngles * (angleIndex + 1))) / 2.0f);
ADDRLP4 364
ADDRLP4 44
INDIRF4
ADDRLP4 24
INDIRI4
CVIF4 4
MULF4
ADDRLP4 44
INDIRF4
ADDRLP4 24
INDIRI4
CNSTI4 1
ADDI4
CVIF4 4
MULF4
ADDF4
CNSTF4 1056964608
MULF4
ASGNF4
line 2753
;2744:
;2745:#ifdef USE_NATIVE_HACK
;2746:				if (((angle > low && angle <= high) || (angle360 > low && angle360 <= high)) &&
;2747:					(math_length(vrinfo->thumbstick_location[thumb][0], vrinfo->thumbstick_location[thumb][1]) > 0.5f) &&
;2748:					selectable)
;2749:#else
;2750:				// GUNNM TODO if thumbstick_location is sent
;2751:				if (//((angle > low && angle <= high) || (angle360 > low && angle360 <= high)) &&
;2752:					//(length(vrinfo->thumbstick_location[thumb][0], vrinfo->thumbstick_location[thumb][1]) > 0.5f) &&
;2753:					selectable)
ADDRLP4 336
INDIRI4
CNSTI4 0
EQI4 $1796
line 2755
;2754:#endif
;2755:				{
line 2756
;2756:					if ( cg.weaponSelectorSelection != weaponId )
ADDRGP4 cg+282992
INDIRI4
ADDRLP4 0
INDIRI4
EQI4 $1798
line 2757
;2757:					{
line 2758
;2758:						cg.weaponSelectorSelection = weaponId;
ADDRGP4 cg+282992
ADDRLP4 0
INDIRI4
ASGNI4
line 2762
;2759:#ifdef USE_HAPTIC
;2760:						trap_HapticEvent("selector_icon", 0, 0, 100, 0, 0);
;2761:#endif
;2762:					}
LABELV $1798
line 2764
;2763:
;2764:					selected = qtrue;
ADDRLP4 80
CNSTI4 1
ASGNI4
line 2765
;2765:				}
LABELV $1796
line 2766
;2766:			}
LABELV $1783
line 2771
;2767:
;2768:			//===========================
;2769:			// Add the "selected" sprite
;2770:			//===========================
;2771:			if ( cg.weaponSelectorSelection == weaponId || (cg.weaponSelect == weaponId && !cg.weaponSelectorSelection))
ADDRGP4 cg+282992
INDIRI4
ADDRLP4 0
INDIRI4
EQI4 $1807
ADDRGP4 cg+236704
INDIRI4
ADDRLP4 0
INDIRI4
NEI4 $1802
ADDRGP4 cg+282992
INDIRI4
CNSTI4 0
NEI4 $1802
LABELV $1807
line 2772
;2772:			{
line 2774
;2773:				refEntity_t		sprite;
;2774:				memset(&sprite, 0, sizeof(sprite));
ADDRLP4 356
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2775
;2775:				sprite.reType = RT_SPRITE;
ADDRLP4 356
CNSTI4 2
ASGNI4
line 2777
;2776:
;2777:				if ( selectorMode == WS_ROLL ) {
ADDRLP4 4
INDIRI4
CNSTI4 4
NEI4 $1808
line 2778
;2778:					VectorCopy(selectorOrigin, sprite.origin);
ADDRLP4 356+68
ADDRLP4 32
INDIRB
ASGNB 12
line 2780
;2779:					//VectorMA(selectorOrigin, -1.4f, forward, sprite.origin);
;2780:					sprite.rotation = 180-angles[ROLL];
ADDRLP4 356+136
CNSTF4 1127481344
ADDRLP4 276+8
INDIRF4
SUBF4
ASGNF4
line 2782
;2781:
;2782:					if ( selectable ) {
ADDRLP4 336
INDIRI4
CNSTI4 0
EQI4 $1813
line 2783
;2783:						sprite.shaderRGBA[0] = 255;
ADDRLP4 356+116
CNSTU1 255
ASGNU1
line 2784
;2784:						sprite.shaderRGBA[1] = 181;
ADDRLP4 356+116+1
CNSTU1 181
ASGNU1
line 2785
;2785:						sprite.shaderRGBA[2] = 10;
ADDRLP4 356+116+2
CNSTU1 10
ASGNU1
line 2786
;2786:						sprite.shaderRGBA[3] = 255;
ADDRLP4 356+116+3
CNSTU1 255
ASGNU1
line 2787
;2787:						sprite.customShader = cgs.media.wheelHollow;
ADDRLP4 356+112
ADDRGP4 cgs+150560+304
INDIRI4
ASGNI4
line 2788
;2788:						cg.weaponSelectorSelection = weaponId; // select the weapon
ADDRGP4 cg+282992
ADDRLP4 0
INDIRI4
ASGNI4
line 2789
;2789:					}
ADDRGP4 $1814
JUMPV
LABELV $1813
line 2791
;2790:					else
;2791:					{
line 2792
;2792:						sprite.shaderRGBA[0] = 200;
ADDRLP4 356+116
CNSTU1 200
ASGNU1
line 2793
;2793:						sprite.shaderRGBA[1] = 200;
ADDRLP4 356+116+1
CNSTU1 200
ASGNU1
line 2794
;2794:						sprite.shaderRGBA[2] = 200;
ADDRLP4 356+116+2
CNSTU1 200
ASGNU1
line 2795
;2795:						sprite.shaderRGBA[3] =  50;
ADDRLP4 356+116+3
CNSTU1 50
ASGNU1
line 2796
;2796:						sprite.customShader = cgs.media.timerSlices[1]; // 0 = slice_5 / 1 = slice_7 / 2 = slice_12 / 3 = slice_24
ADDRLP4 356+112
ADDRGP4 cgs+150560+388+4
INDIRI4
ASGNI4
line 2797
;2797:					}
LABELV $1814
line 2798
;2798:					sprite.radius = radius + 1.8f;
ADDRLP4 356+132
ADDRLP4 28
INDIRF4
CNSTF4 1072064102
ADDF4
ASGNF4
line 2799
;2799:				}
ADDRGP4 $1809
JUMPV
LABELV $1808
line 2800
;2800:				else {
line 2801
;2801:					VectorCopy(iconOrigin, sprite.origin);
ADDRLP4 356+68
ADDRLP4 264
INDIRB
ASGNB 12
line 2802
;2802:					sprite.origin[2] += 2.5f + (0.5f * sinf(DEG2RAD(AngleNormalize360((cg.time - cg.weaponSelectorTime) / 4))));
ADDRGP4 cg+234764
INDIRI4
ADDRGP4 cg+282996
INDIRI4
SUBI4
CNSTI4 4
DIVI4
CVIF4 4
ARGF4
ADDRLP4 496
ADDRGP4 AngleNormalize360
CALLF4
ASGNF4
ADDRLP4 496
INDIRF4
CNSTF4 1016003125
MULF4
ARGF4
ADDRLP4 500
ADDRGP4 sinf
CALLI4
ASGNI4
ADDRLP4 356+68+8
ADDRLP4 356+68+8
INDIRF4
ADDRLP4 500
INDIRI4
CVIF4 4
CNSTF4 1056964608
MULF4
CNSTF4 1075838976
ADDF4
ADDF4
ASGNF4
line 2804
;2803:					
;2804:					sprite.shaderRGBA[0] = 255;
ADDRLP4 356+116
CNSTU1 255
ASGNU1
line 2805
;2805:					sprite.shaderRGBA[1] = 255;
ADDRLP4 356+116+1
CNSTU1 255
ASGNU1
line 2806
;2806:					sprite.shaderRGBA[2] = 255;
ADDRLP4 356+116+2
CNSTU1 255
ASGNU1
line 2807
;2807:					sprite.shaderRGBA[3] = 255;
ADDRLP4 356+116+3
CNSTU1 255
ASGNU1
line 2808
;2808:					sprite.customShader = cgs.media.friendShader;
ADDRLP4 356+112
ADDRGP4 cgs+150560+200
INDIRI4
ASGNI4
line 2809
;2809:					sprite.radius = 0.5f;
ADDRLP4 356+132
CNSTF4 1056964608
ASGNF4
line 2810
;2810:				}
LABELV $1809
line 2811
;2811:				trap_R_AddRefEntityToScene(&sprite);
ADDRLP4 356
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2812
;2812:			}
LABELV $1802
line 2817
;2813:
;2814:			//==================
;2815:			// 3D weapons icons
;2816:			//==================
;2817:			if ( !cg_weaponSelectorSimple2DIcons.integer )
ADDRGP4 cg_weaponSelectorSimple2DIcons+12
INDIRI4
CNSTI4 0
NEI4 $1854
line 2818
;2818:			{
line 2822
;2819:				refEntity_t ent;
;2820:				vec3_t iconAngles;
;2821:				float weaponScale;
;2822:				memset(&ent, 0, sizeof(ent));
ADDRLP4 356
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2823
;2823:				VectorCopy(iconOrigin, ent.origin);
ADDRLP4 356+68
ADDRLP4 264
INDIRB
ASGNB 12
line 2830
;2824:
;2825:				//Shift model a bit
;2826:				/*VectorMA(ent.origin,  0.3f, wheelForward, ent.origin);
;2827:				VectorMA(ent.origin, -0.2f, wheelRight, ent.origin);
;2828:				VectorMA(ent.origin,  0.1f, wheelUp, ent.origin);*/
;2829:
;2830:				VectorCopy(wheelAngles, iconAngles);
ADDRLP4 500
ADDRLP4 48
INDIRB
ASGNB 12
line 2831
;2831:				iconAngles[PITCH] = 10;
ADDRLP4 500
CNSTF4 1092616192
ASGNF4
line 2832
;2832:				iconAngles[YAW] -= 145.0f;
ADDRLP4 500+4
ADDRLP4 500+4
INDIRF4
CNSTF4 1125187584
SUBF4
ASGNF4
line 2834
;2833:
;2834:				if ( selectorMode == WS_ROLL)
ADDRLP4 4
INDIRI4
CNSTI4 4
NEI4 $1859
line 2835
;2835:					iconAngles[ROLL] = 0.0f;
ADDRLP4 500+8
CNSTF4 0
ASGNF4
LABELV $1859
line 2836
;2836:				if ( weaponId == WP_GAUNTLET )
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $1862
line 2837
;2837:					iconAngles[ROLL] -= 90.0f;
ADDRLP4 500+8
ADDRLP4 500+8
INDIRF4
CNSTF4 1119092736
SUBF4
ASGNF4
LABELV $1862
line 2839
;2838:
;2839:				weaponScale = ((scale + 0.02f)*frac) + (cg.weaponSelectorSelection == weaponId ? 0.04f : 0);
ADDRGP4 cg+282992
INDIRI4
ADDRLP4 0
INDIRI4
NEI4 $1867
ADDRLP4 512
CNSTF4 1025758986
ASGNF4
ADDRGP4 $1868
JUMPV
LABELV $1867
ADDRLP4 512
CNSTF4 0
ASGNF4
LABELV $1868
ADDRLP4 496
ADDRLP4 60
INDIRF4
CNSTF4 1017370378
ADDF4
ADDRLP4 8
INDIRF4
MULF4
ADDRLP4 512
INDIRF4
ADDF4
ASGNF4
line 2841
;2840:
;2841:				if (selectorMode == WS_ROLL)
ADDRLP4 4
INDIRI4
CNSTI4 4
NEI4 $1869
line 2842
;2842:					weaponScale = ((scale + 0.02f)*frac);
ADDRLP4 496
ADDRLP4 60
INDIRF4
CNSTF4 1017370378
ADDF4
ADDRLP4 8
INDIRF4
MULF4
ASGNF4
LABELV $1869
line 2844
;2843:
;2844:				AnglesToAxis(iconAngles, ent.axis);
ADDRLP4 500
ARGP4
ADDRLP4 356+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 2845
;2845:				VectorScale(ent.axis[0], weaponScale, ent.axis[0]);
ADDRLP4 356+28
ADDRLP4 356+28
INDIRF4
ADDRLP4 496
INDIRF4
MULF4
ASGNF4
ADDRLP4 356+28+4
ADDRLP4 356+28+4
INDIRF4
ADDRLP4 496
INDIRF4
MULF4
ASGNF4
ADDRLP4 356+28+8
ADDRLP4 356+28+8
INDIRF4
ADDRLP4 496
INDIRF4
MULF4
ASGNF4
line 2846
;2846:				VectorScale(ent.axis[1], weaponScale, ent.axis[1]);
ADDRLP4 356+28+12
ADDRLP4 356+28+12
INDIRF4
ADDRLP4 496
INDIRF4
MULF4
ASGNF4
ADDRLP4 356+28+12+4
ADDRLP4 356+28+12+4
INDIRF4
ADDRLP4 496
INDIRF4
MULF4
ASGNF4
ADDRLP4 356+28+12+8
ADDRLP4 356+28+12+8
INDIRF4
ADDRLP4 496
INDIRF4
MULF4
ASGNF4
line 2847
;2847:				VectorScale(ent.axis[2], weaponScale, ent.axis[2]);
ADDRLP4 356+28+24
ADDRLP4 356+28+24
INDIRF4
ADDRLP4 496
INDIRF4
MULF4
ASGNF4
ADDRLP4 356+28+24+4
ADDRLP4 356+28+24+4
INDIRF4
ADDRLP4 496
INDIRF4
MULF4
ASGNF4
ADDRLP4 356+28+24+8
ADDRLP4 356+28+24+8
INDIRF4
ADDRLP4 496
INDIRF4
MULF4
ASGNF4
line 2848
;2848:				ent.nonNormalizedAxes = qtrue;
ADDRLP4 356+64
CNSTI4 1
ASGNI4
line 2850
;2849:
;2850:				if (weaponId == WP_RAILGUN) {
ADDRLP4 0
INDIRI4
CNSTI4 7
NEI4 $1915
line 2851
;2851:					clientInfo_t *ci = &cgs.clientinfo[cg.predictedPlayerState.clientNum];
ADDRLP4 516
ADDRGP4 cg+234796+140
INDIRI4
CNSTI4 1680
MULI4
ADDRGP4 cgs+41012
ADDP4
ASGNP4
line 2852
;2852:					if (cg.predictedPlayerState.weaponTime + 1500 > cg.time) {
ADDRGP4 cg+234796+44
INDIRI4
CNSTI4 1500
ADDI4
ADDRGP4 cg+234764
INDIRI4
LEI4 $1920
line 2853
;2853:						int scale = 255 * (cg.time - cg.predictedPlayerState.weaponTime) / 1500;
ADDRLP4 520
ADDRGP4 cg+234764
INDIRI4
ADDRGP4 cg+234796+44
INDIRI4
SUBI4
CNSTI4 255
MULI4
CNSTI4 1500
DIVI4
ASGNI4
line 2854
;2854:						ent.shaderRGBA[0] = (ci->c3RGBA[0] * scale) >> 8;
ADDRLP4 356+116
ADDRLP4 516
INDIRP4
CNSTI4 1656
ADDP4
INDIRU1
CVUI4 1
ADDRLP4 520
INDIRI4
MULI4
CNSTI4 8
RSHI4
CVIU4 4
CVUU1 4
ASGNU1
line 2855
;2855:						ent.shaderRGBA[1] = (ci->c3RGBA[1] * scale) >> 8;
ADDRLP4 356+116+1
ADDRLP4 516
INDIRP4
CNSTI4 1657
ADDP4
INDIRU1
CVUI4 1
ADDRLP4 520
INDIRI4
MULI4
CNSTI4 8
RSHI4
CVIU4 4
CVUU1 4
ASGNU1
line 2856
;2856:						ent.shaderRGBA[2] = (ci->c3RGBA[2] * scale) >> 8;
ADDRLP4 356+116+2
ADDRLP4 516
INDIRP4
CNSTI4 1658
ADDP4
INDIRU1
CVUI4 1
ADDRLP4 520
INDIRI4
MULI4
CNSTI4 8
RSHI4
CVIU4 4
CVUU1 4
ASGNU1
line 2857
;2857:						ent.shaderRGBA[3] = 255;
ADDRLP4 356+116+3
CNSTU1 255
ASGNU1
line 2858
;2858:					}
ADDRGP4 $1921
JUMPV
LABELV $1920
line 2859
;2859:					else {
line 2860
;2860:						Byte4Copy(ci->c3RGBA, ent.shaderRGBA);
ADDRLP4 356+116
ADDRLP4 516
INDIRP4
CNSTI4 1656
ADDP4
INDIRU1
ASGNU1
ADDRLP4 356+116+1
ADDRLP4 516
INDIRP4
CNSTI4 1657
ADDP4
INDIRU1
ASGNU1
ADDRLP4 356+116+2
ADDRLP4 516
INDIRP4
CNSTI4 1658
ADDP4
INDIRU1
ASGNU1
ADDRLP4 356+116+3
ADDRLP4 516
INDIRP4
CNSTI4 1659
ADDP4
INDIRU1
ASGNU1
line 2861
;2861:					}
LABELV $1921
line 2862
;2862:				}
LABELV $1915
line 2864
;2863:
;2864:				ent.hModel = cg_weapons[weaponId].weaponModel;
ADDRLP4 356+8
ADDRLP4 0
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons+12
ADDP4
INDIRI4
ASGNI4
line 2865
;2865:				if (!selectable)
ADDRLP4 336
INDIRI4
CNSTI4 0
NEI4 $1944
line 2866
;2866:				{
line 2867
;2867:					ent.customShader = cgs.media.invisShader;
ADDRLP4 356+112
ADDRGP4 cgs+150560+464
INDIRI4
ASGNI4
line 2868
;2868:				}
LABELV $1944
line 2869
;2869:				trap_R_AddRefEntityToScene(&ent);
ADDRLP4 356
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2871
;2870:
;2871:				if (cg_weapons[weaponId].barrelModel)
ADDRLP4 0
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons+16
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1855
line 2872
;2872:				{
line 2875
;2873:					vec3_t barrelAngles;
;2874:					refEntity_t barrel;
;2875:					memset(&barrel, 0, sizeof(barrel));
ADDRLP4 516
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2876
;2876:					barrel.hModel = cg_weapons[weaponId].barrelModel;
ADDRLP4 516+8
ADDRLP4 0
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons+16
ADDP4
INDIRI4
ASGNI4
line 2878
;2877:					
;2878:					VectorClear(barrelAngles);
ADDRLP4 656
CNSTF4 0
ASGNF4
ADDRLP4 656+4
CNSTF4 0
ASGNF4
ADDRLP4 656+8
CNSTF4 0
ASGNF4
line 2879
;2879:					barrelAngles[ROLL] = AngleNormalize360((cg.time - cg.weaponSelectorTime) * 0.9f);
ADDRGP4 cg+234764
INDIRI4
ADDRGP4 cg+282996
INDIRI4
SUBI4
CVIF4 4
CNSTF4 1063675494
MULF4
ARGF4
ADDRLP4 668
ADDRGP4 AngleNormalize360
CALLF4
ASGNF4
ADDRLP4 656+8
ADDRLP4 668
INDIRF4
ASGNF4
line 2880
;2880:					AnglesToAxis(barrelAngles, barrel.axis);
ADDRLP4 656
ARGP4
ADDRLP4 516+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 2881
;2881:					CG_PositionRotatedEntityOnTag(&barrel, &ent, cg_weapons[weaponId].weaponModel, "tag_barrel");
ADDRLP4 516
ARGP4
ADDRLP4 356
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons+12
ADDP4
INDIRI4
ARGI4
ADDRGP4 $837
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 2882
;2882:					if (!selectable)
ADDRLP4 336
INDIRI4
CNSTI4 0
NEI4 $1961
line 2883
;2883:					{
line 2884
;2884:						barrel.customShader = cgs.media.invisShader;
ADDRLP4 516+112
ADDRGP4 cgs+150560+464
INDIRI4
ASGNI4
line 2885
;2885:					}
LABELV $1961
line 2886
;2886:					trap_R_AddRefEntityToScene(&barrel);
ADDRLP4 516
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2887
;2887:				}
line 2888
;2888:			}
ADDRGP4 $1855
JUMPV
LABELV $1854
line 2890
;2889:			else
;2890:			{
line 2896
;2891:				//==================
;2892:				// 2D weapons icons
;2893:				//==================
;2894:				float sRadius;
;2895:				refEntity_t		sprite;
;2896:				memset(&sprite, 0, sizeof(sprite));
ADDRLP4 356
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2898
;2897:
;2898:				sRadius = 0.7f + (0.2f * (trap_Cvar_VariableValue("vr_hudDepth") - 1));
ADDRGP4 $1587
ARGP4
ADDRLP4 500
ADDRGP4 trap_Cvar_VariableValue
CALLF4
ASGNF4
ADDRLP4 496
ADDRLP4 500
INDIRF4
CNSTF4 1065353216
SUBF4
CNSTF4 1045220557
MULF4
CNSTF4 1060320051
ADDF4
ASGNF4
line 2900
;2899:
;2900:				VectorCopy(iconOrigin, sprite.origin);
ADDRLP4 356+68
ADDRLP4 264
INDIRB
ASGNB 12
line 2901
;2901:				sprite.reType = RT_SPRITE;
ADDRLP4 356
CNSTI4 2
ASGNI4
line 2902
;2902:				sprite.customShader = cg_weapons[weaponId].weaponIcon;
ADDRLP4 356+112
ADDRLP4 0
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons+68
ADDP4
INDIRI4
ASGNI4
line 2903
;2903:				sprite.radius = sRadius * 0.9f * (cg.weaponSelectorSelection == weaponId ? 1.1f : 1.0);
ADDRGP4 cg+282992
INDIRI4
ADDRLP4 0
INDIRI4
NEI4 $1972
ADDRLP4 504
CNSTF4 1066192077
ASGNF4
ADDRGP4 $1973
JUMPV
LABELV $1972
ADDRLP4 504
CNSTF4 1065353216
ASGNF4
LABELV $1973
ADDRLP4 356+132
ADDRLP4 496
INDIRF4
CNSTF4 1063675494
MULF4
ADDRLP4 504
INDIRF4
MULF4
ASGNF4
line 2904
;2904:				sprite.shaderRGBA[0] = 255;
ADDRLP4 356+116
CNSTU1 255
ASGNU1
line 2905
;2905:				sprite.shaderRGBA[1] = 255;
ADDRLP4 356+116+1
CNSTU1 255
ASGNU1
line 2906
;2906:				sprite.shaderRGBA[2] = 255;
ADDRLP4 356+116+2
CNSTU1 255
ASGNU1
line 2907
;2907:				sprite.shaderRGBA[3] = 255;
ADDRLP4 356+116+3
CNSTU1 255
ASGNU1
line 2908
;2908:				trap_R_AddRefEntityToScene(&sprite);
ADDRLP4 356
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2911
;2909:
;2910:				//And now the selection background
;2911:				memset(&sprite, 0, sizeof(sprite));
ADDRLP4 356
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2912
;2912:				VectorCopy(iconBackground, sprite.origin);
ADDRLP4 356+68
ADDRLP4 312
INDIRB
ASGNB 12
line 2913
;2913:				sprite.reType = RT_SPRITE;
ADDRLP4 356
CNSTI4 2
ASGNI4
line 2914
;2914:				sprite.customShader = cgs.media.selectShader;
ADDRLP4 356+112
ADDRGP4 cgs+150560+212
INDIRI4
ASGNI4
line 2915
;2915:				sprite.radius = sRadius * (cg.weaponSelectorSelection == weaponId ? 1.1f : 1.0);
ADDRGP4 cg+282992
INDIRI4
ADDRLP4 0
INDIRI4
NEI4 $1988
ADDRLP4 508
CNSTF4 1066192077
ASGNF4
ADDRGP4 $1989
JUMPV
LABELV $1988
ADDRLP4 508
CNSTF4 1065353216
ASGNF4
LABELV $1989
ADDRLP4 356+132
ADDRLP4 496
INDIRF4
ADDRLP4 508
INDIRF4
MULF4
ASGNF4
line 2916
;2916:				sprite.shaderRGBA[0] = 255;
ADDRLP4 356+116
CNSTU1 255
ASGNU1
line 2917
;2917:				sprite.shaderRGBA[1] = 255;
ADDRLP4 356+116+1
CNSTU1 255
ASGNU1
line 2918
;2918:				sprite.shaderRGBA[2] = 255;
ADDRLP4 356+116+2
CNSTU1 255
ASGNU1
line 2919
;2919:				sprite.shaderRGBA[3] = 255;
ADDRLP4 356+116+3
CNSTU1 255
ASGNU1
line 2920
;2920:				trap_R_AddRefEntityToScene(&sprite);
ADDRLP4 356
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2922
;2921:
;2922:				if (!selectable)
ADDRLP4 336
INDIRI4
CNSTI4 0
NEI4 $1997
line 2923
;2923:				{
line 2924
;2924:					memset(&sprite, 0, sizeof(sprite));
ADDRLP4 356
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2925
;2925:					VectorCopy(iconForeground, sprite.origin);
ADDRLP4 356+68
ADDRLP4 324
INDIRB
ASGNB 12
line 2926
;2926:					sprite.reType = RT_SPRITE;
ADDRLP4 356
CNSTI4 2
ASGNI4
line 2927
;2927:					sprite.customShader = cgs.media.noammoShader;
ADDRLP4 356+112
ADDRGP4 cgs+150560+272
INDIRI4
ASGNI4
line 2928
;2928:					sprite.radius = sRadius;
ADDRLP4 356+132
ADDRLP4 496
INDIRF4
ASGNF4
line 2929
;2929:					sprite.shaderRGBA[0] = 255;
ADDRLP4 356+116
CNSTU1 255
ASGNU1
line 2930
;2930:					sprite.shaderRGBA[1] = 255;
ADDRLP4 356+116+1
CNSTU1 255
ASGNU1
line 2931
;2931:					sprite.shaderRGBA[2] = 255;
ADDRLP4 356+116+2
CNSTU1 255
ASGNU1
line 2932
;2932:					sprite.shaderRGBA[3] = 255;
ADDRLP4 356+116+3
CNSTU1 255
ASGNU1
line 2933
;2933:					trap_R_AddRefEntityToScene(&sprite);
ADDRLP4 356
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2934
;2934:				}
LABELV $1997
line 2935
;2935:			}
LABELV $1855
line 2936
;2936:		}
line 2937
;2937:		++angleIndex;
ADDRLP4 24
ADDRLP4 24
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2938
;2938:	}
LABELV $1736
line 2669
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 12
LTI4 $1735
line 2941
;2939:
;2940:	//Only reset selection if using controller pointer
;2941:	if ( !selected && selectorMode == WS_CONTROLLER )
ADDRLP4 80
INDIRI4
CNSTI4 0
NEI4 $2011
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $2011
line 2942
;2942:	{
line 2943
;2943:		cg.weaponSelectorSelection = WP_NONE;
ADDRGP4 cg+282992
CNSTI4 0
ASGNI4
line 2944
;2944:	}
LABELV $2011
line 2960
;2945:
;2946:#ifdef USE_NATIVE_HACK
;2947:	// In case was invoked by thumbstick axis and thumbstick is centered
;2948:	// select weapon (if any selected) and close the selector
;2949:	if ( vrinfo->weapon_select_autoclose && frac > 0.25f ) {
;2950:		if ( thumbstickValue < 0.1f ) {
;2951:			if ( selected ) {
;2952:				cg.weaponSelect = cg.weaponSelectorSelection;
;2953:			}
;2954:			vrinfo->weapon_select = qfalse;
;2955:			vrinfo->weapon_select_autoclose = qfalse;
;2956:			vrinfo->weapon_select_using_thumbstick = qfalse;
;2957:		}
;2958:	}
;2959:#endif
;2960:}
LABELV $1562
endproc CG_DrawWeaponSelector 672 16
export CG_OutOfAmmoChange
proc CG_OutOfAmmoChange 8 4
line 2969
;2961:#endif
;2962:/*
;2963:===================
;2964:CG_OutOfAmmoChange
;2965:
;2966:The current weapon has just run out of ammo
;2967:===================
;2968:*/
;2969:void CG_OutOfAmmoChange( void ) {
line 2972
;2970:	int		i;
;2971:
;2972:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+245636
ADDRGP4 cg+234764
INDIRI4
ASGNI4
line 2974
;2973:
;2974:	if ( cg.snap->ps.pm_flags & PMF_FOLLOW || cg.demoPlayback ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $2021
ADDRGP4 cg+8
INDIRI4
CNSTI4 0
EQI4 $2017
LABELV $2021
line 2975
;2975:		return;
ADDRGP4 $2014
JUMPV
LABELV $2017
line 2978
;2976:	}
;2977:
;2978:	for ( i = MAX_WEAPONS-1 ; i > 0 ; i-- ) {
ADDRLP4 0
CNSTI4 15
ASGNI4
LABELV $2022
line 2979
;2979:		if ( CG_WeaponSelectable( i ) ) {
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $2026
line 2980
;2980:			cg.weaponSelect = i;
ADDRGP4 cg+236704
ADDRLP4 0
INDIRI4
ASGNI4
line 2981
;2981:			break;
ADDRGP4 $2024
JUMPV
LABELV $2026
line 2983
;2982:		}
;2983:	}
LABELV $2023
line 2978
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
GTI4 $2022
LABELV $2024
line 2984
;2984:}
LABELV $2014
endproc CG_OutOfAmmoChange 8 4
export CG_FireWeapon
proc CG_FireWeapon 20 16
line 3002
;2985:
;2986:
;2987:/*
;2988:===================================================================================================
;2989:
;2990:WEAPON EVENTS
;2991:
;2992:===================================================================================================
;2993:*/
;2994:
;2995:/*
;2996:================
;2997:CG_FireWeapon
;2998:
;2999:Caused by an EV_FIRE_WEAPON event
;3000:================
;3001:*/
;3002:void CG_FireWeapon( centity_t *cent ) {
line 3007
;3003:	entityState_t *ent;
;3004:	int				c;
;3005:	weaponInfo_t	*weap;
;3006:
;3007:	ent = &cent->currentState;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
line 3008
;3008:	if ( ent->weapon == WP_NONE ) {
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 0
NEI4 $2030
line 3009
;3009:		return;
ADDRGP4 $2029
JUMPV
LABELV $2030
line 3011
;3010:	}
;3011:	if ( ent->weapon >= WP_NUM_WEAPONS ) {
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 12
LTI4 $2032
line 3012
;3012:		CG_Error( "CG_FireWeapon: ent->weapon >= WP_NUM_WEAPONS" );
ADDRGP4 $2034
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 3013
;3013:		return;
ADDRGP4 $2029
JUMPV
LABELV $2032
line 3015
;3014:	}
;3015:	weap = &cg_weapons[ ent->weapon ];
ADDRLP4 4
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 3017
;3016:
;3017:	if ( ent->number >= 0 && ent->number < MAX_CLIENTS && cent != &cg.predictedPlayerEntity ) {
ADDRLP4 12
ADDRLP4 8
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
LTI4 $2035
ADDRLP4 12
INDIRI4
CNSTI4 64
GEI4 $2035
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 cg+235356
CVPU4 4
EQU4 $2035
line 3019
;3018:		// point from external event to client entity
;3019:		cent = &cg_entities[ ent->number ];
ADDRFP4 0
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1236
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 3020
;3020:	}
LABELV $2035
line 3024
;3021:
;3022:	// mark the entity as muzzle flashing, so when it is added it will
;3023:	// append the flash to the weapon model
;3024:	cent->muzzleFlashTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 920
ADDP4
ADDRGP4 cg+234764
INDIRI4
ASGNI4
line 3027
;3025:
;3026:	// lightning gun only does this this on initial press
;3027:	if ( ent->weapon == WP_LIGHTNING ) {
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 6
NEI4 $2039
line 3028
;3028:		if ( cent->pe.lightningFiring ) {
ADDRFP4 0
INDIRP4
CNSTI4 1112
ADDP4
INDIRI4
CNSTI4 0
EQI4 $2041
line 3029
;3029:			return;
ADDRGP4 $2029
JUMPV
LABELV $2041
line 3031
;3030:		}
;3031:	}
LABELV $2039
line 3034
;3032:
;3033:	// play quad sound if needed
;3034:	if ( cent->currentState.powerups & ( 1 << PW_QUAD ) ) {
ADDRFP4 0
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $2043
line 3035
;3035:		trap_S_StartSound (NULL, cent->currentState.number, CHAN_ITEM, cgs.media.quadSound );
CNSTP4 0
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 cgs+150560+576
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 3036
;3036:	}
LABELV $2043
line 3039
;3037:
;3038:	// play a sound
;3039:	for ( c = 0; c < ARRAY_LEN( weap->flashSound ); c++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $2050
JUMPV
LABELV $2047
line 3040
;3040:		if ( !weap->flashSound[c] ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $2051
line 3041
;3041:			break;
ADDRGP4 $2049
JUMPV
LABELV $2051
line 3043
;3042:		}
;3043:	}
LABELV $2048
line 3039
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $2050
ADDRLP4 0
INDIRI4
CVIU4 4
CNSTU4 4
LTU4 $2047
LABELV $2049
line 3044
;3044:	if ( c > 0 ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $2053
line 3045
;3045:		c = rand() % c;
ADDRLP4 16
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 16
INDIRI4
ADDRLP4 0
INDIRI4
MODI4
ASGNI4
line 3046
;3046:		if ( weap->flashSound[c] )
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $2055
line 3047
;3047:		{
line 3048
;3048:			trap_S_StartSound( NULL, ent->number, CHAN_WEAPON, weap->flashSound[c] );
CNSTP4 0
ARGP4
ADDRLP4 8
INDIRP4
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 3049
;3049:		}
LABELV $2055
line 3050
;3050:	}
LABELV $2053
line 3053
;3051:
;3052:	// do brass ejection
;3053:	if ( weap->ejectBrassFunc && cg_brassTime.integer > 0 ) {
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $2057
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 0
LEI4 $2057
line 3054
;3054:		weap->ejectBrassFunc( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
CALLV
pop
line 3055
;3055:	}
LABELV $2057
line 3126
;3056:
;3057:#ifdef USE_HAPTIC
;3058:	//Are we the player?
;3059:	if (cent->currentState.number == cg.predictedPlayerState.clientNum)
;3060:	{
;3061:		//int vrFlags = VR_get_anyPlayer_vrFlags( NULL, qtrue );
;3062:		int vrFlags = VR_get_client_vrFlags();
;3063:		qboolean weapon_stabilised = (vrFlags & EF_WEAPON_STABILISED);
;3064:		qboolean right_handed = (vrFlags & EF_LEFT_HANDED);
;3065:
;3066:		int position = weapon_stabilised ? 4 : (right_handed ? 1 : 2);
;3067:
;3068:		static int haptic_skip = 0;
;3069:		// This is to adjust the excessive fire rate of the plasma-gun/machine-gun, everything else fires slower (or has haptics that compensate)
;3070:		// so this will just fire every other time for the affected weapons
;3071:		++haptic_skip;
;3072:
;3073:		//Haptics
;3074:		switch (ent->weapon) {
;3075:		case WP_GAUNTLET:
;3076:			trap_HapticEvent("chainsaw_fire", position, 0, 50, 0, 0);
;3077:			break;
;3078:		case WP_MACHINEGUN:
;3079:			if (haptic_skip & 1) {
;3080:				trap_HapticEvent("machinegun_fire", position, 0, 100, 0, 0);
;3081:			}
;3082:			break;
;3083:		case WP_SHOTGUN:
;3084:			trap_HapticEvent("shotgun_fire", position, 0, 100, 0, 0);
;3085:			break;
;3086:		case WP_GRENADE_LAUNCHER:
;3087:			trap_HapticEvent("handgrenade_fire", position, 0, 80, 0, 0);
;3088:			break;
;3089:		case WP_ROCKET_LAUNCHER:
;3090:			trap_HapticEvent("rocket_fire", position, 0, 100, 0, 0);
;3091:			break;
;3092:		case WP_LIGHTNING:
;3093:			trap_HapticEvent("RTCWQuest:fire_tesla", position, 0, 100, 0, 0);
;3094:			break;
;3095:		case WP_RAILGUN:
;3096:			trap_HapticEvent("RTCWQuest:fire_sniper", position, 0, 100, 0, 0);
;3097:			break;
;3098:		case WP_PLASMAGUN:
;3099:			if (haptic_skip & 1) {
;3100:				trap_HapticEvent("plasmagun_fire", position, 0, 100, 0, 0);
;3101:			}
;3102:			break;
;3103:		case WP_BFG:
;3104:			trap_HapticEvent("bfg_fire", position, 0, 100, 0, 0);
;3105:			break;
;3106:		case WP_GRAPPLING_HOOK:
;3107:			trap_HapticEvent("chainsaw_fire", position, 0, 100, 0, 0);
;3108:			break;
;3109:#ifdef MISSIONPACK
;3110:		case WP_NAILGUN:
;3111:			trap_HapticEvent("shotgun_fire", position, 0, 100, 0, 0);
;3112:			break;
;3113:		case WP_PROX_LAUNCHER:
;3114:			trap_HapticEvent("handgrenade_fire", position, 0, 100, 0, 0);
;3115:			break;
;3116:		case WP_CHAINGUN:
;3117:			if (haptic_skip & 1) {
;3118:				trap_HapticEvent("chaingun_fire", position, 0, 100, 0, 0);
;3119:			}
;3120:			break;
;3121:#endif
;3122:		}
;3123:
;3124:	}
;3125:#endif
;3126:}
LABELV $2029
endproc CG_FireWeapon 20 16
export CG_MissileHitWall
proc CG_MissileHitWall 140 44
line 3136
;3127:
;3128:
;3129:/*
;3130:=================
;3131:CG_MissileHitWall
;3132:
;3133:Caused by an EV_MISSILE_MISS event, or directly by local bullet tracing
;3134:=================
;3135:*/
;3136:void CG_MissileHitWall( weapon_t weapon, int clientNum, vec3_t origin, vec3_t dir, impactSound_t soundType ) {
line 3152
;3137:	qhandle_t		mod;
;3138:	qhandle_t		mark;
;3139:	qhandle_t		shader;
;3140:	sfxHandle_t		sfx;
;3141:	float			radius;
;3142:	float			light;
;3143:	vec3_t			lightColor;
;3144:	localEntity_t	*le;
;3145:	int				r;
;3146:	qboolean		alphaFade;
;3147:	qboolean		isSprite;
;3148:	int				duration;
;3149:	vec3_t			sprOrg;
;3150:	vec3_t			sprVel;
;3151:
;3152:	mark = 0;
ADDRLP4 12
CNSTI4 0
ASGNI4
line 3153
;3153:	radius = 32;
ADDRLP4 28
CNSTF4 1107296256
ASGNF4
line 3154
;3154:	sfx = 0;
ADDRLP4 20
CNSTI4 0
ASGNI4
line 3155
;3155:	mod = 0;
ADDRLP4 24
CNSTI4 0
ASGNI4
line 3156
;3156:	shader = 0;
ADDRLP4 32
CNSTI4 0
ASGNI4
line 3157
;3157:	light = 0;
ADDRLP4 40
CNSTF4 0
ASGNF4
line 3158
;3158:	lightColor[0] = 1;
ADDRLP4 0
CNSTF4 1065353216
ASGNF4
line 3159
;3159:	lightColor[1] = 1;
ADDRLP4 0+4
CNSTF4 1065353216
ASGNF4
line 3160
;3160:	lightColor[2] = 0;
ADDRLP4 0+8
CNSTF4 0
ASGNF4
line 3163
;3161:
;3162:	// set defaults
;3163:	isSprite = qfalse;
ADDRLP4 44
CNSTI4 0
ASGNI4
line 3164
;3164:	duration = 600;
ADDRLP4 48
CNSTI4 600
ASGNI4
line 3166
;3165:
;3166:	switch ( weapon ) {
ADDRLP4 80
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 2
LTI4 $2063
ADDRLP4 80
INDIRI4
CNSTI4 10
GTI4 $2063
ADDRLP4 80
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $2177-8
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $2177
address $2160
address $2153
address $2096
address $2105
address $2066
address $2124
address $2133
address $2142
address $2079
code
LABELV $2063
LABELV $2066
line 3184
;3167:	default:
;3168:#ifdef MISSIONPACK
;3169:	case WP_NAILGUN:
;3170:		if( soundType == IMPACTSOUND_FLESH ) {
;3171:			sfx = cgs.media.sfx_nghitflesh;
;3172:		} else if( soundType == IMPACTSOUND_METAL ) {
;3173:			sfx = cgs.media.sfx_nghitmetal;
;3174:		} else {
;3175:			//sfx = cgs.media.sfx_nghit;// q3A
;3176:			sfx = cgs.sfx_nghitmetal;// I prefere it louder
;3177:		}
;3178:		mark = cgs.media.holeMarkShader;
;3179:		radius = 12;
;3180:		break;
;3181:#endif
;3182:	case WP_LIGHTNING:
;3183:		// no explosion at LG impact, it is added with the beam
;3184:		r = rand() & 3;
ADDRLP4 88
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 52
ADDRLP4 88
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 3185
;3185:		if ( r < 2 ) {
ADDRLP4 52
INDIRI4
CNSTI4 2
GEI4 $2067
line 3186
;3186:			sfx = cgs.media.sfx_lghit2;
ADDRLP4 20
ADDRGP4 cgs+150560+712
INDIRI4
ASGNI4
line 3187
;3187:		} else if ( r == 2 ) {
ADDRGP4 $2068
JUMPV
LABELV $2067
ADDRLP4 52
INDIRI4
CNSTI4 2
NEI4 $2071
line 3188
;3188:			sfx = cgs.media.sfx_lghit1;
ADDRLP4 20
ADDRGP4 cgs+150560+708
INDIRI4
ASGNI4
line 3189
;3189:		} else {
ADDRGP4 $2072
JUMPV
LABELV $2071
line 3190
;3190:			sfx = cgs.media.sfx_lghit3;
ADDRLP4 20
ADDRGP4 cgs+150560+716
INDIRI4
ASGNI4
line 3191
;3191:		}
LABELV $2072
LABELV $2068
line 3192
;3192:		mark = cgs.media.holeMarkShader;
ADDRLP4 12
ADDRGP4 cgs+150560+444
INDIRI4
ASGNI4
line 3193
;3193:		radius = 12;
ADDRLP4 28
CNSTF4 1094713344
ASGNF4
line 3194
;3194:		break;
ADDRGP4 $2064
JUMPV
LABELV $2079
line 3209
;3195:#ifdef MISSIONPACK
;3196:	case WP_PROX_LAUNCHER:
;3197:		mod = cgs.media.dishFlashModel;
;3198:		shader = cgs.media.grenadeExplosionShader;
;3199:		sfx = cgs.media.sfx_proxexp;
;3200:		mark = cgs.media.burnMarkShader;
;3201:		radius = 64;
;3202:		light = 300;
;3203:		isSprite = qtrue;
;3204:		break;
;3205:#endif
;3206:
;3207:#ifdef USE_GRAPPLING_HOOK
;3208:	case WP_GRAPPLING_HOOK:
;3209:		if( soundType == IMPACTSOUND_FLESH ) {
ADDRFP4 16
INDIRI4
CNSTI4 2
NEI4 $2080
line 3210
;3210:			sfx = cgs.media.sfx_nghitflesh;
ADDRLP4 20
ADDRGP4 cgs+150560+748
INDIRI4
ASGNI4
line 3211
;3211:		} else if( soundType == IMPACTSOUND_METAL ) {
ADDRGP4 $2081
JUMPV
LABELV $2080
ADDRFP4 16
INDIRI4
CNSTI4 1
NEI4 $2084
line 3212
;3212:			sfx = cgs.media.sfx_nghitmetal;
ADDRLP4 20
ADDRGP4 cgs+150560+752
INDIRI4
ASGNI4
line 3213
;3213:		} else {
ADDRGP4 $2085
JUMPV
LABELV $2084
line 3215
;3214:			//sfx = cgs.media.sfx_nghit;// q3A
;3215:			sfx = cgs.media.sfx_nghitmetal;// louder
ADDRLP4 20
ADDRGP4 cgs+150560+752
INDIRI4
ASGNI4
line 3216
;3216:		}
LABELV $2085
LABELV $2081
line 3217
;3217:		mod = cgs.media.bulletFlashModel;
ADDRLP4 24
ADDRGP4 cgs+150560+484
INDIRI4
ASGNI4
line 3218
;3218:		shader = cgs.media.bulletExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+150560+508
INDIRI4
ASGNI4
line 3219
;3219:		mark = cgs.media.bulletMarkShader;//cgs.media.holeMarkShader;
ADDRLP4 12
ADDRGP4 cgs+150560+436
INDIRI4
ASGNI4
line 3220
;3220:		radius = 4;
ADDRLP4 28
CNSTF4 1082130432
ASGNF4
line 3221
;3221:		break;
ADDRGP4 $2064
JUMPV
LABELV $2096
line 3225
;3222:#endif
;3223:
;3224:	case WP_GRENADE_LAUNCHER:
;3225:		mod = cgs.media.dishFlashModel;
ADDRLP4 24
ADDRGP4 cgs+150560+492
INDIRI4
ASGNI4
line 3226
;3226:		shader = cgs.media.grenadeExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+150560+516
INDIRI4
ASGNI4
line 3227
;3227:		sfx = cgs.media.sfx_rockexp;
ADDRLP4 20
ADDRGP4 cgs+150560+736
INDIRI4
ASGNI4
line 3228
;3228:		mark = cgs.media.burnMarkShader;
ADDRLP4 12
ADDRGP4 cgs+150560+440
INDIRI4
ASGNI4
line 3229
;3229:		radius = 64;
ADDRLP4 28
CNSTF4 1115684864
ASGNF4
line 3230
;3230:		light = GL_EXPLOSION_RADIUS;
ADDRLP4 40
CNSTF4 1133903872
ASGNF4
line 3231
;3231:		isSprite = qtrue;
ADDRLP4 44
CNSTI4 1
ASGNI4
line 3232
;3232:		break;
ADDRGP4 $2064
JUMPV
LABELV $2105
line 3234
;3233:	case WP_ROCKET_LAUNCHER:
;3234:		mod = cgs.media.dishFlashModel;
ADDRLP4 24
ADDRGP4 cgs+150560+492
INDIRI4
ASGNI4
line 3235
;3235:		shader = cgs.media.rocketExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+150560+512
INDIRI4
ASGNI4
line 3236
;3236:		sfx = cgs.media.sfx_rockexp;
ADDRLP4 20
ADDRGP4 cgs+150560+736
INDIRI4
ASGNI4
line 3237
;3237:		mark = cgs.media.burnMarkShader;
ADDRLP4 12
ADDRGP4 cgs+150560+440
INDIRI4
ASGNI4
line 3238
;3238:		radius = 64;
ADDRLP4 28
CNSTF4 1115684864
ASGNF4
line 3239
;3239:		light = RL_EXPLOSION_RADIUS;
ADDRLP4 40
CNSTF4 1133903872
ASGNF4
line 3240
;3240:		isSprite = qtrue;
ADDRLP4 44
CNSTI4 1
ASGNI4
line 3241
;3241:		duration = 1000;
ADDRLP4 48
CNSTI4 1000
ASGNI4
line 3242
;3242:		lightColor[0] = 1.0;
ADDRLP4 0
CNSTF4 1065353216
ASGNF4
line 3243
;3243:		lightColor[1] = 0.75;
ADDRLP4 0+4
CNSTF4 1061158912
ASGNF4
line 3244
;3244:		lightColor[2] = 0.0;
ADDRLP4 0+8
CNSTF4 0
ASGNF4
line 3245
;3245:		if (cg_oldRocket.integer == 0) {
ADDRGP4 cg_oldRocket+12
INDIRI4
CNSTI4 0
NEI4 $2064
line 3247
;3246:			// explosion sprite animation
;3247:			VectorMA( origin, 24, dir, sprOrg );
ADDRLP4 92
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 96
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 56
ADDRLP4 92
INDIRP4
INDIRF4
ADDRLP4 96
INDIRP4
INDIRF4
CNSTF4 1103101952
MULF4
ADDF4
ASGNF4
ADDRLP4 56+4
ADDRLP4 92
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 96
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1103101952
MULF4
ADDF4
ASGNF4
ADDRLP4 56+8
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1103101952
MULF4
ADDF4
ASGNF4
line 3248
;3248:			VectorScale( dir, 64, sprVel );
ADDRLP4 100
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 68
ADDRLP4 100
INDIRP4
INDIRF4
CNSTF4 1115684864
MULF4
ASGNF4
ADDRLP4 68+4
ADDRLP4 100
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1115684864
MULF4
ASGNF4
ADDRLP4 68+8
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1115684864
MULF4
ASGNF4
line 3250
;3249:
;3250:			CG_ParticleExplosion( "explode1", sprOrg, sprVel, 1400, 20, 30 );
ADDRGP4 $2123
ARGP4
ADDRLP4 56
ARGP4
ADDRLP4 68
ARGP4
CNSTI4 1400
ARGI4
CNSTI4 20
ARGI4
CNSTI4 30
ARGI4
ADDRGP4 CG_ParticleExplosion
CALLV
pop
line 3251
;3251:		}
line 3252
;3252:		break;
ADDRGP4 $2064
JUMPV
LABELV $2124
line 3254
;3253:	case WP_RAILGUN:
;3254:		mod = cgs.media.ringFlashModel;
ADDRLP4 24
ADDRGP4 cgs+150560+488
INDIRI4
ASGNI4
line 3255
;3255:		shader = cgs.media.railExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+150560+500
INDIRI4
ASGNI4
line 3256
;3256:		sfx = cgs.media.sfx_plasmaexp;
ADDRLP4 20
ADDRGP4 cgs+150560+740
INDIRI4
ASGNI4
line 3257
;3257:		mark = cgs.media.energyMarkShader;
ADDRLP4 12
ADDRGP4 cgs+150560+448
INDIRI4
ASGNI4
line 3258
;3258:		radius = 24;
ADDRLP4 28
CNSTF4 1103101952
ASGNF4
line 3259
;3259:		break;
ADDRGP4 $2064
JUMPV
LABELV $2133
line 3261
;3260:	case WP_PLASMAGUN:
;3261:		mod = cgs.media.ringFlashModel;
ADDRLP4 24
ADDRGP4 cgs+150560+488
INDIRI4
ASGNI4
line 3262
;3262:		shader = cgs.media.plasmaExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+150560+504
INDIRI4
ASGNI4
line 3263
;3263:		sfx = cgs.media.sfx_plasmaexp;
ADDRLP4 20
ADDRGP4 cgs+150560+740
INDIRI4
ASGNI4
line 3264
;3264:		mark = cgs.media.energyMarkShader;
ADDRLP4 12
ADDRGP4 cgs+150560+448
INDIRI4
ASGNI4
line 3265
;3265:		radius = 16;
ADDRLP4 28
CNSTF4 1098907648
ASGNF4
line 3266
;3266:		break;
ADDRGP4 $2064
JUMPV
LABELV $2142
line 3268
;3267:	case WP_BFG:
;3268:		mod = cgs.media.dishFlashModel;
ADDRLP4 24
ADDRGP4 cgs+150560+492
INDIRI4
ASGNI4
line 3269
;3269:		shader = cgs.media.bfgExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+150560+520
INDIRI4
ASGNI4
line 3270
;3270:		sfx = cgs.media.sfx_rockexp;
ADDRLP4 20
ADDRGP4 cgs+150560+736
INDIRI4
ASGNI4
line 3271
;3271:		mark = cgs.media.burnMarkShader;
ADDRLP4 12
ADDRGP4 cgs+150560+440
INDIRI4
ASGNI4
line 3272
;3272:		radius = 32;
ADDRLP4 28
CNSTF4 1107296256
ASGNF4
line 3273
;3273:		light = BFG_EXPLOSION_RADIUS;
ADDRLP4 40
CNSTF4 1133903872
ASGNF4
line 3274
;3274:		lightColor[0] = 0.2f;
ADDRLP4 0
CNSTF4 1045220557
ASGNF4
line 3275
;3275:		lightColor[1] = 1.0f;
ADDRLP4 0+4
CNSTF4 1065353216
ASGNF4
line 3276
;3276:		lightColor[2] = 0.2f;
ADDRLP4 0+8
CNSTF4 1045220557
ASGNF4
line 3277
;3277:		isSprite = qtrue;
ADDRLP4 44
CNSTI4 1
ASGNI4
line 3278
;3278:		break;
ADDRGP4 $2064
JUMPV
LABELV $2153
line 3280
;3279:	case WP_SHOTGUN:
;3280:		mod = cgs.media.bulletFlashModel;
ADDRLP4 24
ADDRGP4 cgs+150560+484
INDIRI4
ASGNI4
line 3281
;3281:		shader = cgs.media.bulletExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+150560+508
INDIRI4
ASGNI4
line 3282
;3282:		mark = cgs.media.bulletMarkShader;
ADDRLP4 12
ADDRGP4 cgs+150560+436
INDIRI4
ASGNI4
line 3283
;3283:		sfx = 0;
ADDRLP4 20
CNSTI4 0
ASGNI4
line 3284
;3284:		radius = 4;
ADDRLP4 28
CNSTF4 1082130432
ASGNF4
line 3285
;3285:		break;
ADDRGP4 $2064
JUMPV
LABELV $2160
line 3313
;3286:
;3287:#ifdef MISSIONPACK
;3288:	case WP_CHAINGUN:
;3289:		mod = cgs.media.bulletFlashModel;
;3290:		if( soundType == IMPACTSOUND_FLESH ) {
;3291:			sfx = cgs.media.sfx_chghitflesh;
;3292:		} else if( soundType == IMPACTSOUND_METAL ) {
;3293:			sfx = cgs.media.sfx_chghitmetal;
;3294:		} else {
;3295:			sfx = cgs.media.sfx_chghit;
;3296:		}
;3297:		mark = cgs.media.bulletMarkShader;
;3298:
;3299:		r = rand() & 3;
;3300:		if ( r < 2 ) {
;3301:			sfx = cgs.media.sfx_ric1;
;3302:		} else if ( r == 2 ) {
;3303:			sfx = cgs.media.sfx_ric2;
;3304:		} else {
;3305:			sfx = cgs.media.sfx_ric3;
;3306:		}
;3307:
;3308:		radius = 8;
;3309:		break;
;3310:#endif
;3311:
;3312:	case WP_MACHINEGUN:
;3313:		mod = cgs.media.bulletFlashModel;
ADDRLP4 24
ADDRGP4 cgs+150560+484
INDIRI4
ASGNI4
line 3314
;3314:		shader = cgs.media.bulletExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+150560+508
INDIRI4
ASGNI4
line 3315
;3315:		mark = cgs.media.bulletMarkShader;
ADDRLP4 12
ADDRGP4 cgs+150560+436
INDIRI4
ASGNI4
line 3317
;3316:
;3317:		r = rand() & 3;
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 52
ADDRLP4 92
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 3318
;3318:		if ( r == 0 ) {
ADDRLP4 52
INDIRI4
CNSTI4 0
NEI4 $2167
line 3319
;3319:			sfx = cgs.media.sfx_ric1;
ADDRLP4 20
ADDRGP4 cgs+150560+720
INDIRI4
ASGNI4
line 3320
;3320:		} else if ( r == 1 ) {
ADDRGP4 $2168
JUMPV
LABELV $2167
ADDRLP4 52
INDIRI4
CNSTI4 1
NEI4 $2171
line 3321
;3321:			sfx = cgs.media.sfx_ric2;
ADDRLP4 20
ADDRGP4 cgs+150560+724
INDIRI4
ASGNI4
line 3322
;3322:		} else {
ADDRGP4 $2172
JUMPV
LABELV $2171
line 3323
;3323:			sfx = cgs.media.sfx_ric3;
ADDRLP4 20
ADDRGP4 cgs+150560+728
INDIRI4
ASGNI4
line 3324
;3324:		}
LABELV $2172
LABELV $2168
line 3326
;3325:
;3326:		radius = 8;
ADDRLP4 28
CNSTF4 1090519040
ASGNF4
line 3327
;3327:		break;
LABELV $2064
line 3330
;3328:	}
;3329:
;3330:	if ( sfx ) {
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $2179
line 3331
;3331:		trap_S_StartSound( origin, ENTITYNUM_WORLD, CHAN_AUTO, sfx );
ADDRFP4 8
INDIRP4
ARGP4
CNSTI4 1022
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 20
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 3332
;3332:	}
LABELV $2179
line 3337
;3333:
;3334:	//
;3335:	// create the explosion
;3336:	//
;3337:	if ( mod ) {
ADDRLP4 24
INDIRI4
CNSTI4 0
EQI4 $2181
line 3338
;3338:		le = CG_MakeExplosion( origin, dir, mod, shader, duration, isSprite );
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 48
INDIRI4
ARGI4
ADDRLP4 44
INDIRI4
ARGI4
ADDRLP4 88
ADDRGP4 CG_MakeExplosion
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 88
INDIRP4
ASGNP4
line 3339
;3339:		le->light = light;
ADDRLP4 16
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 40
INDIRF4
ASGNF4
line 3340
;3340:		VectorCopy( lightColor, le->lightColor );
ADDRLP4 16
INDIRP4
CNSTI4 132
ADDP4
ADDRLP4 0
INDIRB
ASGNB 12
line 3341
;3341:		if ( weapon == WP_RAILGUN ) {
ADDRFP4 0
INDIRI4
CNSTI4 7
NEI4 $2183
line 3343
;3342:			// colorize with client color
;3343:			VectorCopy( cgs.clientinfo[clientNum].color1, le->color );
ADDRLP4 16
INDIRP4
CNSTI4 108
ADDP4
ADDRFP4 4
INDIRI4
CNSTI4 1680
MULI4
ADDRGP4 cgs+41012+44
ADDP4
INDIRB
ASGNB 12
line 3344
;3344:			le->refEntity.shaderRGBA[0] = le->color[0] * 255;
ADDRLP4 100
ADDRLP4 16
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 104
CNSTF4 1325400064
ASGNF4
ADDRLP4 100
INDIRF4
ADDRLP4 104
INDIRF4
LTF4 $2188
ADDRLP4 92
ADDRLP4 100
INDIRF4
ADDRLP4 104
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $2189
JUMPV
LABELV $2188
ADDRLP4 92
ADDRLP4 100
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $2189
ADDRLP4 16
INDIRP4
CNSTI4 268
ADDP4
ADDRLP4 92
INDIRU4
CVUU1 4
ASGNU1
line 3345
;3345:			le->refEntity.shaderRGBA[1] = le->color[1] * 255;
ADDRLP4 116
ADDRLP4 16
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 120
CNSTF4 1325400064
ASGNF4
ADDRLP4 116
INDIRF4
ADDRLP4 120
INDIRF4
LTF4 $2191
ADDRLP4 108
ADDRLP4 116
INDIRF4
ADDRLP4 120
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $2192
JUMPV
LABELV $2191
ADDRLP4 108
ADDRLP4 116
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $2192
ADDRLP4 16
INDIRP4
CNSTI4 269
ADDP4
ADDRLP4 108
INDIRU4
CVUU1 4
ASGNU1
line 3346
;3346:			le->refEntity.shaderRGBA[2] = le->color[2] * 255;
ADDRLP4 132
ADDRLP4 16
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 136
CNSTF4 1325400064
ASGNF4
ADDRLP4 132
INDIRF4
ADDRLP4 136
INDIRF4
LTF4 $2194
ADDRLP4 124
ADDRLP4 132
INDIRF4
ADDRLP4 136
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $2195
JUMPV
LABELV $2194
ADDRLP4 124
ADDRLP4 132
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $2195
ADDRLP4 16
INDIRP4
CNSTI4 270
ADDP4
ADDRLP4 124
INDIRU4
CVUU1 4
ASGNU1
line 3347
;3347:			le->refEntity.shaderRGBA[3] = 255;
ADDRLP4 16
INDIRP4
CNSTI4 271
ADDP4
CNSTU1 255
ASGNU1
line 3348
;3348:		}
LABELV $2183
line 3349
;3349:	}
LABELV $2181
line 3354
;3350:
;3351:	//
;3352:	// impact mark
;3353:	//
;3354:	alphaFade = (mark == cgs.media.energyMarkShader);	// plasma fades alpha, all others fade color
ADDRLP4 12
INDIRI4
ADDRGP4 cgs+150560+448
INDIRI4
NEI4 $2199
ADDRLP4 88
CNSTI4 1
ASGNI4
ADDRGP4 $2200
JUMPV
LABELV $2199
ADDRLP4 88
CNSTI4 0
ASGNI4
LABELV $2200
ADDRLP4 36
ADDRLP4 88
INDIRI4
ASGNI4
line 3355
;3355:	if ( weapon == WP_RAILGUN ) {
ADDRFP4 0
INDIRI4
CNSTI4 7
NEI4 $2201
line 3359
;3356:		float	*color;
;3357:
;3358:		// colorize with client color
;3359:		color = cgs.clientinfo[ clientNum ].color1; // was color2
ADDRLP4 92
ADDRFP4 4
INDIRI4
CNSTI4 1680
MULI4
ADDRGP4 cgs+41012+44
ADDP4
ASGNP4
line 3361
;3360:
;3361:		CG_ImpactMark( mark, origin, dir, random()*360, color[0], color[1], color[2], 1.0, alphaFade, radius, qfalse );
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 96
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1010041192
MULF4
ARGF4
ADDRLP4 100
ADDRLP4 92
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
INDIRF4
ARGF4
ADDRLP4 100
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 100
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 28
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 3362
;3362:	} else {
ADDRGP4 $2202
JUMPV
LABELV $2201
line 3363
;3363:		CG_ImpactMark( mark, origin, dir, random()*360, 1.0, 1.0, 1.0, 1.0, alphaFade, radius, qfalse );
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1010041192
MULF4
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 28
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 3364
;3364:	}
LABELV $2202
line 3365
;3365:}
LABELV $2060
endproc CG_MissileHitWall 140 44
export CG_MissileHitPlayer
proc CG_MissileHitPlayer 4 20
line 3373
;3366:
;3367:
;3368:/*
;3369:=================
;3370:CG_MissileHitPlayer
;3371:=================
;3372:*/
;3373:void CG_MissileHitPlayer( int weapon, vec3_t origin, vec3_t dir, int entityNum ) {
line 3374
;3374:	CG_Bleed( origin, entityNum );
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_Bleed
CALLV
pop
line 3385
;3375:
;3376:#ifdef USE_HAPTIC
;3377:	// GUNNM TODO detect 'mySelf' with non native QVM
;3378:	if ( entityNum == vrinfo->clientNum ) {
;3379:		trap_HapticEvent("fireball", 0, 0, 80, 0, 0);
;3380:	}
;3381:#endif
;3382:
;3383:	// some weapons will make an explosion with the blood, while
;3384:	// others will just make the blood
;3385:	switch ( weapon ) {
ADDRLP4 0
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 4
LTI4 $2207
ADDRLP4 0
INDIRI4
CNSTI4 10
GTI4 $2207
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $2209-16
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $2209
address $2208
address $2208
address $2207
address $2207
address $2208
address $2208
address $2208
code
LABELV $2208
line 3398
;3386:	case WP_GRENADE_LAUNCHER:
;3387:	case WP_ROCKET_LAUNCHER:
;3388:	case WP_PLASMAGUN:
;3389:	case WP_BFG:
;3390:#ifdef USE_GRAPPLING_HOOK
;3391:	case WP_GRAPPLING_HOOK:
;3392:#endif
;3393:#ifdef MISSIONPACK
;3394:	case WP_NAILGUN:
;3395:	case WP_CHAINGUN:
;3396:	case WP_PROX_LAUNCHER:
;3397:#endif
;3398:		CG_MissileHitWall( weapon, 0, origin, dir, IMPACTSOUND_FLESH );
ADDRFP4 0
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 3399
;3399:		break;
line 3401
;3400:	default:
;3401:		break;
LABELV $2207
line 3403
;3402:	}
;3403:}
LABELV $2205
endproc CG_MissileHitPlayer 4 20
proc CG_ShotgunPellet 128 28
line 3420
;3404:
;3405:
;3406:
;3407:/*
;3408:============================================================================
;3409:
;3410:SHOTGUN TRACING
;3411:
;3412:============================================================================
;3413:*/
;3414:
;3415:/*
;3416:================
;3417:CG_ShotgunPellet
;3418:================
;3419:*/
;3420:static void CG_ShotgunPellet( vec3_t start, vec3_t end, int skipNum ) {
line 3424
;3421:	trace_t		tr;
;3422:	int sourceContentType, destContentType;
;3423:
;3424:	CG_Trace( &tr, start, NULL, NULL, end, skipNum, MASK_SHOT );
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
CNSTI4 100663297
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 3426
;3425:
;3426:	sourceContentType = CG_PointContents( start, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 64
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 56
ADDRLP4 64
INDIRI4
ASGNI4
line 3427
;3427:	destContentType = CG_PointContents( tr.endpos, 0 );
ADDRLP4 0+12
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 68
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 68
INDIRI4
ASGNI4
line 3430
;3428:
;3429:	// FIXME: should probably move this cruft into CG_BubbleTrail
;3430:	if ( sourceContentType == destContentType ) {
ADDRLP4 56
INDIRI4
ADDRLP4 60
INDIRI4
NEI4 $2213
line 3431
;3431:		if ( sourceContentType & CONTENTS_WATER ) {
ADDRLP4 56
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $2214
line 3432
;3432:			CG_BubbleTrail( start, tr.endpos, 32 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 3433
;3433:		}
line 3434
;3434:	} else if ( sourceContentType & CONTENTS_WATER ) {
ADDRGP4 $2214
JUMPV
LABELV $2213
ADDRLP4 56
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $2218
line 3437
;3435:		trace_t trace;
;3436:
;3437:		trap_CM_BoxTrace( &trace, end, start, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 72
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 3438
;3438:		CG_BubbleTrail( start, trace.endpos, 32 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 72+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 3439
;3439:	} else if ( destContentType & CONTENTS_WATER ) {
ADDRGP4 $2219
JUMPV
LABELV $2218
ADDRLP4 60
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $2221
line 3442
;3440:		trace_t trace;
;3441:
;3442:		trap_CM_BoxTrace( &trace, start, end, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 72
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 3443
;3443:		CG_BubbleTrail( tr.endpos, trace.endpos, 32 );
ADDRLP4 0+12
ARGP4
ADDRLP4 72+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 3444
;3444:	}
LABELV $2221
LABELV $2219
LABELV $2214
line 3446
;3445:
;3446:	if (  tr.surfaceFlags & SURF_NOIMPACT ) {
ADDRLP4 0+44
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $2225
line 3447
;3447:		return;
ADDRGP4 $2211
JUMPV
LABELV $2225
line 3450
;3448:	}
;3449:
;3450:	if ( cg_entities[tr.entityNum].currentState.eType == ET_PLAYER ) {
ADDRLP4 0+52
INDIRI4
CNSTI4 1236
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $2228
line 3451
;3451:		CG_MissileHitPlayer( WP_SHOTGUN, tr.endpos, tr.plane.normal, tr.entityNum );
CNSTI4 3
ARGI4
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
ADDRLP4 0+52
INDIRI4
ARGI4
ADDRGP4 CG_MissileHitPlayer
CALLV
pop
line 3452
;3452:	} else {
ADDRGP4 $2229
JUMPV
LABELV $2228
line 3453
;3453:		if ( tr.surfaceFlags & SURF_NOIMPACT ) {
ADDRLP4 0+44
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $2235
line 3455
;3454:			// SURF_NOIMPACT will not make a flame puff or a mark
;3455:			return;
ADDRGP4 $2211
JUMPV
LABELV $2235
line 3457
;3456:		}
;3457:		if ( tr.surfaceFlags & SURF_METALSTEPS ) {
ADDRLP4 0+44
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $2238
line 3458
;3458:			CG_MissileHitWall( WP_SHOTGUN, 0, tr.endpos, tr.plane.normal, IMPACTSOUND_METAL );
CNSTI4 3
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 3459
;3459:		} else {
ADDRGP4 $2239
JUMPV
LABELV $2238
line 3460
;3460:			CG_MissileHitWall( WP_SHOTGUN, 0, tr.endpos, tr.plane.normal, IMPACTSOUND_DEFAULT );
CNSTI4 3
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 3461
;3461:		}
LABELV $2239
line 3462
;3462:	}
LABELV $2229
line 3463
;3463:}
LABELV $2211
endproc CG_ShotgunPellet 128 28
proc CG_ShotgunPattern 80 12
line 3473
;3464:
;3465:/*
;3466:================
;3467:CG_ShotgunPattern
;3468:
;3469:Perform the same traces the server did to locate the
;3470:hit splashes
;3471:================
;3472:*/
;3473:static void CG_ShotgunPattern( vec3_t origin, vec3_t origin2, int seed, int otherEntNum ) {
line 3481
;3474:	int			i;
;3475:	float		r, u;
;3476:	vec3_t		end;
;3477:	vec3_t		forward, right, up;
;3478:
;3479:	// derive the right and up vectors from the forward vector, because
;3480:	// the client won't have any other information
;3481:	VectorNormalize2( origin2, forward );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 VectorNormalize2
CALLF4
pop
line 3482
;3482:	PerpendicularVector( right, forward );
ADDRLP4 32
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 3483
;3483:	CrossProduct( forward, right, up );
ADDRLP4 20
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 44
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 3486
;3484:
;3485:	// generate the "random" spread pattern
;3486:	for ( i = 0 ; i < DEFAULT_SHOTGUN_COUNT ; i++ ) {
ADDRLP4 56
CNSTI4 0
ASGNI4
LABELV $2246
line 3487
;3487:		r = Q_crandom( &seed ) * DEFAULT_SHOTGUN_SPREAD * 16;
ADDRFP4 8
ARGP4
ADDRLP4 60
ADDRGP4 Q_crandom
CALLF4
ASGNF4
ADDRLP4 12
ADDRLP4 60
INDIRF4
CNSTF4 1177485312
MULF4
ASGNF4
line 3488
;3488:		u = Q_crandom( &seed ) * DEFAULT_SHOTGUN_SPREAD * 16;
ADDRFP4 8
ARGP4
ADDRLP4 64
ADDRGP4 Q_crandom
CALLF4
ASGNF4
ADDRLP4 16
ADDRLP4 64
INDIRF4
CNSTF4 1177485312
MULF4
ASGNF4
line 3489
;3489:		VectorMA( origin, 8192 * 16, forward, end);
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 68
INDIRP4
INDIRF4
ADDRLP4 20
INDIRF4
CNSTF4 1207959552
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 68
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 20+4
INDIRF4
CNSTF4 1207959552
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 20+8
INDIRF4
CNSTF4 1207959552
MULF4
ADDF4
ASGNF4
line 3490
;3490:		VectorMA (end, r, right, end);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 32
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 32+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 32+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 3491
;3491:		VectorMA (end, u, up, end);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 44
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 44+4
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 3493
;3492:
;3493:		CG_ShotgunPellet( origin, end, otherEntNum );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_ShotgunPellet
CALLV
pop
line 3494
;3494:	}
LABELV $2247
line 3486
ADDRLP4 56
ADDRLP4 56
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 11
LTI4 $2246
line 3495
;3495:}
LABELV $2245
endproc CG_ShotgunPattern 80 12
export CG_ShotgunFire
proc CG_ShotgunFire 44 48
line 3502
;3496:
;3497:/*
;3498:==============
;3499:CG_ShotgunFire
;3500:==============
;3501:*/
;3502:void CG_ShotgunFire( entityState_t *es ) {
line 3506
;3503:	vec3_t	v;
;3504:	int		contents;
;3505:
;3506:	VectorSubtract( es->origin2, es->pos.trBase, v );
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 16
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 20
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
SUBF4
ASGNF4
line 3507
;3507:	VectorNormalize( v );
ADDRLP4 0
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 3508
;3508:	VectorScale( v, 32, v );
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1107296256
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CNSTF4 1107296256
MULF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1107296256
MULF4
ASGNF4
line 3509
;3509:	VectorAdd( es->pos.trBase, v, v );
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 24
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 24
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
ADDF4
ASGNF4
line 3510
;3510:	if ( cgs.glconfig.hardwareType != GLHW_RAGEPRO ) {
ADDRGP4 cgs+20100+11288
INDIRI4
CNSTI4 3
EQI4 $2277
line 3514
;3511:		// ragepro can't alpha fade, so don't even bother with smoke
;3512:		vec3_t			up;
;3513:
;3514:		contents = CG_PointContents( es->pos.trBase, 0 );
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 40
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 40
INDIRI4
ASGNI4
line 3515
;3515:		if ( !( contents & CONTENTS_WATER ) ) {
ADDRLP4 12
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
NEI4 $2281
line 3516
;3516:			VectorSet( up, 0, 0, 8 );
ADDRLP4 28
CNSTF4 0
ASGNF4
ADDRLP4 28+4
CNSTF4 0
ASGNF4
ADDRLP4 28+8
CNSTF4 1090519040
ASGNF4
line 3517
;3517:			CG_SmokePuff( v, up, 32, 1, 1, 1, 0.33f, 900, cg.time, 0, LEF_PUFF_DONT_SCALE, cgs.media.shotgunSmokePuffShader );
ADDRLP4 0
ARGP4
ADDRLP4 28
ARGP4
CNSTF4 1107296256
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1051260355
ARGF4
CNSTF4 1147207680
ARGF4
ADDRGP4 cg+234764
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 cgs+150560+284
INDIRI4
ARGI4
ADDRGP4 CG_SmokePuff
CALLP4
pop
line 3518
;3518:		}
LABELV $2281
line 3519
;3519:	}
LABELV $2277
line 3520
;3520:	CG_ShotgunPattern( es->pos.trBase, es->origin2, es->eventParm, es->otherEntityNum );
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 28
INDIRP4
CNSTI4 104
ADDP4
ARGP4
ADDRLP4 28
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
ADDRLP4 28
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_ShotgunPattern
CALLV
pop
line 3521
;3521:}
LABELV $2266
endproc CG_ShotgunFire 44 48
export CG_Tracer
proc CG_Tracer 212 16
line 3537
;3522:
;3523:/*
;3524:============================================================================
;3525:
;3526:BULLETS
;3527:
;3528:============================================================================
;3529:*/
;3530:
;3531:
;3532:/*
;3533:===============
;3534:CG_Tracer
;3535:===============
;3536:*/
;3537:void CG_Tracer( vec3_t source, vec3_t dest ) {
line 3546
;3538:	vec3_t		forward, right;
;3539:	polyVert_t	verts[4];
;3540:	vec3_t		line;
;3541:	float		len, begin, end;
;3542:	vec3_t		start, finish;
;3543:	vec3_t		midpoint;
;3544:
;3545:	// tracer
;3546:	VectorSubtract( dest, source, forward );
ADDRLP4 180
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 184
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 108
ADDRLP4 180
INDIRP4
INDIRF4
ADDRLP4 184
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 108+4
ADDRLP4 180
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 184
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 108+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 3547
;3547:	len = VectorNormalize( forward );
ADDRLP4 108
ARGP4
ADDRLP4 188
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 176
ADDRLP4 188
INDIRF4
ASGNF4
line 3550
;3548:
;3549:#ifdef USE_VR
;3550:	if ( cg.vr_controller_type ) {
ADDRGP4 cg+282972
INDIRI4
CNSTI4 0
EQI4 $2291
line 3552
;3551:		// start at muzzle point in VR
;3552:		begin = 0;
ADDRLP4 160
CNSTF4 0
ASGNF4
line 3553
;3553:	}
ADDRGP4 $2292
JUMPV
LABELV $2291
line 3556
;3554:	else
;3555:#endif
;3556:	{
line 3559
;3557:		// non VR users have the fake FPS view, we have to
;3558:		// start at least a little ways from the muzzle
;3559:		if ( len < 100 ) {
ADDRLP4 176
INDIRF4
CNSTF4 1120403456
GEF4 $2294
line 3560
;3560:			return;
ADDRGP4 $2288
JUMPV
LABELV $2294
line 3562
;3561:		}
;3562:		begin = 50 + random() * (len - 60);
ADDRLP4 192
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 160
ADDRLP4 192
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
ADDRLP4 176
INDIRF4
CNSTF4 1114636288
SUBF4
MULF4
CNSTF4 1112014848
ADDF4
ASGNF4
line 3563
;3563:	}
LABELV $2292
line 3565
;3564:
;3565:	end = begin + cg_tracerLength.value;
ADDRLP4 156
ADDRLP4 160
INDIRF4
ADDRGP4 cg_tracerLength+8
INDIRF4
ADDF4
ASGNF4
line 3566
;3566:	if ( end > len ) {
ADDRLP4 156
INDIRF4
ADDRLP4 176
INDIRF4
LEF4 $2297
line 3567
;3567:		end = len;
ADDRLP4 156
ADDRLP4 176
INDIRF4
ASGNF4
line 3568
;3568:	}
LABELV $2297
line 3569
;3569:	VectorMA( source, begin, forward, start );
ADDRLP4 192
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 120
ADDRLP4 192
INDIRP4
INDIRF4
ADDRLP4 108
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 120+4
ADDRLP4 192
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 108+4
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 120+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 108+8
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
line 3570
;3570:	VectorMA( source, end, forward, finish );
ADDRLP4 200
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 132
ADDRLP4 200
INDIRP4
INDIRF4
ADDRLP4 108
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 132+4
ADDRLP4 200
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 108+4
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 132+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 108+8
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
line 3573
;3571:
;3572:#ifdef USE_VR
;3573:	if ( cg.vr_controller_type ) {
ADDRGP4 cg+282972
INDIRI4
CNSTI4 0
EQI4 $2307
line 3574
;3574:		line[0] = DotProduct(forward, client_weapon.axis[1]);
ADDRLP4 144
ADDRLP4 108
INDIRF4
ADDRGP4 client_weapon+12
INDIRF4
MULF4
ADDRLP4 108+4
INDIRF4
ADDRGP4 client_weapon+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 108+8
INDIRF4
ADDRGP4 client_weapon+12+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 3575
;3575:		line[1] = DotProduct(forward, client_weapon.axis[2]);
ADDRLP4 144+4
ADDRLP4 108
INDIRF4
ADDRGP4 client_weapon+24
INDIRF4
MULF4
ADDRLP4 108+4
INDIRF4
ADDRGP4 client_weapon+24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 108+8
INDIRF4
ADDRGP4 client_weapon+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 3577
;3576:
;3577:		VectorScale(client_weapon.axis[1], line[1], right);
ADDRLP4 96
ADDRGP4 client_weapon+12
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+4
ADDRGP4 client_weapon+12+4
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+8
ADDRGP4 client_weapon+12+8
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
line 3578
;3578:		VectorMA(right, -line[0], client_weapon.axis[2], right);
ADDRLP4 208
ADDRLP4 144
INDIRF4
NEGF4
ASGNF4
ADDRLP4 96
ADDRLP4 96
INDIRF4
ADDRGP4 client_weapon+24
INDIRF4
ADDRLP4 208
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+4
ADDRLP4 96+4
INDIRF4
ADDRGP4 client_weapon+24+4
INDIRF4
ADDRLP4 208
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+8
ADDRLP4 96+8
INDIRF4
ADDRGP4 client_weapon+24+8
INDIRF4
ADDRLP4 144
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 3579
;3579:	}
ADDRGP4 $2308
JUMPV
LABELV $2307
line 3582
;3580:	else
;3581:#endif
;3582:	{
line 3583
;3583:		line[0] = DotProduct( forward, cg.refdef.viewaxis[1] );
ADDRLP4 144
ADDRLP4 108
INDIRF4
ADDRGP4 cg+236804+36+12
INDIRF4
MULF4
ADDRLP4 108+4
INDIRF4
ADDRGP4 cg+236804+36+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 108+8
INDIRF4
ADDRGP4 cg+236804+36+12+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 3584
;3584:		line[1] = DotProduct( forward, cg.refdef.viewaxis[2] );
ADDRLP4 144+4
ADDRLP4 108
INDIRF4
ADDRGP4 cg+236804+36+24
INDIRF4
MULF4
ADDRLP4 108+4
INDIRF4
ADDRGP4 cg+236804+36+24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 108+8
INDIRF4
ADDRGP4 cg+236804+36+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 3586
;3585:
;3586:		VectorScale( cg.refdef.viewaxis[1], line[1], right );
ADDRLP4 96
ADDRGP4 cg+236804+36+12
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+4
ADDRGP4 cg+236804+36+12+4
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+8
ADDRGP4 cg+236804+36+12+8
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
line 3587
;3587:		VectorMA( right, -line[0], cg.refdef.viewaxis[2], right );
ADDRLP4 208
ADDRLP4 144
INDIRF4
NEGF4
ASGNF4
ADDRLP4 96
ADDRLP4 96
INDIRF4
ADDRGP4 cg+236804+36+24
INDIRF4
ADDRLP4 208
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg+236804+36+24+4
INDIRF4
ADDRLP4 208
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+8
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg+236804+36+24+8
INDIRF4
ADDRLP4 144
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 3588
;3588:	}
LABELV $2308
line 3590
;3589:
;3590:	VectorNormalize( right );
ADDRLP4 96
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 3592
;3591:
;3592:	VectorMA( finish, cg_tracerWidth.value, right, verts[0].xyz );
ADDRLP4 0
ADDRLP4 132
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 132+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 132+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 3593
;3593:	verts[0].st[0] = 0;
ADDRLP4 0+12
CNSTF4 0
ASGNF4
line 3594
;3594:	verts[0].st[1] = 1;
ADDRLP4 0+12+4
CNSTF4 1065353216
ASGNF4
line 3595
;3595:	verts[0].modulate[0] = 255;
ADDRLP4 0+20
CNSTU1 255
ASGNU1
line 3596
;3596:	verts[0].modulate[1] = 255;
ADDRLP4 0+20+1
CNSTU1 255
ASGNU1
line 3597
;3597:	verts[0].modulate[2] = 255;
ADDRLP4 0+20+2
CNSTU1 255
ASGNU1
line 3598
;3598:	verts[0].modulate[3] = 255;
ADDRLP4 0+20+3
CNSTU1 255
ASGNU1
line 3600
;3599:
;3600:	VectorMA( finish, -cg_tracerWidth.value, right, verts[1].xyz );
ADDRLP4 0+24
ADDRLP4 132
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+4
ADDRLP4 132+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+8
ADDRLP4 132+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 3601
;3601:	verts[1].st[0] = 1;
ADDRLP4 0+24+12
CNSTF4 1065353216
ASGNF4
line 3602
;3602:	verts[1].st[1] = 0;
ADDRLP4 0+24+12+4
CNSTF4 0
ASGNF4
line 3603
;3603:	verts[1].modulate[0] = 255;
ADDRLP4 0+24+20
CNSTU1 255
ASGNU1
line 3604
;3604:	verts[1].modulate[1] = 255;
ADDRLP4 0+24+20+1
CNSTU1 255
ASGNU1
line 3605
;3605:	verts[1].modulate[2] = 255;
ADDRLP4 0+24+20+2
CNSTU1 255
ASGNU1
line 3606
;3606:	verts[1].modulate[3] = 255;
ADDRLP4 0+24+20+3
CNSTU1 255
ASGNU1
line 3608
;3607:
;3608:	VectorMA( start, -cg_tracerWidth.value, right, verts[2].xyz );
ADDRLP4 0+48
ADDRLP4 120
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+4
ADDRLP4 120+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+8
ADDRLP4 120+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 3609
;3609:	verts[2].st[0] = 1;
ADDRLP4 0+48+12
CNSTF4 1065353216
ASGNF4
line 3610
;3610:	verts[2].st[1] = 1;
ADDRLP4 0+48+12+4
CNSTF4 1065353216
ASGNF4
line 3611
;3611:	verts[2].modulate[0] = 255;
ADDRLP4 0+48+20
CNSTU1 255
ASGNU1
line 3612
;3612:	verts[2].modulate[1] = 255;
ADDRLP4 0+48+20+1
CNSTU1 255
ASGNU1
line 3613
;3613:	verts[2].modulate[2] = 255;
ADDRLP4 0+48+20+2
CNSTU1 255
ASGNU1
line 3614
;3614:	verts[2].modulate[3] = 255;
ADDRLP4 0+48+20+3
CNSTU1 255
ASGNU1
line 3616
;3615:
;3616:	VectorMA( start, cg_tracerWidth.value, right, verts[3].xyz );
ADDRLP4 0+72
ADDRLP4 120
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+4
ADDRLP4 120+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+8
ADDRLP4 120+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 3617
;3617:	verts[3].st[0] = 0;
ADDRLP4 0+72+12
CNSTF4 0
ASGNF4
line 3618
;3618:	verts[3].st[1] = 0;
ADDRLP4 0+72+12+4
CNSTF4 0
ASGNF4
line 3619
;3619:	verts[3].modulate[0] = 255;
ADDRLP4 0+72+20
CNSTU1 255
ASGNU1
line 3620
;3620:	verts[3].modulate[1] = 255;
ADDRLP4 0+72+20+1
CNSTU1 255
ASGNU1
line 3621
;3621:	verts[3].modulate[2] = 255;
ADDRLP4 0+72+20+2
CNSTU1 255
ASGNU1
line 3622
;3622:	verts[3].modulate[3] = 255;
ADDRLP4 0+72+20+3
CNSTU1 255
ASGNU1
line 3624
;3623:
;3624:	trap_R_AddPolyToScene( cgs.media.tracerShader, 4, verts );
ADDRGP4 cgs+150560+220
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 3626
;3625:
;3626:	midpoint[0] = ( start[0] + finish[0] ) * 0.5;
ADDRLP4 164
ADDRLP4 120
INDIRF4
ADDRLP4 132
INDIRF4
ADDF4
CNSTF4 1056964608
MULF4
ASGNF4
line 3627
;3627:	midpoint[1] = ( start[1] + finish[1] ) * 0.5;
ADDRLP4 164+4
ADDRLP4 120+4
INDIRF4
ADDRLP4 132+4
INDIRF4
ADDF4
CNSTF4 1056964608
MULF4
ASGNF4
line 3628
;3628:	midpoint[2] = ( start[2] + finish[2] ) * 0.5;
ADDRLP4 164+8
ADDRLP4 120+8
INDIRF4
ADDRLP4 132+8
INDIRF4
ADDF4
CNSTF4 1056964608
MULF4
ASGNF4
line 3631
;3629:
;3630:	// add the tracer sound
;3631:	trap_S_StartSound( midpoint, ENTITYNUM_WORLD, CHAN_AUTO, cgs.media.tracerSound );
ADDRLP4 164
ARGP4
CNSTI4 1022
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 cgs+150560+580
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 3633
;3632:
;3633:}
LABELV $2288
endproc CG_Tracer 212 16
proc CG_CalcMuzzlePoint 52 16
line 3641
;3634:
;3635:
;3636:/*
;3637:======================
;3638:CG_CalcMuzzlePoint
;3639:======================
;3640:*/
;3641:static qboolean	CG_CalcMuzzlePoint( int entityNum, vec3_t muzzle ) {
line 3648
;3642:	vec3_t		forward;
;3643:	centity_t	*cent;
;3644:	int			anim;
;3645:	qboolean 	myself;
;3646:	int 		vr_controller_type;
;3647:
;3648:	myself = ( entityNum == cg.snap->ps.clientNum );
ADDRFP4 0
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $2518
ADDRLP4 28
CNSTI4 1
ASGNI4
ADDRGP4 $2519
JUMPV
LABELV $2518
ADDRLP4 28
CNSTI4 0
ASGNI4
LABELV $2519
ADDRLP4 20
ADDRLP4 28
INDIRI4
ASGNI4
line 3650
;3649:
;3650:	if ( myself ) {
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $2520
line 3655
;3651:		//==================================
;3652:		// cent is client player
;3653:		//==================================
;3654:#ifdef USE_VR_QVM
;3655:		if ( cg.vr_controller_type ) {
ADDRGP4 cg+282972
INDIRI4
CNSTI4 0
EQI4 $2522
line 3657
;3656:			// VR client
;3657:			VectorCopy(cg.predictedPlayerState.right_muzzle_position, muzzle);
ADDRFP4 4
INDIRP4
ADDRGP4 cg+234796+496
INDIRB
ASGNB 12
line 3658
;3658:		}
ADDRGP4 $2523
JUMPV
LABELV $2522
line 3668
;3659:		else
;3660:#endif
;3661:#ifdef USE_NATIVE_HACK
;3662:		if ( cg.vr_controller_type )
;3663:		{
;3664:			VectorCopy(client_weapon.muzzle, muzzle);
;3665:		}
;3666:		else
;3667:#endif
;3668:		{
line 3670
;3669:			// not a VR client
;3670:			VectorCopy( cg.snap->ps.origin, muzzle );
ADDRFP4 4
INDIRP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 64
ADDP4
INDIRB
ASGNB 12
line 3671
;3671:			muzzle[2] += cg.snap->ps.viewheight;
ADDRLP4 32
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
ADDRGP4 cg+36
INDIRP4
CNSTI4 208
ADDP4
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 3672
;3672:			AngleVectors( cg.snap->ps.viewangles, forward, NULL, NULL );
ADDRGP4 cg+36
INDIRP4
CNSTI4 196
ADDP4
ARGP4
ADDRLP4 4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 3674
;3673:
;3674:			VectorMA(muzzle, 14, forward, muzzle);
ADDRLP4 36
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
ADDRLP4 4
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 40
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 4+4
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 44
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 44
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 4+8
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
line 3675
;3675:		}
LABELV $2523
line 3677
;3676:		
;3677:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $2515
JUMPV
LABELV $2520
line 3683
;3678:	}
;3679:
;3680:	//==================================
;3681:	// cent is another player's entity
;3682:	//==================================
;3683:	cent = &cg_entities[entityNum];
ADDRLP4 0
ADDRFP4 0
INDIRI4
CNSTI4 1236
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 3684
;3684:	if ( !cent->currentValid ) {
ADDRLP4 0
INDIRP4
CNSTI4 916
ADDP4
INDIRI4
CNSTI4 0
NEI4 $2532
line 3685
;3685:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $2515
JUMPV
LABELV $2532
line 3688
;3686:	}
;3687:
;3688:	vr_controller_type = VR_get_cent_controller_type( cent );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 VR_get_cent_controller_type
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 32
INDIRI4
ASGNI4
line 3692
;3689:
;3690:#ifdef USE_VR_QVM
;3691:	// VR client
;3692:	if ( vr_controller_type > 0) {
ADDRLP4 24
INDIRI4
CNSTI4 0
LEI4 $2534
line 3694
;3693:		//right hand origin
;3694:		VectorCopy(cent->currentState.rmpos.trBase, muzzle);
ADDRFP4 4
INDIRP4
ADDRLP4 0
INDIRP4
CNSTI4 256
ADDP4
INDIRB
ASGNB 12
line 3696
;3695:		//right hand angles
;3696:		AngleVectors(cent->currentState.rapos.trBase, forward, NULL, NULL);
ADDRLP4 0
INDIRP4
CNSTI4 292
ADDP4
ARGP4
ADDRLP4 4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 3699
;3697:		// left hand weapon
;3698:		//AngleVectors(cent->currentState.lapos.trBase, forward, NULL, NULL);
;3699:	}
ADDRGP4 $2535
JUMPV
LABELV $2534
line 3703
;3700:	else
;3701:#endif
;3702:	// Not a VR client
;3703:	{
line 3705
;3704:		//view origin
;3705:		VectorCopy(cent->currentState.pos.trBase, muzzle);
ADDRFP4 4
INDIRP4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 3707
;3706:		//view angles
;3707:		AngleVectors(cent->currentState.apos.trBase, forward, NULL, NULL);
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ARGP4
ADDRLP4 4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 3708
;3708:	}
LABELV $2535
line 3710
;3709:
;3710:	anim = cent->currentState.legsAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 3711
;3711:	if ( anim == LEGS_WALKCR || anim == LEGS_IDLECR ) {
ADDRLP4 16
INDIRI4
CNSTI4 13
EQI4 $2538
ADDRLP4 16
INDIRI4
CNSTI4 23
NEI4 $2536
LABELV $2538
line 3713
;3712:#ifdef USE_VR
;3713:		muzzle[2] += cg.heightCrouch;
ADDRLP4 40
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRF4
ADDRGP4 cg+282964
INDIRF4
ADDF4
ASGNF4
line 3717
;3714:#else
;3715:		muzzle[2] += CROUCH_VIEWHEIGHT;
;3716:#endif
;3717:	} else {
ADDRGP4 $2537
JUMPV
LABELV $2536
line 3719
;3718:#ifdef USE_VR
;3719:		muzzle[2] += cg.heightStand;
ADDRLP4 40
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRF4
ADDRGP4 cg+282960
INDIRF4
ADDF4
ASGNF4
line 3723
;3720:#else
;3721:		muzzle[2] += DEFAULT_VIEWHEIGHT;
;3722:#endif
;3723:	}
LABELV $2537
line 3725
;3724:
;3725:	VectorMA( muzzle, 14, forward, muzzle );
ADDRLP4 40
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRF4
ADDRLP4 4
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 44
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 44
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 4+4
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 48
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 48
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 4+8
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
line 3727
;3726:
;3727:	return qtrue;
CNSTI4 1
RETI4
LABELV $2515
endproc CG_CalcMuzzlePoint 52 16
export CG_Bullet
proc CG_Bullet 96 28
line 3738
;3728:
;3729:}
;3730:
;3731:/*
;3732:======================
;3733:CG_Bullet
;3734:
;3735:Renders bullet effects.
;3736:======================
;3737:*/
;3738:void CG_Bullet( vec3_t end, int sourceEntityNum, vec3_t normal, qboolean flesh, int fleshEntityNum ) {
line 3745
;3739:	trace_t trace;
;3740:	int sourceContentType, destContentType;
;3741:	vec3_t		start;
;3742:
;3743:	// if the shooter is currently valid, calc a source point and possibly
;3744:	// do trail effects
;3745:	if ( sourceEntityNum >= 0 && cg_tracerChance.value > 0 ) {
ADDRFP4 4
INDIRI4
CNSTI4 0
LTI4 $2544
ADDRGP4 cg_tracerChance+8
INDIRF4
CNSTF4 0
LEF4 $2544
line 3746
;3746:		if ( CG_CalcMuzzlePoint( sourceEntityNum, start ) ) {
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRLP4 76
ADDRGP4 CG_CalcMuzzlePoint
CALLI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 0
EQI4 $2547
line 3747
;3747:			sourceContentType = CG_PointContents( start, 0 );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 80
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 80
INDIRI4
ASGNI4
line 3748
;3748:			destContentType = CG_PointContents( end, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 84
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 84
INDIRI4
ASGNI4
line 3751
;3749:
;3750:			// do a complete bubble trail if necessary
;3751:			if ( ( sourceContentType == destContentType ) && ( sourceContentType & CONTENTS_WATER ) ) {
ADDRLP4 88
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 88
INDIRI4
ADDRLP4 16
INDIRI4
NEI4 $2549
ADDRLP4 88
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $2549
line 3752
;3752:				CG_BubbleTrail( start, end, 32 );
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 3753
;3753:			}
ADDRGP4 $2550
JUMPV
LABELV $2549
line 3755
;3754:			// bubble trail from water into air
;3755:			else if ( ( sourceContentType & CONTENTS_WATER ) ) {
ADDRLP4 12
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $2551
line 3756
;3756:				trap_CM_BoxTrace( &trace, end, start, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 20
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 3757
;3757:				CG_BubbleTrail( start, trace.endpos, 32 );
ADDRLP4 0
ARGP4
ADDRLP4 20+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 3758
;3758:			}
ADDRGP4 $2552
JUMPV
LABELV $2551
line 3760
;3759:			// bubble trail from air into water
;3760:			else if ( ( destContentType & CONTENTS_WATER ) ) {
ADDRLP4 16
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $2554
line 3761
;3761:				trap_CM_BoxTrace( &trace, start, end, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 20
ARGP4
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 3762
;3762:				CG_BubbleTrail( trace.endpos, end, 32 );
ADDRLP4 20+12
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 3763
;3763:			}
LABELV $2554
LABELV $2552
LABELV $2550
line 3766
;3764:
;3765:			// draw a tracer
;3766:			if ( random() < cg_tracerChance.value ) {
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
ADDRGP4 cg_tracerChance+8
INDIRF4
GEF4 $2557
line 3767
;3767:				CG_Tracer( start, end );
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Tracer
CALLV
pop
line 3768
;3768:			}
LABELV $2557
line 3769
;3769:		}
LABELV $2547
line 3770
;3770:	}
LABELV $2544
line 3773
;3771:
;3772:	// impact splash and mark
;3773:	if ( flesh ) {
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $2560
line 3774
;3774:		CG_Bleed( end, fleshEntityNum );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Bleed
CALLV
pop
line 3775
;3775:	} else {
ADDRGP4 $2561
JUMPV
LABELV $2560
line 3776
;3776:		CG_MissileHitWall( WP_MACHINEGUN, 0, end, normal, IMPACTSOUND_DEFAULT );
CNSTI4 2
ARGI4
CNSTI4 0
ARGI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 3777
;3777:	}
LABELV $2561
line 3779
;3778:
;3779:}
LABELV $2543
endproc CG_Bullet 96 28
import cosf
import sinf
import CG_IsDeathCam
import CG_IsThirdPersonFollowMode_Query
import CG_IsFollowMode
import CG_ConvertFromVR
import CG_CalculateVRPositionInWorld
import CG_CalculateWeaponPosition_VR_3Dof
import CG_CalculateWeaponPosition_VR_6Dof
import math_length
import Matrix4x4_ConvertToEntity
import Matrix4x4_Concat
import Matrix4x4_CreateFromEntity
import VR_get_ps_controller_type
import VR_get_cent_controller_type
import VR_get_cent_controller_angles
import VR_get_ps_controller_angles
import VR_get_cent_vrFlags
import VR_get_ps_vrFlags
import VR_get_client_vrFlags
import VR_get_client_controller_offset
import VR_get_client_controller_position
import VR_get_client_HMD_angles
import VR_get_client_HMD_position
import VR_get_client_controller_type
import trap_R_AddLinearLightToScene
import trap_R_AddRefEntityToScene2
import linearLight
import intShaderTime
import CG_NewParticleArea
import initparticles
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_VR_KeepLeftAngles
import trap_VR_keepLeftMuzzlePos
import trap_VR_KeepSpawnAngles
import trap_VR_KeepRightAngles
import trap_VR_keepRightMuzzlePos
import CG_ChangeFrameResolution
import trap_R_RenderHUD
import trap_R_inPVS
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddAdditiveLightToScene
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedCapsuleTrace
import trap_CM_TransformedBoxTrace
import trap_CM_CapsuleTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_RemoveCommand
import trap_AddCommand
import trap_RealTime
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableValue
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_VR_Keyboard
import CG_VR_Menu
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_PlayBufferedVoiceChats
import CG_VoiceChatLocal
import CG_LoadVoiceChats
import CG_ShaderStateChanged
import CG_SetConfigValues
import CG_ParseSysteminfo
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_ScoreboardClick
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_GibPlayer
import CG_ScorePlum
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_DrawCrosshair3D
import CG_GetPlayerWeaponAxis
import CG_LaserNeeded
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_PlayDroppedEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_GetModelHeight
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_TrackClientTeamChange
import CG_ForceModelChange
import CG_ShowResponseHead
import CG_CheckOrderPending
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Draw3DModel
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_SelectFont
import CG_LoadFonts
import CG_DrawString
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColorTime
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawStringExt
import CG_DrawGradientPic
import CG_DrawPic
import CG_FillScreen
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_SetScoreCatcher
import CG_BuildSpectatorString
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import laserBeam
import vr_controller_type
import menu_distance
import VR_angle_hide_torso
import VR_hide_torso
import showVirtualKeyboard
import eventnames
import cg_followKiller
import cg_fovAdjust
import cg_deadBodyDarken
import cg_teamColors
import cg_teamModel
import cg_enemyColors
import cg_enemyModel
import cg_hitSounds
import cg_currentSelectedPlayer
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import cg_smoothClients
import cg_allowDeathCam
import cg_itemTimer
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_forceModel
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_drawSpeed
import cg_drawAttacker
import cg_drawPing
import cg_lagometer
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_railTrailRadius
import cg_railTrailTime
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_drawWeaponSelect
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import cg_weaponSelectorSimple2DIcons
import cg_debugWeaponAiming
import cg_fragMessage
import cg_playerShadow
import cg_weaponbob
import client_weapon
import CG_DrawAttacker_icon
import CG_DrawSelectedPlayerStatus
import HUD_color
import HUD_ItemCaptionValue
import CG_DrawTeamPlayerPowerup
import CG_Draw_Icon_Ammo
import CG_Draw_Icon_Armor
import CG_DrawStatusBarHead
import playerTeam
import getPlayerHealth
import getPlayerLocation
import getTeamPlayerName
import HUD_Update_finalRect
import HUD_DrawGradientBackground
import HUD_DrawBackground
import copyColor
import HUD_Draw_Text
import HUD_GradientValue
import FPS
import TeamOverlay_Sel_idx
import ServerMsg_idx
import ItemMsg_idx
import Attacker_idx
import KillMsg_idx
import WarmFightMsg_idx
import IcoPowerUp_idx
import WeapListSelName_idx
import IcoWeapListSel_idx
import IcoWeapList_idx
import HUD_Update_Valign
import HUD_Update_Margin
import HUD_Update_Anchors
import CG_HUDItemVisible
import CG_HUDShader
import item_Keywords
import dyn_itemCount
import dyn_itemArray
import itemCount
import itemArray
import CG_CheckHUD
import String_Init
import String_Alloc
import teams_colors
import ammo_colors
import armor_colors
import health_colors
import VRMOD_IN_Button
import VRMOD_togglePlayerLaserBeam
import VRMOD_IN_Grab
import VRMOD_IN_Triggers
import VRMOD_IN_Joystick
import VRMOD_CL_MouseEvent
import VRMOD_CL_VRInit
import VRMOD_CL_KeepLeftAngles
import VRMOD_CL_KeepRightAngles
import VRMOD_CL_KeepRightPos
import VRMOD_CL_Finish_VR_Move
import VRMOD_CL_handle_controllers
import VRMOD_CL_Get_HMD_Position
import VRMOD_CL_Get_HMD_Angles
import VRMOD_CL_GestureCrouchCheck
import positional_movementForward
import positional_movementSideways
import BigEndian
import replace1
import Q_stradd
import Q_strcpy
import BG_StripColor
import BG_CleanName
import DecodedString
import EncodedString
import strtok
import Q_stristr
import BG_sprintf
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_ValidateKeyValue
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import locase
import trap_PC_FreeSource
import trap_PC_LoadSource
import trap_PC_ReadToken
import trap_PC_SourceFileAndLine
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import Com_Split
import COM_ParseSep
import Com_InitSeparators
import SkipTillSeparators
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import hex_to_color
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampFloat
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import Q_sscanf
import ED_vsprintf
import atoi
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $2123
byte 1 101
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 100
byte 1 101
byte 1 49
byte 1 0
align 1
LABELV $2034
byte 1 67
byte 1 71
byte 1 95
byte 1 70
byte 1 105
byte 1 114
byte 1 101
byte 1 87
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 58
byte 1 32
byte 1 101
byte 1 110
byte 1 116
byte 1 45
byte 1 62
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 32
byte 1 62
byte 1 61
byte 1 32
byte 1 87
byte 1 80
byte 1 95
byte 1 78
byte 1 85
byte 1 77
byte 1 95
byte 1 87
byte 1 69
byte 1 65
byte 1 80
byte 1 79
byte 1 78
byte 1 83
byte 1 0
align 1
LABELV $1794
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 119
byte 1 104
byte 1 101
byte 1 101
byte 1 108
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 95
byte 1 115
byte 1 119
byte 1 105
byte 1 116
byte 1 99
byte 1 104
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $1587
byte 1 118
byte 1 114
byte 1 95
byte 1 104
byte 1 117
byte 1 100
byte 1 68
byte 1 101
byte 1 112
byte 1 116
byte 1 104
byte 1 0
align 1
LABELV $1564
byte 1 118
byte 1 114
byte 1 95
byte 1 115
byte 1 119
byte 1 105
byte 1 116
byte 1 99
byte 1 104
byte 1 84
byte 1 104
byte 1 117
byte 1 109
byte 1 98
byte 1 115
byte 1 116
byte 1 105
byte 1 99
byte 1 107
byte 1 115
byte 1 0
align 1
LABELV $1563
byte 1 118
byte 1 114
byte 1 95
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 83
byte 1 101
byte 1 108
byte 1 101
byte 1 99
byte 1 116
byte 1 111
byte 1 114
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 0
align 1
LABELV $1387
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $1124
byte 1 37
byte 1 102
byte 1 44
byte 1 37
byte 1 102
byte 1 44
byte 1 37
byte 1 102
byte 1 44
byte 1 37
byte 1 102
byte 1 44
byte 1 37
byte 1 102
byte 1 44
byte 1 37
byte 1 102
byte 1 44
byte 1 37
byte 1 102
byte 1 0
align 1
LABELV $1117
byte 1 118
byte 1 114
byte 1 95
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 95
byte 1 97
byte 1 100
byte 1 106
byte 1 117
byte 1 115
byte 1 116
byte 1 109
byte 1 101
byte 1 110
byte 1 116
byte 1 95
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $966
byte 1 108
byte 1 97
byte 1 115
byte 1 101
byte 1 114
byte 1 66
byte 1 101
byte 1 97
byte 1 109
byte 1 82
byte 1 71
byte 1 66
byte 1 65
byte 1 0
align 1
LABELV $965
byte 1 0
align 1
LABELV $930
byte 1 108
byte 1 97
byte 1 115
byte 1 101
byte 1 114
byte 1 66
byte 1 101
byte 1 97
byte 1 109
byte 1 83
byte 1 116
byte 1 97
byte 1 98
byte 1 105
byte 1 108
byte 1 105
byte 1 122
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $879
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 0
align 1
LABELV $837
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 98
byte 1 97
byte 1 114
byte 1 114
byte 1 101
byte 1 108
byte 1 0
align 1
LABELV $797
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $563
byte 1 37
byte 1 115
byte 1 95
byte 1 100
byte 1 102
byte 1 0
align 1
LABELV $557
byte 1 67
byte 1 71
byte 1 95
byte 1 82
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 73
byte 1 116
byte 1 101
byte 1 109
byte 1 86
byte 1 105
byte 1 115
byte 1 117
byte 1 97
byte 1 108
byte 1 115
byte 1 58
byte 1 32
byte 1 105
byte 1 116
byte 1 101
byte 1 109
byte 1 78
byte 1 117
byte 1 109
byte 1 32
byte 1 37
byte 1 100
byte 1 32
byte 1 111
byte 1 117
byte 1 116
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 114
byte 1 97
byte 1 110
byte 1 103
byte 1 101
byte 1 32
byte 1 91
byte 1 48
byte 1 45
byte 1 37
byte 1 100
byte 1 93
byte 1 0
align 1
LABELV $550
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 104
byte 1 105
byte 1 116
byte 1 115
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $549
byte 1 98
byte 1 102
byte 1 103
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $546
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 95
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $545
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 95
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $539
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $536
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $535
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 114
byte 1 103
byte 1 95
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $533
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 68
byte 1 105
byte 1 115
byte 1 99
byte 1 0
align 1
LABELV $530
byte 1 112
byte 1 108
byte 1 97
byte 1 115
byte 1 109
byte 1 97
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $527
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 115
byte 1 109
byte 1 97
byte 1 47
byte 1 104
byte 1 121
byte 1 112
byte 1 114
byte 1 98
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $526
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 115
byte 1 109
byte 1 97
byte 1 47
byte 1 108
byte 1 97
byte 1 115
byte 1 102
byte 1 108
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $524
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $521
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 47
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 108
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $520
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 47
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 49
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $518
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $515
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 108
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $514
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 102
byte 1 108
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $513
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $511
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 115
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 102
byte 1 49
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $509
byte 1 98
byte 1 117
byte 1 108
byte 1 108
byte 1 101
byte 1 116
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $506
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 103
byte 1 102
byte 1 52
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $505
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 103
byte 1 102
byte 1 51
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $504
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 103
byte 1 102
byte 1 50
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $503
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 103
byte 1 102
byte 1 49
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $501
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 50
byte 1 47
byte 1 103
byte 1 114
byte 1 97
byte 1 112
byte 1 112
byte 1 108
byte 1 101
byte 1 47
byte 1 114
byte 1 115
byte 1 116
byte 1 104
byte 1 115
byte 1 49
byte 1 51
byte 1 95
byte 1 102
byte 1 105
byte 1 115
byte 1 104
byte 1 105
byte 1 110
byte 1 103
byte 1 114
byte 1 101
byte 1 101
byte 1 108
byte 1 95
byte 1 50
byte 1 50
byte 1 95
byte 1 109
byte 1 111
byte 1 110
byte 1 111
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $500
byte 1 103
byte 1 114
byte 1 97
byte 1 112
byte 1 112
byte 1 108
byte 1 105
byte 1 110
byte 1 103
byte 1 67
byte 1 104
byte 1 97
byte 1 105
byte 1 110
byte 1 0
align 1
LABELV $497
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 50
byte 1 47
byte 1 103
byte 1 114
byte 1 97
byte 1 112
byte 1 112
byte 1 108
byte 1 101
byte 1 47
byte 1 103
byte 1 114
byte 1 97
byte 1 112
byte 1 112
byte 1 108
byte 1 101
byte 1 95
byte 1 98
byte 1 97
byte 1 114
byte 1 114
byte 1 101
byte 1 108
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $495
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 104
byte 1 105
byte 1 116
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $492
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 104
byte 1 105
byte 1 116
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $489
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 104
byte 1 105
byte 1 116
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $486
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 104
byte 1 105
byte 1 116
byte 1 115
byte 1 47
byte 1 99
byte 1 114
byte 1 97
byte 1 99
byte 1 107
byte 1 108
byte 1 101
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $483
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 66
byte 1 111
byte 1 108
byte 1 116
byte 1 78
byte 1 101
byte 1 119
byte 1 0
align 1
LABELV $480
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 66
byte 1 111
byte 1 108
byte 1 116
byte 1 0
align 1
LABELV $477
byte 1 100
byte 1 101
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 114
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $474
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $473
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $472
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 101
byte 1 108
byte 1 101
byte 1 101
byte 1 47
byte 1 102
byte 1 115
byte 1 116
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $470
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 101
byte 1 108
byte 1 101
byte 1 101
byte 1 47
byte 1 102
byte 1 115
byte 1 116
byte 1 97
byte 1 116
byte 1 99
byte 1 107
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $469
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 101
byte 1 108
byte 1 101
byte 1 101
byte 1 47
byte 1 102
byte 1 115
byte 1 116
byte 1 114
byte 1 117
byte 1 110
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $465
byte 1 108
byte 1 97
byte 1 115
byte 1 101
byte 1 114
byte 1 98
byte 1 101
byte 1 97
byte 1 109
byte 1 0
align 1
LABELV $462
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 50
byte 1 47
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 95
byte 1 104
byte 1 97
byte 1 110
byte 1 100
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $459
byte 1 95
byte 1 104
byte 1 97
byte 1 110
byte 1 100
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $458
byte 1 95
byte 1 98
byte 1 97
byte 1 114
byte 1 114
byte 1 101
byte 1 108
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $457
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $443
byte 1 67
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 110
byte 1 39
byte 1 116
byte 1 32
byte 1 102
byte 1 105
byte 1 110
byte 1 100
byte 1 32
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $219
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 67
byte 1 111
byte 1 114
byte 1 101
byte 1 0
